function varargout = umass_vic_assist(varargin)
% UMASS_VIC_ASSIST MATLAB code for umass_vic_assist.fig
%      UMASS_VIC_ASSIST, by itself, creates a new UMASS_VIC_ASSIST or raises the existing
%      singleton*.
%
%      H = UMASS_VIC_ASSIST returns the handle to a new UMASS_VIC_ASSIST or the handle to
%      the existing singleton*.
%
%      UMASS_VIC_ASSIST('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in UMASS_VIC_ASSIST.M with the given input arguments.
%
%      UMASS_VIC_ASSIST('Property','Value',...) creates a new UMASS_VIC_ASSIST or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before umass_vic_assist_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to umass_vic_assist_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES

% Edit the above text to modify the response to help umass_vic_assist

% Last Modified by GUIDE v2.5 13-Apr-2017 22:21:21

% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                   'gui_Singleton',  gui_Singleton, ...
                   'gui_OpeningFcn', @umass_vic_assist_OpeningFcn, ...
                   'gui_OutputFcn',  @umass_vic_assist_OutputFcn, ...
                   'gui_LayoutFcn',  [] , ...
                   'gui_Callback',   []);
if nargin && ischar(varargin{1})
    gui_State.gui_Callback = str2func(varargin{1});
end

if nargout
    [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
    gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT


% --- Executes just before umass_vic_assist is made visible.
function umass_vic_assist_OpeningFcn(hObject, eventdata, handles, varargin)


%%%%%%%%%%%%%%%%%%%%%%%   User-Defined Fields   %%%%%%%%%%%%%%%%%%%%%%%%%%%
handles.pythonexedir        = 'C:\Python27\ArcGIS10.7';                    % Where is the python executable file provided by ArcGIS?
handles.WhereIsCygwin       = 'C:\cygwin64';                               % Where did you install the Cygwin?
handles.WhereIsVIC_4_2_b	= 'C:\cygwin64\home\sungw\VIC-4.2.b\src';       % Where is the VIC excutable file?
handles.WhereIsVIC_4_2_c	= 'C:\cygwin64\home\sungw\VIC-4.2.c\src'; 
handles.WhereIsVIC_4_2_d	= 'C:\cygwin64\home\sungw\VIC-4.2.d\src'; 
handles.WhereIsVIC_5_0_1	= 'C:\Users\Wi\Cygwin\home\Wi\VIC-5.0.1\vic\drivers\classic'; 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%   CLIMTE DATA DIRECTORY   %%%%%%%%%%%%%%%%%%%%%%%% 
% handles.climateforcing_dir_prefix.extCONUS	= '.\meteo\CONUS\1_16deg_gridascii\Meteorology_Livneh_CONUSExt_v.1.2_2013_'; 
handles.climateforcing_dir_prefix.extCONUS2	= '.\meteo\CONUS\Livneh2015\ascii\Meteorology_Livneh_NAmerExt_15Oct2014_';
handles.climateforcing_dir_prefix.CONUS     = '.\meteo\CONUS\1_8deg_gridascii\data_';
handles.climateforcing_dir_prefix.PGF025    = '.\meteo\PGF\0.25deg_gridascii\data_';
handles.climateforcing_dir_prefix.PGF050    = '.\meteo\PGF\0.5deg_gridascii\data_';
handles.climateforcing_dir_prefix.PGF100    = '.\meteo\PGF\1.0deg_gridascii\data_';
handles.climateforcing_dir_prefix.UWGF050   = '.\meteo\UWGF\0.5deg_gridascii\data_';
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   ADD PATH   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
addpath('.\library\help_doc')
addpath('.\library\sub_func')
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%   OPENNIGN WINDOW WITH A WORLD MAP   %%%%%%%%%%%%%%%%%%%
country = shaperead('.\library\misc\shapefile\country.shp','UseGeoCoords',true);
countrynum = size(country,1); 
for i = 1:countrynum
    geoshow(handles.axes_watershedmap,country(i).Lat,country(i).Lon,'color',[0.75 0.75 0.75]) 
end
xlabel(handles.axes_watershedmap,'Longitude ^{o}','fontsize',12)
ylabel(handles.axes_watershedmap,'Latitude ^{o}','fontsize',12)
set(handles.axes_watershedmap,'xlim',[-180, 180])
set(handles.axes_watershedmap,'ylim',[-90, 90])
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%   TWO FIGURES IN RUN VIC   %%%%%%%%%%%%%%%%%%%%%%%%
xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',10)
ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',10)

xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%   TWO FIGURES GA STATUS   %%%%%%%%%%%%%%%%%%%%%%%%%
set(handles.axes_ga_status,'xlim',[0, 100])
set(handles.axes_ga_status,'ylim',[0, 1])
xlabel(handles.axes_ga_status,'Generation','fontsize',10)
ylabel(handles.axes_ga_status,'NSE','fontsize',10)

set(handles.axes_ga_status_subbasin,'xlim',[0, 100])
set(handles.axes_ga_status_subbasin,'ylim',[0, 1])
set(handles.axes_ga_status_subbasin,'xcolor',[0.65 0.65 0.65],'ycolor',[0.65 0.65 0.65])
xlabel(handles.axes_ga_status_subbasin,'Generation','fontsize',10)
ylabel(handles.axes_ga_status_subbasin,'NSE at Sub-basins','fontsize',10)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%  INPUT FILE SEARCH IN GLOBAL CONFIGURATION FILE   %%%%%%%%%%%%%
set(handles.pushbutton_soilfile_search,'string',char(61489));
set(handles.pushbutton_vegparamfile_search,'string',char(61489));
set(handles.pushbutton_veglibfile_search,'string',char(61489));
set(handles.pushbutton_vicoutdir_search,'string',char(61488));
set(handles.pushbutton_snowbandfile_search,'string',char(61489));
set(handles.pushbutton_forcingfile_search,'string',char(61488));
set(handles.pushbutton_routfile_search,'string',char(61489));
set(handles.pushbutton_routoutdir_search,'string',char(61488));
set(handles.pushbutton_lakefile_search,'string',char(61489));
set(handles.pushbutton_inistatefile_search,'string',char(61489));
set(handles.pushbutton_statefiledir_search,'string',char(61488));
set(handles.pushbutton_SAVE,'string',['SAVE ',char(61500)],'fontsize',11);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%   VIC INPUT FILE GENERATION   %%%%%%%%%%%%%%%%%%%%%%%
set(handles.pushbutton_DigitalElevationModel_search,'string',char(61489));
set(handles.pushbutton_WatershedPolygonShape_search,'string',char(61489));
set(handles.pushbutton_FlowLengthRaster_search,'string',char(61489));
set(handles.pushbutton_OutputFileSoilParameter_search,'string',char(61500));
set(handles.pushbutton_OutputFileVegeParameter_search,'string',char(61500));
set(handles.pushbutton_OutputFileRouteParameter_search,'string',char(61500));
set(handles.pushbutton_OutputFileSnowBand_search,'string',char(61500));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%   VIC INPUTS IN RUN VIC   %%%%%%%%%%%%%%%%%%%%%%%%%
set(handles.pushbutton_VICglobalconfigfile_search,'string',char(61489));
set(handles.pushbutton_VICglobalconfigfile_search_batch,'string',char(61489));
set(handles.pushbutton_ObsFlowFile_search,'string',char(61489));
set(handles.pushbutton_undock_fig,'string',['Undock ',char(10138)]);
set(handles.pushbutton_globalconfigfile_batch_up,'string',char(8679));
set(handles.pushbutton_globalconfigfile_batch_down,'string',char(8681));
set(handles.pushbutton_globalconfigfile_batch_import,'string',char(8678));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%   INPUT SEARCH IN CALIBRATION   %%%%%%%%%%%%%%%%%%%
% set(handles.pushbutton_vicgainitialfile,'string',char(61489),'fontsize',11);
set(handles.pushbutton_vicgastofile,'string',char(61488),'fontsize',11);
set(handles.pushbutton_CAL_INPUT_globalfile,'string',char(61489),'fontsize',11);
set(handles.pushbutton_CAL_INPUT_outflowfile,'string',char(61489),'fontsize',11);
set(handles.pushbutton_CAL_INPUT_subflowfile,'string',char(61489),'fontsize',11);
set(handles.pushbutton_CAL_INPUT_subroutfile,'string',char(61489),'fontsize',11);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%   CLIMATE FORCING SETUP IN GLOBAL FILE   %%%%%%%%%%%%%%%%%%%
set(handles.uitable_vartype,'data',cell(4,1))
set(handles.listbox_FORCE_TYPE, 'min', 0, 'max', 2);
set(handles.listbox_FORCE_TYPE,'Value',[]);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%   CLIMATE VARIABLE EXTRATED FOR GRIDDED DATA   %%%%%%%%%%%%%
set(handles.listbox_MeteoVar, 'min', 0, 'max', 2);
set(handles.listbox_MeteoVar,'Value',[]);
set(handles.listbox_MeteoVar_ext, 'min', 0, 'max', 2);
set(handles.listbox_MeteoVar_ext,'Value',[]);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%   LAT&LON TABLE IN WATERSHED DELINEATION   %%%%%%%%%%%%%%%%%
set(handles.uitable_latlon,'data',cell(1,3))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%   TABLES IN GA CALIBRATION   %%%%%%%%%%%%%%%%%%%%%%%%
set(handles.uitable_CAL_INPUT_calper,'data',cell(1,6))
set(handles.uitable_CAL_INPUT_calper,'RowName','OUT')
set(handles.uitable_CAL_INPUT_timestep,'data',cell(1,2))
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%   GRID RESOLUTION RADIO BUTTONS   %%%%%%%%%%%%%%%%%%%
set(handles.radiobutton_gridres_1_16,'string',['1/16',char(186)])
set(handles.radiobutton_gridres_1_8,'string',['1/8',char(186)])
set(handles.radiobutton_gridres_0_25,'string',['0.25',char(186)])
set(handles.radiobutton_gridres_0_5,'string',['0.5',char(186)])
set(handles.radiobutton_gridres_1,'string',['1.0',char(186)])
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%   SETTING UP METEO VARIABLES   %%%%%%%%%%%%%%%%%%%%%%%
set(handles.listbox_MeteoVar,'String',{'prcp (mm)';['tas (',char(186),'C)'];...
    ['tmax (',char(186),'C)'];['tmin (',char(186),'C)'];'wind (m/s)'})
set(handles.pushbutton_Meteo_Var_move_up,'string',char(8679));
set(handles.pushbutton_Meteo_Var_move_down,'string',char(8681));
set(handles.pushbutton_GridClimateGen_Output_search,'string',char(61488));
set(handles.pushbutton_GridClimateGen_WatershedPoly_search,'string',char(61489));
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%   CHECK PARALLEL COMPUTING TOOLBOX   %%%%%%%%%%%%%%%%%%%
v = ver;
has_fsolve = any(strcmp(cellstr(char(v.Name)), 'Parallel Computing Toolbox'));
if has_fsolve
    set(handles.checkbox_parallelpool,'enable','on')
    set(handles.popupmenu_RunMode_batch,'String',{'Select';'Normal';'Fast';'Parallel'})
else
    set(handles.popupmenu_RunMode_batch,'String',{'Select';'Normal';'Fast';'Parallel (No License)'})
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

set(handles.pushbutton_gsa_save,'string',['SAVE ',char(61500)],'fontsize',11);


%%%%%%%%%%%%%%%%%%%%%%%%%%   INITIALIZATIONS   %%%%%%%%%%%%%%%%%%%%%%%%%%%%
handles.seletedrow = 1;
handles.seletedrow2 = 0;
handles.seletedrow3 = 0;

handles.climategrid_exist = 0;
handles.streamline_exist = 0;
    
handles.outletpoint_handles_length = 0;
handles.basinboundary_handles_length = 0;
handles.streamline_handles_length = 0;

handles.finish_grid_lat = [];
handles.finish_grid_lon = [];
handles.finish_grid_lat_rout = [];
handles.finish_grid_lon_rout = [];

handles.activegridnum = 0;

handles.StreamPlot_timestep_old = 'Daily';

handles.calready_vicgastorage = 0;
handles.calready_globalfile = 0;
handles.calready_flowobs = 0;
handles.calready_calpar = 0;
handles.calready_simper = 0;
handles.calready_calper = 0;
handles.calready_pooled = 1;

handles.baseflow_model = 'ARNO';

handles.eet_std = cell(0);

% yrmat = (1915:2011);
yrmat = (1950:2013);
yr_cell = cell(length(yrmat),1);
for i = 1:length(yrmat)
    yr_cell{i} = num2str(yrmat(i));
end
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
set(handles.popupmenu_DataPeriod_syr,'String',yr_cell,'Value',1)
set(handles.popupmenu_DataPeriod_eyr,'String',yr_cell,'Value',length(yrmat))
set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',1)
set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',12)
set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:31),'Value',1)
set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:31),'Value',31)


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

handles.lastvisitdir = pwd;

    
% Choose default command line output for umass_vic_assist
handles.output = hObject;
% Update handles structure
guidata(hObject, handles);

% UIWAIT makes umass_vic_assist wait for user response (see UIRESUME)
% uiwait(handles.figure1);


% --- Outputs from this function are returned to the command line.
function varargout = umass_vic_assist_OutputFcn(hObject, eventdata, handles) 
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Get default command line output from handles structure
varargout{1} = handles.output;


% --- Executes on button press in pushbutton_Watershed.
function pushbutton_Watershed_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_Watershed,'foregroundcolor','k')
    set(handles.uipanel_Watershed,'visible','on')
    
    set(handles.pushbutton_WatershedDelineation,'value',0)
    set(handles.pushbutton_GridClimateGeneration,'value',0)
    set(handles.pushbutton_InputFileGeneration,'value',0)
    set(handles.pushbutton_Calibration,'value',0)
    
    set(handles.pushbutton_WatershedDelineation,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_GridClimateGeneration,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_InputFileGeneration,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_Calibration,'foregroundcolor',[0.65,0.65,0.65])
    
    set(handles.uipanel_WatershedDelineation,'visible','off')
    set(handles.uipanel_InputFileGen,'visible','off')
    set(handles.uipanel_GridClimateGeneration,'visible','off')
    set(handles.uipanel_Calibration,'visible','off')

else
    set(handles.pushbutton_Watershed,'value',1)
end


% --- Executes on button press in pushbutton_WatershedDelineation.
function pushbutton_WatershedDelineation_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_WatershedDelineation,'foregroundcolor','k')
    set(handles.uipanel_WatershedDelineation,'visible','on')
    
    set(handles.pushbutton_Watershed,'value',0)
    set(handles.pushbutton_GridClimateGeneration,'value',0)
    set(handles.pushbutton_InputFileGeneration,'value',0)
    set(handles.pushbutton_Calibration,'value',0)
    
    set(handles.pushbutton_Watershed,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_GridClimateGeneration,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_InputFileGeneration,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_Calibration,'foregroundcolor',[0.65,0.65,0.65])
    
    set(handles.uipanel_Watershed,'visible','off')
    set(handles.uipanel_InputFileGen,'visible','off')
    set(handles.uipanel_GridClimateGeneration,'visible','off')
    set(handles.uipanel_Calibration,'visible','off')

else
    set(handles.pushbutton_WatershedDelineation,'value',1)
end


% --- Executes on button press in pushbutton_GridClimateGeneration.
function pushbutton_GridClimateGeneration_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_GridClimateGeneration,'foregroundcolor','k')
    set(handles.uipanel_GridClimateGeneration,'visible','on')
    
    set(handles.pushbutton_Watershed,'value',0)
    set(handles.pushbutton_WatershedDelineation,'value',0)
    set(handles.pushbutton_InputFileGeneration,'value',0)
    set(handles.pushbutton_Calibration,'value',0)
    
    set(handles.pushbutton_Watershed,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_WatershedDelineation,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_InputFileGeneration,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_Calibration,'foregroundcolor',[0.65,0.65,0.65])
    
    set(handles.uipanel_Watershed,'visible','off')
    set(handles.uipanel_WatershedDelineation,'visible','off')
    set(handles.uipanel_InputFileGen,'visible','off')
    set(handles.uipanel_Calibration,'visible','off')

else
    set(handles.pushbutton_GridClimateGeneration,'value',1)
end


% --- Executes on button press in pushbutton_InputFileGeneration.
function pushbutton_InputFileGeneration_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_InputFileGeneration,'foregroundcolor','k')
    set(handles.uipanel_InputFileGen,'visible','on')
    
    set(handles.pushbutton_Watershed,'value',0)
    set(handles.pushbutton_WatershedDelineation,'value',0)
    set(handles.pushbutton_GridClimateGeneration,'value',0)
    set(handles.pushbutton_Calibration,'value',0)
    
    set(handles.pushbutton_Watershed,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_WatershedDelineation,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_GridClimateGeneration,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_Calibration,'foregroundcolor',[0.65,0.65,0.65])
    
    set(handles.uipanel_Watershed,'visible','off')
    set(handles.uipanel_WatershedDelineation,'visible','off')
    set(handles.uipanel_GridClimateGeneration,'visible','off')
    set(handles.uipanel_Calibration,'visible','off')

else
    set(handles.pushbutton_InputFileGeneration,'value',1)
end


% --- Executes on button press in pushbutton_Calibration.
function pushbutton_Calibration_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_Calibration,'foregroundcolor','k')
    set(handles.uipanel_Calibration,'visible','on')
    
    set(handles.pushbutton_Watershed,'value',0)
    set(handles.pushbutton_WatershedDelineation,'value',0)
    set(handles.pushbutton_GridClimateGeneration,'value',0)
    set(handles.pushbutton_InputFileGeneration,'value',0)
    
    set(handles.pushbutton_Watershed,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_WatershedDelineation,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_GridClimateGeneration,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_InputFileGeneration,'foregroundcolor',[0.65,0.65,0.65])
    
    set(handles.uipanel_Watershed,'visible','off')
    set(handles.uipanel_WatershedDelineation,'visible','off')
    set(handles.uipanel_GridClimateGeneration,'visible','off')
    set(handles.uipanel_InputFileGen,'visible','off')

else
    set(handles.pushbutton_Calibration,'value',1)
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%                           Watershed View
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function popupmenu_watershedview_watershedlist_Callback(hObject, eventdata, handles)
% Plot
selbasin_file_val = get(hObject,'Value');
selbasin_file_str = get(hObject,'String');
basin_num = length(selbasin_file_str);
randcolor = rand(basin_num-2,3);

if strcmp(selbasin_file_str{selbasin_file_val},'ALL')  
    for i = 1:handles.basinboundary_handles_length
        eval(['delete(handles.basinboundary_handles.h',num2str(i),')'])
    end
    for i = 1:basin_num-2
        polyshp = shaperead(selbasin_file_str{i+2},'UseGeoCoords',true);
        h = geoshow(handles.axes_watershedmap,polyshp.Lat,polyshp.Lon,'color',randcolor(i,:),'linewidth',2);
        eval(['handles.basinboundary_handles.h',num2str(i),' = h;'])
    end   
    handles.basinboundary_handles_length = length(fieldnames(handles.basinboundary_handles));
elseif ~strcmp(selbasin_file_str{selbasin_file_val},'ALL') && ~strcmp(selbasin_file_str{selbasin_file_val},'none selected')  
    for i = 1:handles.basinboundary_handles_length
        eval(['delete(handles.basinboundary_handles.h',num2str(i),')'])
    end
    polyshp = shaperead(selbasin_file_str{selbasin_file_val},'UseGeoCoords',true);
    h = geoshow(handles.axes_watershedmap,polyshp.Lat,polyshp.Lon,'color',randcolor(1,:),'linewidth',2);   
    handles.basinboundary_handles.h1 = h;
    handles.basinboundary_handles_length = length(fieldnames(handles.basinboundary_handles));
elseif strcmp(selbasin_file_str{selbasin_file_val},'none selected')
    for i = 1:handles.basinboundary_handles_length
        eval(['delete(handles.basinboundary_handles.h',num2str(i),')'])
    end
end

guidata(hObject, handles);


function popupmenu_watershedview_outletlist_Callback(hObject, eventdata, handles)

selbasin_file_val = get(hObject,'Value');
selbasin_file_str = get(hObject,'String');
basin_num = length(selbasin_file_str);

if strcmp(selbasin_file_str{selbasin_file_val},'ALL')
    for i = 1:handles.outletpoint_handles_length
        eval(['delete(handles.outletpoint_handles.h',num2str(i),')'])
    end
    for i = 1:basin_num-2
        polyshp = shaperead(selbasin_file_str{i+2},'UseGeoCoords',true);
        h = geoshow(handles.axes_watershedmap,polyshp.Lat,polyshp.Lon,'marker','^','markeredgecolor','k','markerfacecolor','k','markersize',12);
        eval(['handles.outletpoint_handles.h',num2str(i),' = h;'])
    end 
    handles.outletpoint_handles_length = length(fieldnames(handles.outletpoint_handles));
elseif ~strcmp(selbasin_file_str{selbasin_file_val},'ALL') && ~strcmp(selbasin_file_str{selbasin_file_val},'none selected') 
    for i = 1:handles.outletpoint_handles_length
        eval(['delete(handles.outletpoint_handles.h',num2str(i),')'])
    end
    polyshp = shaperead(selbasin_file_str{selbasin_file_val},'UseGeoCoords',true);
    h = geoshow(handles.axes_watershedmap,polyshp.Lat,polyshp.Lon,'marker','^','markeredgecolor','k','markerfacecolor','k','markersize',12);
    handles.outletpoint_handles.h1 = h;
    handles.outletpoint_handles_length = length(fieldnames(handles.outletpoint_handles));
elseif strcmp(selbasin_file_str{selbasin_file_val},'none selected')
    for i = 1:handles.outletpoint_handles_length
        eval(['delete(handles.outletpoint_handles.h',num2str(i),')'])
    end
end

guidata(hObject, handles);


function popupmenu_watershedview_climategridlist_Callback(hObject, eventdata, handles)

% Where is the basin boundary shape file?
Watershed_polygon_all = get(handles.popupmenu_watershedview_watershedlist,'String');
num_basin = length(Watershed_polygon_all);

if handles.climategrid_exist
    delete(handles.climategrid_handles)
    set(handles.text_selectedgridnumber,'String','NaN','Visible','off')
end

% Lat&Lon points for the selected climate forcing
if get(hObject,'Value') == 2
%     latmat = (23.59375:0.0625:51.71875);
%     lonmat = (-127.59375:0.0625:-61.96875);
    latmat = (-89.96875:0.0625:89.96875);
    lonmat = (-179.96875:0.0625:179.96875);
    halfgridsize = 0.0625/2;
elseif get(hObject,'Value') == 3
%     latmat = (24.0625:0.125:50.9375);
%     lonmat = (-126.5625:0.125:-61.9375);
    latmat = (-89.9375:0.125:89.9375);
    lonmat = (-179.9375:0.125:179.9375);
    halfgridsize = 0.125/2;
elseif get(hObject,'Value') == 4
    latmat = (-89.875:0.25:89.875);
    lonmat = (0.125:0.25:359.875);
    lonmat(lonmat>180) = lonmat(lonmat>180)-360;
    halfgridsize = 0.25/2;
elseif get(hObject,'Value') == 5
    latmat = (-89.75:0.5:89.75);
    lonmat = (0.25:0.5:359.75);
    lonmat(lonmat>180) = lonmat(lonmat>180)-360;
    halfgridsize = 0.5/2;
elseif get(hObject,'Value') == 6
    latmat = (-89.5:1:89.5);
    lonmat = (0.5:1:359.5);
    lonmat(lonmat>180) = lonmat(lonmat>180)-360;
    halfgridsize = 1.0/2;
end

if get(handles.popupmenu_watershedview_watershedlist,'Value')>=3 && get(hObject,'Value') ~= 1
    
    Watershed_polygon   = Watershed_polygon_all{get(handles.popupmenu_watershedview_watershedlist,'Value')};
    watershed_shpinfo = shaperead(Watershed_polygon);
    
    % First trimming out grids for a retangular area covering the watershed
    latmat_trim = latmat(latmat>(watershed_shpinfo.BoundingBox(1,2)-halfgridsize) & latmat<(watershed_shpinfo.BoundingBox(2,2)+halfgridsize));
    lonmat_trim = lonmat(lonmat>(watershed_shpinfo.BoundingBox(1,1)-halfgridsize) & lonmat<(watershed_shpinfo.BoundingBox(2,1)+halfgridsize));
    
    % Second trimming out grids for the watershed boundary
    grid_lat  = [];
    grid_lon  = [];
    for i = 1:length(latmat_trim)
        
        for j = 1:length(lonmat_trim)
            
            latlim = [latmat_trim(i)-halfgridsize,latmat_trim(i)+halfgridsize];
            lonlim = [lonmat_trim(j)-halfgridsize,lonmat_trim(j)+halfgridsize];
            
            [polylat,~] = maptrimp(watershed_shpinfo.Y, watershed_shpinfo.X, latlim, lonlim);
            
            if ~isempty(polylat)
                grid_lat  = [grid_lat; latmat_trim(i)];
                grid_lon  = [grid_lon; lonmat_trim(j)];
            end
            
        end
        
    end
    
    poly_lat_all = [];
    poly_lon_all = [];
    for i = 1:length(grid_lat)
        
        poly_lat = [grid_lat(i)+halfgridsize, grid_lat(i)+halfgridsize, grid_lat(i)-halfgridsize,grid_lat(i)-halfgridsize, grid_lat(i)+halfgridsize, NaN];
        poly_lon = [grid_lon(i)-halfgridsize, grid_lon(i)+halfgridsize, grid_lon(i)+halfgridsize,grid_lon(i)-halfgridsize, grid_lon(i)-halfgridsize, NaN];
        
        poly_lat_all = [poly_lat_all,poly_lat];
        poly_lon_all = [poly_lon_all,poly_lon];
        
    end
    
    h = geoshow(handles.axes_watershedmap,poly_lat_all, poly_lon_all,'color','k');
    handles.climategrid_handles = h;
    handles.climategrid_exist = 1;
    
    set(handles.text_selectedgridnumber,'String',[num2str(length(grid_lat)),' grids'],'Visible','on')
    
end

if get(handles.popupmenu_watershedview_watershedlist,'Value')==2 && get(hObject,'Value') ~= 1
    
    grid_lat_ALL  = [];
    grid_lon_ALL  = [];
    for nb = 1:num_basin-2
        
        Watershed_polygon   = Watershed_polygon_all{nb+2};
        watershed_shpinfo = shaperead(Watershed_polygon);
        
        % First trimming out grids for a retangular area covering the watershed
        latmat_trim = latmat(latmat>(watershed_shpinfo.BoundingBox(1,2)-halfgridsize) & latmat<(watershed_shpinfo.BoundingBox(2,2)+halfgridsize));
        lonmat_trim = lonmat(lonmat>(watershed_shpinfo.BoundingBox(1,1)-halfgridsize) & lonmat<(watershed_shpinfo.BoundingBox(2,1)+halfgridsize));
        
        % Second trimming out grids for the watershed boundary
        grid_lat  = [];
        grid_lon  = [];
        for i = 1:length(latmat_trim)
            
            for j = 1:length(lonmat_trim)
                
                latlim = [latmat_trim(i)-halfgridsize,latmat_trim(i)+halfgridsize];
                lonlim = [lonmat_trim(j)-halfgridsize,lonmat_trim(j)+halfgridsize];
                
                [polylat,~] = maptrimp(watershed_shpinfo.Y, watershed_shpinfo.X, latlim, lonlim);
                
                if ~isempty(polylat)
                    grid_lat  = [grid_lat; latmat_trim(i)];
                    grid_lon  = [grid_lon; lonmat_trim(j)];
                end
                
            end
            
        end
        
        grid_lat_ALL  = [grid_lat_ALL;grid_lat];
        grid_lon_ALL  = [grid_lon_ALL;grid_lon];
        
    end

    unique_latlon = unique([grid_lat_ALL,grid_lon_ALL],'rows');  
    grid_lat  = unique_latlon(:,1);
    grid_lon  = unique_latlon(:,2);
    
    poly_lat_all = [];
    poly_lon_all = [];
    for i = 1:length(grid_lat)
        
        poly_lat = [grid_lat(i)+halfgridsize, grid_lat(i)+halfgridsize, grid_lat(i)-halfgridsize,grid_lat(i)-halfgridsize, grid_lat(i)+halfgridsize, NaN];
        poly_lon = [grid_lon(i)-halfgridsize, grid_lon(i)+halfgridsize, grid_lon(i)+halfgridsize,grid_lon(i)-halfgridsize, grid_lon(i)-halfgridsize, NaN];
        
        poly_lat_all = [poly_lat_all,poly_lat];
        poly_lon_all = [poly_lon_all,poly_lon];
        
    end
    
    h = geoshow(handles.axes_watershedmap,poly_lat_all, poly_lon_all,'color','k');
    handles.climategrid_handles = h;
    handles.climategrid_exist = 1;
    
    set(handles.text_selectedgridnumber,'String',[num2str(length(grid_lat)),' grids'],'Visible','on')
    
end
guidata(hObject, handles);


function checkbox_Stream_Callback(hObject, eventdata, handles)

if handles.radiobutton_WatershedDelineation_New.Value
    outdir = strrep(handles.edit_outputdir.String,'\','/');
    polyshp = shaperead([outdir,'/stream'],'UseGeoCoords',true);
end

if handles.radiobutton_WatershedDelineation_Import.Value
    polyshp = shaperead(strrep(handles.edit_StreamFileDir.String,'\','/'),'UseGeoCoords',true);
end

if get(hObject,'Value')
    for i = 1:length(polyshp)
        h = geoshow(handles.axes_watershedmap,polyshp(i).Lat,polyshp(i).Lon,'color',[0.4 0.8 1.0]);
        eval(['handles.streamline_handles.h',num2str(i),' = h;'])
    end
    handles.streamline_handles_length = length(fieldnames(handles.streamline_handles));
    handles.streamline_exist = 1;
else
    for i = 1:handles.streamline_handles_length
        eval(['delete(handles.streamline_handles.h',num2str(i),')'])
    end
    handles.streamline_exist = 0;
end
guidata(hObject,handles)



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%                   Watershed Delineation        
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function radiobutton_WatershedDelineation_New_Callback(hObject, eventdata, handles)

if get(hObject,'Value') %&& get(handles.radiobutton_WatershedDelineation_Import,'Value')
    
    set(handles.uipanel_NewWatershed,'ForegroundColor','k','ShadowColor','k')
    set(handles.uipanel_DEM_NEW,'ForegroundColor','k')
    set(handles.uipanel_OuteletCoordinate_New,'ForegroundColor','k')
    set(handles.uipanel_OutputDirectory_New,'ForegroundColor','k')
    set(handles.uipanel_streamdefinition,'ForegroundColor','k')
    
    set(handles.edit_demfile,'Enable','on')
    set(handles.pushbutton_opendemfile,'Enable','on')
    set(handles.uitable_latlon,'Enable','on')
    set(handles.pushbutton_importtable,'Enable','on')
    set(handles.pushbutton_addrow,'Enable','on')
    set(handles.pushbutton_cleartable,'Enable','on')
    set(handles.edit_outputdir,'Enable','on')
    set(handles.pushbutton_outsearch,'Enable','on')
    set(handles.pushbutton_StartDelineation,'Enable','on')
    set(handles.edit_streamthreshold,'Enable','on')
    set(handles.pushbutton_streamdefinition_help,'Enable','on')
    
    set(handles.text_streamthreshold,'ForegroundColor','k')
    set(handles.text_percent,'ForegroundColor','k')
       
    set(handles.radiobutton_WatershedDelineation_Import,'Value',0)
    set(handles.uipanel_ImportWatershed,'ForegroundColor',[0.65 0.65 0.65],'ShadowColor',[0.7 0.7 0.7])
    set(handles.text_Boundary_Import,'ForegroundColor',[0.65 0.65 0.65])
    set(handles.text_Outlet_Import,'ForegroundColor',[0.65 0.65 0.65])
    set(handles.text_Stream_Import,'ForegroundColor',[0.65 0.65 0.65])
    
    set(handles.edit_BoundaryFileDir,'Enable','off')
    set(handles.pushbutton_BoundaryOpen,'Enable','off')
    set(handles.listbox_Boundary,'Enable','off')
    set(handles.pushbutton_BoundaryAdd,'Enable','off')
    set(handles.pushbutton_BoundaryRemove,'Enable','off')
    set(handles.edit_OutletFileDir,'Enable','off')
    set(handles.pushbutton_OutletOpen,'Enable','off')
    set(handles.listbox_Outlet,'Enable','off')
    set(handles.pushbutton_OutletAdd,'Enable','off')
    set(handles.pushbutton_OutletRemove,'Enable','off')    
    set(handles.edit_StreamFileDir,'Enable','off')
    set(handles.pushbutton_StreamOpen,'Enable','off')
    
    if strcmp(get(handles.togglebutton_WatershedImport,'String'),'Reset')
        set(handles.togglebutton_WatershedImport,'Value',0)
    end
    set(handles.togglebutton_WatershedImport,'Enable','off')
    
    if sum(get(handles.text_status_stepbar1,'BackgroundColor')-[0.65 0.65 0.65]) == 0
        set(handles.text_status_stepbar1,'BackgroundColor',[1 0 0])
        set(handles.text_status_stepbar2,'BackgroundColor',[1 0 0])
        set(handles.text_status_stepbar3,'BackgroundColor',[1 0 0])
        set(handles.text_status_stepbar4,'BackgroundColor',[1 0 0])
        set(handles.text_status_stepbar5,'BackgroundColor',[1 0 0])
        set(handles.text_status_stepbar6,'BackgroundColor',[1 0 0])
    end
    
end 

if ~get(hObject,'Value') && ~get(handles.radiobutton_WatershedDelineation_Import,'Value')
    set(hObject,'Value',1)      
end


function pushbutton_opendemfile_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*.tif'],'DEM File Selector');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_demfile,'string',filedir)
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

function pushbutton_importtable_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile({'*.xlsx';'*.xls';'*.txt';'*.csv'},'Select a file to be imported',handles.lastvisitdir);
filedir = [filepath, filename];
if ischar(filedir)
    [~,~,ext] = fileparts(filedir);
    if strcmp(ext,'.txt')
        fid = fopen(filedir,'r');
        content = textscan(fid,'%s %f %f');
        data = cell(length(content{1}),3);
        data(:,1) = content{1};
        data(:,2) = num2cell(content{2});
        data(:,3) = num2cell(content{3});
        set(handles.uitable_latlon,'data',data)
    elseif strcmp(ext,'.xls') || strcmp(ext,'.xlsx') || strcmp(ext,'.csv')
        [~,~,content] = xlsread(filedir);
        data = cell(size(content,1),3);
        data(:,1) = content(:,1);
        data(:,2) = content(:,2);
        data(:,3) = content(:,3);
        set(handles.uitable_latlon,'data',data)
    end
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

function pushbutton_addrow_Callback(hObject, eventdata, handles)
data = get(handles.uitable_latlon, 'data');
data(end+1,:) = cell(1,3);
set(handles.uitable_latlon,'data',data)


function pushbutton_cleartable_Callback(hObject, eventdata, handles)
set(handles.uitable_latlon,'data',cell(1,3))


function pushbutton_outsearch_Callback(hObject, eventdata, handles)
filedir = uigetdir(handles.lastvisitdir,'Watershed Delineation Output Directory');
if ischar(filedir)
    set(handles.edit_outputdir,'string',filedir)
    handles.lastvisitdir = filedir;
end
guidata(hObject,handles);


% --- Executes on button press in pushbutton_StartDelineation.
function pushbutton_StartDelineation_Callback(hObject, eventdata, handles)
% User defined input information
demfile = strrep(handles.edit_demfile.String,'\','/');
outdir = strrep(handles.edit_outputdir.String,'\','/');
latlon = handles.uitable_latlon.Data;

% [~,dem_tiffinfo] = geotiffread(demfile);
% iscomplete = sum(~cellfun('isempty',latlon),2) == 3;
% for i = 1:length(iscomplete)   
%     if iscomplete(i)      
%         if latlon{i,2} < dem_tiffinfo.LatitudeLimits(1) || latlon{i,2} > dem_tiffinfo.LatitudeLimits(2) || latlon{i,3} < dem_tiffinfo.LongitudeLimits(1) || latlon{i,3} > dem_tiffinfo.LongitudeLimits(2)
%             errordlg([num2str(latlon{i,2}),' and ',num2str(latlon{i,3}),' is not with in the DEM domain'],'Input Coordinates Error');
%             error('Input Coordinates Error: %f and %f is not with in the DEM domain',latlon{i,2},latlon{i,3})
%         end      
%     end    
% end

set(handles.text_status_stepbar1,'BackgroundColor','w')
set(handles.text_status_stepbar2,'BackgroundColor','w')
set(handles.text_status_stepbar3,'BackgroundColor','w')
set(handles.text_status_stepbar4,'BackgroundColor','w')
set(handles.text_status_stepbar5,'BackgroundColor','w')
set(handles.text_status_stepbar6,'BackgroundColor','w')

set(handles.text_WatershedDelineationTrack,'String','Status Tracking: Filling DEM','ForegroundColor','k')

if handles.streamline_exist == 1
    for i = 1:handles.streamline_handles_length
        eval(['delete(handles.streamline_handles.h',num2str(i),')'])
    end
    handles.streamline_exist = 0;
end

tic;

% DEM process
FillDEM(demfile,[outdir,'/'])
pause(1) % Wait for a second to write python script
eval(['!',handles.pythonexedir,'\python.exe ',outdir,'\FillDEM_temp.py'])
delete([outdir,'/FillDEM_temp.py']) % remove the temporary python script
set(handles.text_status_stepbar1,'BackgroundColor','r')
set(handles.text_WatershedDelineationTrack,'String','Status Tracking: Indentifying Flow Direction')


FlowDirection([outdir,'/'])
pause(1) % Wait for a second to write python script
eval(['!',handles.pythonexedir,'\python.exe ',outdir,'\FlowDirection_temp.py'])
delete([outdir,'/FlowDirection_temp.py']) % remove the temporary python script
set(handles.text_status_stepbar2,'BackgroundColor','r')
set(handles.text_WatershedDelineationTrack,'String','Status Tracking: Calculating Flow Accumulation')


FlowAccumulation([outdir,'/'])
pause(1) % Wait for a second to write python script
eval(['!',handles.pythonexedir,'\python.exe ',outdir,'\FlowAccumulation_temp.py'])
delete([outdir,'/FlowAccumulation_temp.py']) % remove the temporary python script
set(handles.text_status_stepbar3,'BackgroundColor','r')
set(handles.text_WatershedDelineationTrack,'String','Status Tracking: Identifying Stream Line')


% Stream Line process
flowacc_ascii = importdata([outdir,'/flowaccascii.txt'],' ',6);
flowacc_data = flowacc_ascii.data;
stream_threshold = str2double(get(handles.edit_streamthreshold,'String'))/100;
threshold = max(flowacc_data(:)) * stream_threshold;
flowacc_data(flowacc_data<threshold) = 0;

flowacc_text = flowacc_ascii.textdata;

ncols = sscanf(flowacc_text{1},'%*s %d');
nrows = sscanf(flowacc_text{2},'%*s %d');

stream_grid = repmat(sscanf(flowacc_text{6},'%*s %d'),nrows,ncols);
stream_grid(flowacc_data > 0) = 1;

format_str = ['%d',repmat(' %d',1,ncols-1),'\n'];

fid = fopen([outdir,'/streamlineascii.txt'],'w');
for i = 1:6
    fprintf(fid,'%s\n',flowacc_text{i});
end
fprintf(fid,format_str,stream_grid');
fclose(fid);

Streamline([outdir,'/'])
pause(1)
eval(['!',handles.pythonexedir,'\python.exe ',outdir,'\Streamline_temp.py'])
delete([outdir,'/Streamline_temp.py']) % remove the temporary python script
set(handles.text_status_stepbar4,'BackgroundColor','r')
set(handles.text_WatershedDelineationTrack,'String','Status Tracking: Defining Snap Pour Point')


% Defining Snap Points
iscomplete = sum(~cellfun('isempty',latlon),2) == 3;
for i = 1:length(iscomplete)
    
    if iscomplete(i)
        
        % Test file for a point
        fid = fopen([outdir,'/latlon_temp.txt'],'w');
        fprintf(fid,'%s, %s, %s\n','ID','Lat','Lon');
        if isnumeric(latlon{i,1})
            fprintf(fid,'%s, %f, %f\n',num2str(latlon{i,1}),latlon{i,2},latlon{i,3});
        else
            fprintf(fid,'%s, %f, %f\n',latlon{i,1},latlon{i,2},latlon{i,3});
        end
        fclose(fid);
        
        % Define Snap point
        interval = (0.001:0.001:0.05);
        for j = 1:length(interval)
            
            if isnumeric(latlon{i,1})
                SNAPPOINTprocess([outdir,'/latlon_temp.txt'],[outdir,'/'],interval(j),num2str(latlon{i,1}),num2str(i))
            else
                SNAPPOINTprocess([outdir,'/latlon_temp.txt'],[outdir,'/'],interval(j),latlon{i,1},num2str(i))
            end
            
            pause(1)
            eval(['!',handles.pythonexedir,'\python.exe ',outdir,'\SNAPPOINTprocess_temp.py'])
            
            snap_ascii = importdata([outdir,'/SnapPointAscii.txt'],' ',6);
            snap_ascii = snap_ascii.data;
            snap_ascii(snap_ascii==-9999) = 0;
            
            if sum(sum(flowacc_data&snap_ascii)); break; end
        end       

    end
    
end
set(handles.text_status_stepbar5,'BackgroundColor','r')
set(handles.text_WatershedDelineationTrack,'String','Status Tracking: Delineating Watershed Boundary')


% Watershed Delineation for each snap point
for i = 1:length(iscomplete)
    
    if iscomplete(i)
              
        % Watershed Delineation
        if isnumeric(latlon{i,1})
            Delineation([outdir,'/'],num2str(latlon{i,1}),num2str(i))
        else
            Delineation([outdir,'/'],latlon{i,1},num2str(i))
        end
        pause(1)
        eval(['!',handles.pythonexedir,'\python.exe ',outdir,'\Delineation_temp.py'])

    end
    
end

tElapsed = toc;
set(handles.text_status_stepbar6,'BackgroundColor','r')
set(handles.text_WatershedDelineationTrack,'String',['DONE!!! (Total Elapsed Time: ',num2str(tElapsed/60,'%2.1f'),' min)'])


delete([outdir,'/SNAPPOINTprocess_temp.py'])
delete([outdir,'/Delineation_temp.py'])


% Update fields in WatershedView
if ~iscell(get(handles.popupmenu_watershedview_watershedlist,'String'))
    set(handles.popupmenu_watershedview_watershedlist,'String',{get(handles.popupmenu_watershedview_watershedlist,'String');'ALL'})
end
if ~iscell(get(handles.popupmenu_watershedview_outletlist,'String'))
    set(handles.popupmenu_watershedview_outletlist,'String',{get(handles.popupmenu_watershedview_outletlist,'String');'ALL'})
end

for i = 1:length(iscomplete)
    if iscomplete(i)
        set(handles.popupmenu_watershedview_watershedlist,'String',[get(handles.popupmenu_watershedview_watershedlist,'String');[outdir,'/basinpoly_',num2str(latlon{i,1}),'.shp']])
        set(handles.popupmenu_watershedview_outletlist,'String',[get(handles.popupmenu_watershedview_outletlist,'String');[outdir,'/basinoutlet_',num2str(latlon{i,1}),'.shp']])
    end
end
set(handles.popupmenu_watershedview_watershedlist,'Enable','on')
set(handles.popupmenu_watershedview_outletlist,'Enable','on')
set(handles.checkbox_Stream,'Enable','on')
set(handles.popupmenu_watershedview_climategridlist,'Enable','on')


% Clean Up
delete([outdir,'/flowaccascii*'])
delete([outdir,'/streamlineascii*'])
delete([outdir,'/snappointascii*'])
delete([outdir,'/latlon_temp.txt'])
delete([outdir,'/basinpoly_temp*'])

delete([outdir,'/schema.ini'])
delete([outdir,'/log'])

delete([outdir,'/*.cpg'])

delete([outdir,'/streamras/*'])
rmdir([outdir,'/streamras'])
delete([outdir,'/streamras*'])


snappoint_folder = ls([outdir,'/snappoint*']);
for i = 1:size(snappoint_folder,1)
    delete([outdir,'/',deblank(snappoint_folder(i,:)),'/*'])
end
delete([outdir,'/snappoint*'])
rmdir([outdir,'/snappoint*'])

delete([outdir,'/watershedras/*'])
rmdir([outdir,'/watershedras'])

delete([outdir,'/flowacc/*'])
rmdir([outdir,'/flowacc'])
delete([outdir,'/info/*'])
rmdir([outdir,'/info'])

delete([outdir,'/filldem/*'])
rmdir([outdir,'/filldem'])
delete([outdir,'/flowdir/*'])
rmdir([outdir,'/flowdir'])
delete([outdir,'/flowdir_basin/*'])
rmdir([outdir,'/flowdir_basin'])

clc

guidata(hObject, handles);


%%%%%%%%%%%%%%%%%%%% PYTHON SCRIPT GNERATION FUNCTIONS %%%%%%%%%%%%%%%%%%%%
function FillDEM(DEM_INPUT, OUTPUT_DIR)
% This function is only for creating python script which processes DEM data
% to generate flow direction and accumulation

fid = fopen([OUTPUT_DIR,'\FillDEM_temp.py'],'w');

% OPENNING
fprintf(fid,'import arcpy\n');
fprintf(fid,'arcpy.CheckOutExtension("spatial")\n');
fprintf(fid,'arcpy.env.overwriteOutput = True\n');

% GIS FUNCTIONS
% Process: Fill
fprintf(fid,'arcpy.gp.Fill_sa("%s", "%s"+"filldem", "")\n',DEM_INPUT, OUTPUT_DIR);

fclose(fid);

function FlowDirection(OUTPUT_DIR)
% This function is only for creating python script which processes DEM data
% to generate flow direction and accumulation

fid = fopen([OUTPUT_DIR,'\FlowDirection_temp.py'],'w');

% OPENNING
fprintf(fid,'import arcpy\n');
fprintf(fid,'arcpy.CheckOutExtension("spatial")\n');
fprintf(fid,'arcpy.env.overwriteOutput = True\n');

% GIS FUNCTIONS
% Process: Flow Direction
fprintf(fid,'arcpy.gp.FlowDirection_sa("%s"+"filldem", "%s"+"flowdir", "NORMAL", "")\n', OUTPUT_DIR, OUTPUT_DIR);

fclose(fid);


function FlowAccumulation(OUTPUT_DIR)
% This function is only for creating python script which processes DEM data
% to generate flow direction and accumulation

fid = fopen([OUTPUT_DIR,'FlowAccumulation_temp.py'],'w');

% OPENNING
fprintf(fid,'import arcpy\n');
fprintf(fid,'arcpy.CheckOutExtension("spatial")\n');
fprintf(fid,'arcpy.env.overwriteOutput = True\n');

% GIS FUNCTIONS
% Process: Flow Accumulation
fprintf(fid,'arcpy.gp.FlowAccumulation_sa("%s"+"flowdir", "%s"+"flowacc", "", "INTEGER")\n', OUTPUT_DIR,  OUTPUT_DIR);
% Process: Raster to Ascii
fprintf(fid,'arcpy.RasterToASCII_conversion("%s"+"flowacc", "%s"+"flowaccascii.txt")\n', OUTPUT_DIR, OUTPUT_DIR);

fclose(fid);


function Streamline(OUTPUT_DIR)
% This function is only for creating python script which generates
% stream line shape file

fid = fopen([OUTPUT_DIR,'Streamline_temp.py'],'w');

% OPENNING
fprintf(fid,'import arcpy\n');
fprintf(fid,'arcpy.CheckOutExtension("spatial")\n');
fprintf(fid,'arcpy.env.overwriteOutput = True\n');

% GIS FUNCTIONS
% Process: ASCII to Raster
fprintf(fid,'arcpy.ASCIIToRaster_conversion("%s"+"streamlineascii.txt", "%s"+"streamras", "INTEGER")\n',OUTPUT_DIR,OUTPUT_DIR);
% Process: Stream to Feature
fprintf(fid,'arcpy.sa.StreamToFeature("%s"+"streamras", "%s"+"flowdir", "%s"+"stream", "NO_SIMPLIFY")\n', OUTPUT_DIR, OUTPUT_DIR,OUTPUT_DIR);

fclose(fid);


function SNAPPOINTprocess(LatLon_INPUT,OUTPUT_DIR,Distance,ID,Number)
% This function is only for creating python script which generates a snap
% point

fid = fopen([OUTPUT_DIR,'SNAPPOINTprocess_temp.py'],'w');

% OPENNING
fprintf(fid,'import arcpy\n');
fprintf(fid,'arcpy.CheckOutExtension("spatial")\n');
fprintf(fid,'arcpy.env.overwriteOutput = True\n');

% GIS FUNCTIONS
% Process: Make XY Event Layer
fprintf(fid,'arcpy.MakeXYEventLayer_management("%s", "Lon", "Lat", "latlon_layer", "", "")\n',LatLon_INPUT);
% Process: Snap Pour Point
fprintf(fid,'arcpy.gp.SnapPourPoint_sa("latlon_layer", "%s"+"flowacc", "%s"+"SnapPoint"+"%s", "%s", "Lat")\n', OUTPUT_DIR, OUTPUT_DIR, Number, num2str(Distance));
% Process: Raster to Ascii
fprintf(fid,'arcpy.RasterToASCII_conversion("%s"+"SnapPoint"+"%s", "%s"+"SnapPointAscii.txt")\n', OUTPUT_DIR, Number, OUTPUT_DIR);
% Process: Raster to Point
fprintf(fid,'arcpy.RasterToPoint_conversion("%s"+"SnapPoint"+"%s", "%s"+"BasinOutlet_"+"%s","VALUE")\n', OUTPUT_DIR, Number, OUTPUT_DIR,ID);

fclose(fid);


function Delineation(OUTPUT_DIR,ID,Number)
% This function is only for creating python script which generates
% watershed boundary polygon

fid = fopen([OUTPUT_DIR,'Delineation_temp.py'],'w');

% OPENNING
fprintf(fid,'import arcpy\n');
fprintf(fid,'arcpy.CheckOutExtension("spatial")\n');
fprintf(fid,'arcpy.env.overwriteOutput = True\n');

% GIS FUNCTIONS
% Process: Watershed
fprintf(fid,'arcpy.gp.Watershed_sa("%s"+"flowdir", "%s"+"SnapPoint"+"%s", "%s"+"WatershedRas", "Value")\n',OUTPUT_DIR,OUTPUT_DIR, Number,OUTPUT_DIR);
% Process: Raster to Polygon
fprintf(fid,'arcpy.RasterToPolygon_conversion("%s"+"WatershedRas", "%s"+"BasinPoly_Temp", "NO_SIMPLIFY", "VALUE")\n', OUTPUT_DIR, OUTPUT_DIR);
% Process: Dissolve
fprintf(fid,'arcpy.Dissolve_management("%s"+"BasinPoly_Temp.shp", "%s"+"BasinPoly_"+"%s", "GRIDCODE", "", "MULTI_PART", "DISSOLVE_LINES")\n', OUTPUT_DIR, OUTPUT_DIR, ID);
% Process: Extract by Mask
fprintf(fid,'arcpy.gp.ExtractByMask_sa("%s"+"flowdir", "%s"+"BasinPoly_"+"%s"+".shp", "%s"+"flowdir_basin")\n', OUTPUT_DIR, OUTPUT_DIR, ID, OUTPUT_DIR);
fprintf(fid,'arcpy.gp.ExtractByMask_sa("%s"+"filldem", "%s"+"BasinPoly_"+"%s"+".shp", "%s"+"dem_"+"%s"+".tif")\n', OUTPUT_DIR, OUTPUT_DIR, ID, OUTPUT_DIR, ID);
% Process: Flow Length
fprintf(fid,'arcpy.gp.FlowLength_sa("%s"+"flowdir_basin", "%s"+"flowlen_"+"%s"+".tif", "DOWNSTREAM","")\n', OUTPUT_DIR, OUTPUT_DIR, ID);

fclose(fid);


%%%%%%%%%%%%%%%%%%%%%%%%%   Import watershed   %%%%%%%%%%%%%%%%%%%%%%%%%%%% 
function radiobutton_WatershedDelineation_Import_Callback(hObject, eventdata, handles)

if get(hObject,'Value') %&& get(handles.radiobutton_WatershedDelineation_New,'Value')
    
    if strcmp(get(handles.togglebutton_WatershedImport,'String'),'Reset')
        set(handles.togglebutton_WatershedImport,'Value',1)
    end
    set(handles.togglebutton_WatershedImport,'Enable','on')
    
    set(handles.uipanel_ImportWatershed,'ForegroundColor','k','ShadowColor','k')
    set(handles.text_Boundary_Import,'ForegroundColor','k')
    set(handles.text_Outlet_Import,'ForegroundColor','k')
    set(handles.text_Stream_Import,'ForegroundColor','k')
    
    set(handles.edit_BoundaryFileDir,'Enable','on')
    set(handles.listbox_Boundary,'Enable','on')
    set(handles.edit_OutletFileDir,'Enable','on')
    set(handles.listbox_Outlet,'Enable','on')
    set(handles.edit_StreamFileDir,'Enable','on')

    if get(handles.togglebutton_WatershedImport,'Value') == 0
        set(handles.pushbutton_BoundaryOpen,'Enable','on')
        set(handles.pushbutton_BoundaryAdd,'Enable','on')
        set(handles.pushbutton_BoundaryRemove,'Enable','on')
        set(handles.pushbutton_OutletOpen,'Enable','on')
        set(handles.pushbutton_OutletAdd,'Enable','on')
        set(handles.pushbutton_OutletRemove,'Enable','on')
        set(handles.pushbutton_StreamOpen,'Enable','on')
    end
        
    
    set(handles.radiobutton_WatershedDelineation_New,'Value',0)
    set(handles.uipanel_NewWatershed,'ForegroundColor',[0.65 0.65 0.65],'ShadowColor',[0.7 0.7 0.7])
    set(handles.uipanel_DEM_NEW,'ForegroundColor',[0.65 0.65 0.65])
    set(handles.uipanel_OuteletCoordinate_New,'ForegroundColor',[0.65 0.65 0.65])
    set(handles.uipanel_OutputDirectory_New,'ForegroundColor',[0.65 0.65 0.65])
    set(handles.uipanel_streamdefinition,'ForegroundColor',[0.65 0.65 0.65])
    
    set(handles.edit_demfile,'Enable','off')
    set(handles.pushbutton_opendemfile,'Enable','off')
    set(handles.uitable_latlon,'Enable','off')
    set(handles.pushbutton_importtable,'Enable','off')
    set(handles.pushbutton_addrow,'Enable','off')
    set(handles.pushbutton_cleartable,'Enable','off')
    set(handles.edit_outputdir,'Enable','off')
    set(handles.pushbutton_outsearch,'Enable','off')
    set(handles.pushbutton_StartDelineation,'Enable','off')
    set(handles.edit_streamthreshold,'Enable','off')
    set(handles.pushbutton_streamdefinition_help,'Enable','off')
    
    set(handles.text_streamthreshold,'ForegroundColor',[0.65 0.65 0.65])
    set(handles.text_percent,'ForegroundColor',[0.65 0.65 0.65])
    
    if sum(get(handles.text_status_stepbar1,'BackgroundColor')-[1 0 0]) == 0
        set(handles.text_status_stepbar1,'BackgroundColor',[0.65 0.65 0.65])
        set(handles.text_status_stepbar2,'BackgroundColor',[0.65 0.65 0.65])
        set(handles.text_status_stepbar3,'BackgroundColor',[0.65 0.65 0.65])
        set(handles.text_status_stepbar4,'BackgroundColor',[0.65 0.65 0.65])
        set(handles.text_status_stepbar5,'BackgroundColor',[0.65 0.65 0.65])
        set(handles.text_status_stepbar6,'BackgroundColor',[0.65 0.65 0.65])
    end
    
end

if ~get(hObject,'Value') && ~get(handles.radiobutton_WatershedDelineation_Import,'Value')
    set(hObject,'Value',1)      
end

guidata(hObject, handles);



function pushbutton_BoundaryOpen_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*.shp'],'Watershed shape file');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.listbox_Boundary,'value',1)
    update_filedir = [handles.listbox_Boundary.String; {filedir}];
    set(handles.listbox_Boundary,'string',update_filedir)
    
    set(handles.listbox_Boundary, 'min', 0, 'max', 2);
    set(handles.listbox_Boundary,'Value',[]);
    
    handles.lastvisitdir = filepath;
end
guidata(hObject, handles);

function pushbutton_BoundaryAdd_Callback(hObject, eventdata, handles)
if ~isempty(handles.edit_BoundaryFileDir.String)
    set(handles.listbox_Boundary,'value',1)
    update_filedir = [handles.listbox_Boundary.String; {handles.edit_BoundaryFileDir.String}];
    set(handles.listbox_Boundary,'string',update_filedir)
    set(handles.edit_BoundaryFileDir,'string',[])
    
    set(handles.listbox_Boundary, 'min', 0, 'max', 2);
    set(handles.listbox_Boundary,'Value',[]);
end


function pushbutton_BoundaryRemove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_Boundary.Value)
    selind = handles.listbox_Boundary.Value;
    newstring = handles.listbox_Boundary.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_Boundary.String)
        if selind-1 == 0
            set(handles.listbox_Boundary,'value',[])
        else
            set(handles.listbox_Boundary,'value',selind-1)
        end
    end
    set(handles.listbox_Boundary,'string',newstring)
    
    set(handles.listbox_Boundary, 'min', 0, 'max', 2);
    set(handles.listbox_Boundary,'Value',[]);
end


function pushbutton_OutletOpen_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*.shp'],'Watershed outlet shape file');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.listbox_Outlet,'value',1)
    update_filedir = [handles.listbox_Outlet.String; {filedir}];
    set(handles.listbox_Outlet,'string',update_filedir) 
    
    set(handles.listbox_Outlet, 'min', 0, 'max', 2);
    set(handles.listbox_Outlet,'Value',[]);
    
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

function pushbutton_OutletAdd_Callback(hObject, eventdata, handles)
if ~isempty(handles.edit_OutletFileDir.String)
    set(handles.listbox_Outlet,'value',1)
    update_filedir = [handles.listbox_Outlet.String; {handles.edit_OutletFileDir.String}];
    set(handles.listbox_Outlet,'string',update_filedir)
    set(handles.edit_OutletFileDir,'string',[])
    
    set(handles.listbox_Outlet, 'min', 0, 'max', 2);
    set(handles.listbox_Outlet,'Value',[]);
end


function pushbutton_OutletRemove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_Outlet.Value)
    selind = handles.listbox_Outlet.Value;
    newstring = handles.listbox_Outlet.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_Outlet.String)
        if selind-1 == 0
            set(handles.listbox_Outlet,'value',[])
        else
            set(handles.listbox_Outlet,'value',selind-1)
        end
    end
    set(handles.listbox_Outlet,'string',newstring)
    
    set(handles.listbox_Outlet, 'min', 0, 'max', 2);
    set(handles.listbox_Outlet,'Value',[]);
end


function pushbutton_StreamOpen_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*.shp'],'Stream Raster File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_StreamFileDir,'string',filedir)
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

function togglebutton_WatershedImport_Callback(hObject, eventdata, handles)

if get(hObject,'Value') == 1
    
    boundary_list = get(handles.listbox_Boundary,'String');
    if ~isempty(boundary_list)
        if ~iscell(get(handles.popupmenu_watershedview_watershedlist,'String'))
            set(handles.popupmenu_watershedview_watershedlist,'String',{get(handles.popupmenu_watershedview_watershedlist,'String');'ALL'})
        end
        for i = 1:length(boundary_list)
            set(handles.popupmenu_watershedview_watershedlist,'String',[get(handles.popupmenu_watershedview_watershedlist,'String');boundary_list{i}])
        end
        set(handles.popupmenu_watershedview_watershedlist,'Enable','on')
    end
    
    outlet_list = get(handles.listbox_Outlet,'String');
    if ~isempty(outlet_list)
        if ~iscell(get(handles.popupmenu_watershedview_outletlist,'String'))
            set(handles.popupmenu_watershedview_outletlist,'String',{get(handles.popupmenu_watershedview_outletlist,'String');'ALL'})
        end
        for i = 1:length(outlet_list)
            set(handles.popupmenu_watershedview_outletlist,'String',[get(handles.popupmenu_watershedview_outletlist,'String');outlet_list{i}])
        end
        set(handles.popupmenu_watershedview_outletlist,'Enable','on')
    end
    
    if ~isempty(get(handles.edit_StreamFileDir,'String'))
        set(handles.checkbox_Stream,'Enable','on')
    elseif isempty(get(handles.edit_StreamFileDir,'String'))
        set(handles.checkbox_Stream,'Enable','off')
    end
    
    if ~isempty(boundary_list)
        set(handles.popupmenu_watershedview_climategridlist,'Enable','on')
    end

    
    if ~isempty(boundary_list) || ~isempty(outlet_list) || ~isempty(get(handles.edit_StreamFileDir,'String'))
        set(hObject,'String','Reset')
        
        set(handles.pushbutton_Watershed,'foregroundcolor','k')
        set(handles.uipanel_Watershed,'visible','on')
        
        set(handles.pushbutton_WatershedDelineation,'value',0)     
        set(handles.pushbutton_WatershedDelineation,'foregroundcolor',[0.65,0.65,0.65])
        set(handles.uipanel_WatershedDelineation,'visible','off')
        
        set(handles.pushbutton_BoundaryOpen,'Enable','off')
        set(handles.pushbutton_BoundaryAdd,'Enable','off')
        set(handles.pushbutton_BoundaryRemove,'Enable','off')
        set(handles.pushbutton_OutletOpen,'Enable','off')
        set(handles.pushbutton_OutletAdd,'Enable','off')
        set(handles.pushbutton_OutletRemove,'Enable','off')
        set(handles.pushbutton_StreamOpen,'Enable','off')
        
    end
    
    if isempty(boundary_list) && isempty(outlet_list) && isempty(get(handles.edit_StreamFileDir,'String'))
        set(hObject,'Value',0)
    end
    
else
    set(hObject,'String','Import')
    set(handles.popupmenu_watershedview_watershedlist,'Value',1)
    set(handles.popupmenu_watershedview_watershedlist,'String','none selected')
    set(handles.popupmenu_watershedview_watershedlist,'Enable','off')
    set(handles.popupmenu_watershedview_outletlist,'Value',1)
    set(handles.popupmenu_watershedview_outletlist,'String','none selected')
    set(handles.popupmenu_watershedview_outletlist,'Enable','off')
    set(handles.checkbox_Stream,'Value',0)
    set(handles.checkbox_Stream,'Enable','off')
    set(handles.popupmenu_watershedview_climategridlist,'Value',1)
    set(handles.popupmenu_watershedview_climategridlist,'Enable','off')
    set(handles.text_selectedgridnumber,'String','NaN','Visible','off')
    
    set(handles.pushbutton_BoundaryOpen,'Enable','on')
    set(handles.pushbutton_BoundaryAdd,'Enable','on')
    set(handles.pushbutton_BoundaryRemove,'Enable','on')
    set(handles.pushbutton_OutletOpen,'Enable','on')
    set(handles.pushbutton_OutletAdd,'Enable','on')
    set(handles.pushbutton_OutletRemove,'Enable','on')
    set(handles.pushbutton_StreamOpen,'Enable','on')
    
    set(handles.listbox_Boundary,'String','')
    set(handles.listbox_Outlet,'String','')
    set(handles.edit_StreamFileDir,'String','')
    
    set(handles.edit_demfile,'String','')
    set(handles.edit_outputdir,'String','')
    set(handles.uitable_latlon,'data',cell(1,3))
    set(handles.text_WatershedDelineationTrack,'String','Status Tracking: Not started yet ...')
    set(handles.text_status_stepbar1,'BackgroundColor',[0.941 0.941 0.941])
    set(handles.text_status_stepbar2,'BackgroundColor',[0.941 0.941 0.941])
    set(handles.text_status_stepbar3,'BackgroundColor',[0.941 0.941 0.941])
    set(handles.text_status_stepbar4,'BackgroundColor',[0.941 0.941 0.941])
    set(handles.text_status_stepbar5,'BackgroundColor',[0.941 0.941 0.941])
    set(handles.text_status_stepbar6,'BackgroundColor',[0.941 0.941 0.941])
    
   
    for i = 1:handles.basinboundary_handles_length
        eval(['delete(handles.basinboundary_handles.h',num2str(i),')'])
    end
    
    for i = 1:handles.outletpoint_handles_length
        eval(['delete(handles.outletpoint_handles.h',num2str(i),')'])
    end
    
    if handles.climategrid_exist
        delete(handles.climategrid_handles) 
    end
    
    if handles.streamline_exist == 1
        for i = 1:handles.streamline_handles_length
            eval(['delete(handles.streamline_handles.h',num2str(i),')'])
        end
        handles.streamline_exist = 0;
    end    

%     reset(handles.axes_watershedmap)   
    set(handles.axes_watershedmap,'xlim',[-180, 180])
    set(handles.axes_watershedmap,'ylim',[-90, 90])
    
end

guidata(hObject, handles);




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%                       Grid Climate Generation                 
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function radiobutton_DataList_CONUS2_Callback(hObject, eventdata, handles)
if get(hObject,'Value') && (handles.radiobutton_DataList_PGF2.Value == 1 || handles.radiobutton_DataList_UWGF.Value == 1 || handles.radiobutton_DataList_TMPA.Value == 1)
    
    set(handles.radiobutton_DataList_PGF2,'Value',0)
    set(handles.radiobutton_DataList_UWGF,'Value',0)
    set(handles.radiobutton_DataList_TMPA,'Value',0)
    
    set(handles.text_Description_CONUS,'Visible','on')
    set(handles.text_Description_PGF,'Visible','off')
    set(handles.text_Description_UWGF,'Visible','off')
    set(handles.text_Description_TMPA,'Visible','off')

    set(handles.listbox_MeteoVar,'String',{'prcp (mm)';['tas (',char(186),'C)'];['tmax (',char(186),'C)'];...
        ['tmin (',char(186),'C)'];'wind (m/s)'})
    set(handles.radiobutton_gridres_1_16,'Enable','on')
    set(handles.radiobutton_gridres_1_8,'Enable','on')
    set(handles.radiobutton_gridres_0_25,'Enable','off')
    set(handles.radiobutton_gridres_0_5,'Enable','off')
    set(handles.radiobutton_gridres_1,'Enable','off')
    set(handles.radiobutton_gridres_1_16,'Value',1)
    
    set(handles.listbox_MeteoVar_ext,'String',{'Year';'Month';'Day'})
    
elseif get(hObject,'Value')==0 && handles.radiobutton_DataList_PGF2.Value == 0 && handles.radiobutton_DataList_UWGF.Value == 0 && handles.radiobutton_DataList_TMPA.Value == 0
    set(hObject,'Value',1)
end

% yrmat = (1915:2011);
yrmat = (1950:2013);
yr_cell = cell(length(yrmat),1);
for i = 1:length(yrmat)
    yr_cell{i} = num2str(yrmat(i));
end
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};

set(handles.popupmenu_DataPeriod_syr,'String',yr_cell,'Value',1)
set(handles.popupmenu_DataPeriod_eyr,'String',yr_cell,'Value',length(yrmat))
set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',1)
set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',12)
set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:31),'Value',1)
set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:31),'Value',31)



function radiobutton_DataList_PGF2_Callback(hObject, eventdata, handles)
if get(hObject,'Value') && (handles.radiobutton_DataList_CONUS2.Value == 1 || handles.radiobutton_DataList_UWGF.Value == 1 || handles.radiobutton_DataList_TMPA.Value == 1)
    
    set(handles.radiobutton_DataList_CONUS2,'Value',0)
    set(handles.radiobutton_DataList_UWGF,'Value',0)
    set(handles.radiobutton_DataList_TMPA,'Value',0)
    
    set(handles.text_Description_PGF,'Visible','on')
    set(handles.text_Description_CONUS,'Visible','off')
    set(handles.text_Description_UWGF,'Visible','off')
    set(handles.text_Description_TMPA,'Visible','off')

    set(handles.listbox_MeteoVar,'String',{'prcp (mm)';['tas (',char(186),'C)'];['tmax (',char(186),'C)'];...
        ['tmin (',char(186),'C)'];'wind (m/s)';'<HTML>dlwrf (W/m<SUP>2</SUP>)</HTML>';'<HTML>dswrf (W/m<SUP>2</SUP>)</HTML>';'pres (kPa)';'shum (-)'})
    set(handles.radiobutton_gridres_1_16,'Enable','off')
    set(handles.radiobutton_gridres_1_8,'Enable','off')
    set(handles.radiobutton_gridres_0_25,'Enable','on')
    set(handles.radiobutton_gridres_0_5,'Enable','on')
    set(handles.radiobutton_gridres_1,'Enable','on')
    set(handles.radiobutton_gridres_0_25,'Value',1)
    
    set(handles.listbox_MeteoVar_ext,'String',{'Year';'Month';'Day'})
    
elseif get(hObject,'Value')==0 && handles.radiobutton_DataList_CONUS2.Value == 0 && handles.radiobutton_DataList_UWGF.Value == 0 && handles.radiobutton_DataList_TMPA.Value == 0
    set(hObject,'Value',1)   
end

yrmat = (1948:2010);
yr_cell = cell(length(yrmat),1);
for i = 1:length(yrmat)
    yr_cell{i} = num2str(yrmat(i));
end
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};

set(handles.popupmenu_DataPeriod_syr,'String',yr_cell,'Value',1)
set(handles.popupmenu_DataPeriod_eyr,'String',yr_cell,'Value',length(yrmat))
set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',1)
set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',12)
set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:31),'Value',1)
set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:31),'Value',31)



function radiobutton_DataList_UWGF_Callback(hObject, eventdata, handles)
if get(hObject,'Value') && (handles.radiobutton_DataList_PGF2.Value == 1 || handles.radiobutton_DataList_CONUS2.Value == 1 || handles.radiobutton_DataList_TMPA.Value == 1)
    
    set(handles.radiobutton_DataList_CONUS2,'Value',0)
    set(handles.radiobutton_DataList_PGF2,'Value',0)
    set(handles.radiobutton_DataList_TMPA,'Value',0)
    
    set(handles.text_Description_UWGF,'Visible','on')
    set(handles.text_Description_CONUS,'Visible','off')
    set(handles.text_Description_PGF,'Visible','off')
    set(handles.text_Description_TMPA,'Visible','off')

    set(handles.listbox_MeteoVar,'String',{'prcp (mm)';['tas (',char(186),'C)'];['tmax (',char(186),'C)'];...
        ['tmin (',char(186),'C)'];'wind (m/s)'})
    set(handles.radiobutton_gridres_1_16,'Enable','off')
    set(handles.radiobutton_gridres_1_8,'Enable','off')
    set(handles.radiobutton_gridres_0_25,'Enable','off')
    set(handles.radiobutton_gridres_0_5,'Enable','on')
    set(handles.radiobutton_gridres_1,'Enable','off')
    set(handles.radiobutton_gridres_0_5,'Value',1)
    
    set(handles.listbox_MeteoVar_ext,'String',{'Year';'Month';'Day'})
    
elseif get(hObject,'Value')==0 && handles.radiobutton_DataList_PGF2.Value == 0 && handles.radiobutton_DataList_CONUS2.Value == 0 && handles.radiobutton_DataList_TMPA.Value == 0
    set(hObject,'Value',1)
end

yrmat = (1948:2007);
yr_cell = cell(length(yrmat),1);
for i = 1:length(yrmat)
    yr_cell{i} = num2str(yrmat(i));
end
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};

set(handles.popupmenu_DataPeriod_syr,'String',yr_cell,'Value',1)
set(handles.popupmenu_DataPeriod_eyr,'String',yr_cell,'Value',length(yrmat))
set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',1)
set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10'},'Value',10)
set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:31),'Value',1)
set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:31),'Value',31)


% --- Executes on button press in radiobutton_DataList_TMPA.
function radiobutton_DataList_TMPA_Callback(hObject, eventdata, handles)
if get(hObject,'Value') && (handles.radiobutton_DataList_PGF2.Value == 1 || handles.radiobutton_DataList_CONUS2.Value == 1 || handles.radiobutton_DataList_UWGF.Value == 1)
    
    set(handles.radiobutton_DataList_CONUS2,'Value',0)
    set(handles.radiobutton_DataList_PGF2,'Value',0)
    set(handles.radiobutton_DataList_UWGF,'Value',0)
    
    set(handles.text_Description_TMPA,'Visible','on')
    set(handles.text_Description_CONUS,'Visible','off')
    set(handles.text_Description_PGF,'Visible','off')
    set(handles.text_Description_UWGF,'Visible','off')

    set(handles.listbox_MeteoVar,'String',{'prcp (mm)'})
    set(handles.radiobutton_gridres_1_16,'Enable','off')
    set(handles.radiobutton_gridres_1_8,'Enable','off')
    set(handles.radiobutton_gridres_0_25,'Enable','on')
    set(handles.radiobutton_gridres_0_5,'Enable','off')
    set(handles.radiobutton_gridres_1,'Enable','off')
    set(handles.radiobutton_gridres_0_25,'Value',1)
    
    set(handles.listbox_MeteoVar_ext,'String',{'Year';'Month';'Day'})
 
    
elseif get(hObject,'Value')==0 && handles.radiobutton_DataList_PGF2.Value == 0 && handles.radiobutton_DataList_CONUS2.Value == 0 && handles.radiobutton_DataList_UWGF.Value == 0
    set(hObject,'Value',1)
end

yrmat = (1998:2015);
yr_cell = cell(length(yrmat),1);
for i = 1:length(yrmat)
    yr_cell{i} = num2str(yrmat(i));
end
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};

set(handles.popupmenu_DataPeriod_syr,'String',yr_cell,'Value',1)
set(handles.popupmenu_DataPeriod_eyr,'String',yr_cell,'Value',length(yrmat))
set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',1)
set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',12)
set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:31),'Value',1)
set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:31),'Value',31)



% --- Executes on selection change in popupmenu_DataPeriod_syr.
function popupmenu_DataPeriod_syr_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(hObject,'String'));
selyr    = str2double(contents_yr{get(hObject,'Value')});
contents_mon = cellstr(get(handles.popupmenu_DataPeriod_smon,'String'));
selmon   = str2double(contents_mon{get(handles.popupmenu_DataPeriod_smon,'Value')});
if handles.radiobutton_DataList_UWGF.Value
    if selyr == 2007
        if selmon>10
            set(handles.popupmenu_DataPeriod_smon,'Value',10)
        end
        set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10'})
    else
        set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'})
    end
end
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_DataPeriod_sday.Value,eomday(selyr,selmon));
set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)


% --- Executes on selection change in popupmenu_DataPeriod_smon.
function popupmenu_DataPeriod_smon_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(handles.popupmenu_DataPeriod_syr,'String'));
selyr    = str2double(contents_yr{get(handles.popupmenu_DataPeriod_syr,'Value')});
contents_mon = cellstr(get(hObject,'String'));
selmon   = str2double(contents_mon{get(hObject,'Value')});
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_DataPeriod_sday.Value,eomday(selyr,selmon));
set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)



% --- Executes on selection change in popupmenu_DataPeriod_eyr.
function popupmenu_DataPeriod_eyr_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(hObject,'String'));
selyr    = str2double(contents_yr{get(hObject,'Value')});
contents_mon = cellstr(get(handles.popupmenu_DataPeriod_emon,'String'));
selmon   = str2double(contents_mon{get(handles.popupmenu_DataPeriod_emon,'Value')});
if handles.radiobutton_DataList_UWGF.Value
    if selyr == 2007
        if selmon>10
            set(handles.popupmenu_DataPeriod_emon,'Value',10)
        end
        set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10'})
    else
        set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'})
    end
end
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_DataPeriod_eday.Value,eomday(selyr,selmon));
set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)


% --- Executes on selection change in popupmenu_DataPeriod_emon.
function popupmenu_DataPeriod_emon_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(handles.popupmenu_DataPeriod_eyr,'String'));
selyr    = str2double(contents_yr{get(handles.popupmenu_DataPeriod_eyr,'Value')});
contents_mon = cellstr(get(hObject,'String'));
selmon   = str2double(contents_mon{get(hObject,'Value')});
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_DataPeriod_eday.Value,eomday(selyr,selmon));
set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)



function pushbutton_GridClimateGen_WatershedPoly_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*.shp'],'Watershed shape file');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.listbox_GridClimateGen_WatershedPoly,'value',1)
    update_filedir = [handles.listbox_GridClimateGen_WatershedPoly.String; {filedir}];
    set(handles.listbox_GridClimateGen_WatershedPoly,'string',update_filedir)   
    
    set(handles.listbox_GridClimateGen_WatershedPoly, 'min', 0, 'max', 2);
    set(handles.listbox_GridClimateGen_WatershedPoly,'Value',[]);
    
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);


function pushbutton_GridClimateGen_WatershedPoly_add_Callback(hObject, eventdata, handles)
if ~isempty(handles.edit_GridClimateGen_WatershedPoly.String)
    set(handles.listbox_GridClimateGen_WatershedPoly,'value',1)
    update_filedir = [handles.listbox_GridClimateGen_WatershedPoly.String; {handles.edit_GridClimateGen_WatershedPoly.String}];
    set(handles.listbox_GridClimateGen_WatershedPoly,'string',update_filedir)
    set(handles.edit_GridClimateGen_WatershedPoly,'string',[])
    
    set(handles.listbox_GridClimateGen_WatershedPoly, 'min', 0, 'max', 2);
    set(handles.listbox_GridClimateGen_WatershedPoly,'Value',[]);
end


function pushbutton_GridClimateGen_WatershedPoly_remove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_GridClimateGen_WatershedPoly.Value)
    selind = handles.listbox_GridClimateGen_WatershedPoly.Value;
    newstring = handles.listbox_GridClimateGen_WatershedPoly.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_GridClimateGen_WatershedPoly.String)
        if selind-1 == 0
            set(handles.listbox_GridClimateGen_WatershedPoly,'value',[])
        else
            set(handles.listbox_GridClimateGen_WatershedPoly,'value',selind-1)
        end
    end
    set(handles.listbox_GridClimateGen_WatershedPoly,'string',newstring)
    
    set(handles.listbox_GridClimateGen_WatershedPoly, 'min', 0, 'max', 2);
    set(handles.listbox_GridClimateGen_WatershedPoly,'Value',[]);
end


function pushbutton_GridClimateGen_Output_search_Callback(hObject, eventdata, handles)
filedir = uigetdir(handles.lastvisitdir,'Gridded Climate Output Directory');
if ischar(filedir)
    set(handles.listbox_GridClimateGen_Output,'value',1)
    update_filedir = [handles.listbox_GridClimateGen_Output.String; {filedir}];
    set(handles.listbox_GridClimateGen_Output,'string',update_filedir) 
    
    set(handles.listbox_GridClimateGen_Output, 'min', 0, 'max', 2);
    set(handles.listbox_GridClimateGen_Output,'Value',[]);
    
    handles.lastvisitdir = filedir;
end
guidata(hObject,handles);

function pushbutton_GridClimateGen_Output_add_Callback(hObject, eventdata, handles)
if ~isempty(handles.edit_GridClimateGen_Output.String)
    set(handles.listbox_GridClimateGen_Output,'value',1)
    update_filedir = [handles.listbox_GridClimateGen_Output.String; {handles.edit_GridClimateGen_Output.String}];
    set(handles.listbox_GridClimateGen_Output,'string',update_filedir)
    set(handles.edit_GridClimateGen_Output,'string',[])
    
    set(handles.listbox_GridClimateGen_Output, 'min', 0, 'max', 2);
    set(handles.listbox_GridClimateGen_Output,'Value',[]);
end


function pushbutton_GridClimateGen_Output_remove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_GridClimateGen_Output.Value)
    selind = handles.listbox_GridClimateGen_Output.Value;
    newstring = handles.listbox_GridClimateGen_Output.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_GridClimateGen_Output.String)
        if selind-1 == 0
            set(handles.listbox_GridClimateGen_Output,'value',[])
        else
            set(handles.listbox_GridClimateGen_Output,'value',selind-1)
        end
    end
    set(handles.listbox_GridClimateGen_Output,'string',newstring)
    
    set(handles.listbox_GridClimateGen_Output, 'min', 0, 'max', 2);
    set(handles.listbox_GridClimateGen_Output,'Value',[]);
end



function radiobutton_gridres_1_16_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
%     yrmat = (1915:2011);
    yrmat = (1950:2013);
    yr_cell = cell(length(yrmat),1);
    for i = 1:length(yrmat)
        yr_cell{i} = num2str(yrmat(i));
    end
    
    day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
    
    set(handles.popupmenu_DataPeriod_syr,'String',yr_cell,'Value',1)
    set(handles.popupmenu_DataPeriod_eyr,'String',yr_cell,'Value',length(yrmat))
    
    set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',1)
    set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',12)
    
    set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:31),'Value',1)
    set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:31),'Value',31)
end

function radiobutton_gridres_1_8_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
%     set(handles.popupmenu_DataPeriod_syr,'string','1949');set(handles.popupmenu_DataPeriod_smon,'string','1');set(handles.popupmenu_DataPeriod_sday,'string','1')
%     set(handles.popupmenu_DataPeriod_eyr,'string','2010');set(handles.popupmenu_DataPeriod_emon,'string','12');set(handles.popupmenu_DataPeriod_eday,'string','31')
    yrmat = (1949:2010);
    yr_cell = cell(length(yrmat),1);
    for i = 1:length(yrmat)
        yr_cell{i} = num2str(yrmat(i));
    end
    day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
    
    set(handles.popupmenu_DataPeriod_syr,'String',yr_cell,'Value',1)
    set(handles.popupmenu_DataPeriod_eyr,'String',yr_cell,'Value',length(yrmat))
    set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',1)
    set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',12)
    set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:31),'Value',1)
    set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:31),'Value',31)
end

function radiobutton_gridres_0_25_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
%     set(handles.popupmenu_DataPeriod_syr,'string','1948');set(handles.popupmenu_DataPeriod_smon,'string','1');set(handles.popupmenu_DataPeriod_sday,'string','1')
%     set(handles.popupmenu_DataPeriod_eyr,'string','2010');set(handles.popupmenu_DataPeriod_emon,'string','12');set(handles.popupmenu_DataPeriod_eday,'string','31')
    yrmat = (1948:2010);
    yr_cell = cell(length(yrmat),1);
    for i = 1:length(yrmat)
        yr_cell{i} = num2str(yrmat(i));
    end
    day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
    
    set(handles.popupmenu_DataPeriod_syr,'String',yr_cell,'Value',1)
    set(handles.popupmenu_DataPeriod_eyr,'String',yr_cell,'Value',length(yrmat))
    set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',1)
    set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',12)
    set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:31),'Value',1)
    set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:31),'Value',31)
end

function radiobutton_gridres_0_5_Callback(hObject, eventdata, handles)
if get(hObject,'Value') && get(handles.radiobutton_DataList_PGF2,'value')
%     set(handles.popupmenu_DataPeriod_syr,'string','1901');set(handles.popupmenu_DataPeriod_smon,'string','1');set(handles.popupmenu_DataPeriod_sday,'string','1')
%     set(handles.popupmenu_DataPeriod_eyr,'string','2012');set(handles.popupmenu_DataPeriod_emon,'string','12');set(handles.popupmenu_DataPeriod_eday,'string','31')
    yrmat = (1901:2012);
    yr_cell = cell(length(yrmat),1);
    for i = 1:length(yrmat)
        yr_cell{i} = num2str(yrmat(i));
    end
    day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
    
    set(handles.popupmenu_DataPeriod_syr,'String',yr_cell,'Value',1)
    set(handles.popupmenu_DataPeriod_eyr,'String',yr_cell,'Value',length(yrmat))
    set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',1)
    set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',12)
    set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:31),'Value',1)
    set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:31),'Value',31)
elseif get(hObject,'Value') && get(handles.radiobutton_DataList_UWGF,'value')
%     set(handles.popupmenu_DataPeriod_syr,'string','1948');set(handles.popupmenu_DataPeriod_smon,'string','1');set(handles.popupmenu_DataPeriod_sday,'string','1')
%     set(handles.popupmenu_DataPeriod_eyr,'string','2007');set(handles.popupmenu_DataPeriod_emon,'string','10');set(handles.popupmenu_DataPeriod_eday,'string','31')
    yrmat = (1948:2007);
    yr_cell = cell(length(yrmat),1);
    for i = 1:length(yrmat)
        yr_cell{i} = num2str(yrmat(i));
    end
    day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
    
    set(handles.popupmenu_DataPeriod_syr,'String',yr_cell,'Value',1)
    set(handles.popupmenu_DataPeriod_eyr,'String',yr_cell,'Value',length(yrmat))
    set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',1)
    set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10'},'Value',10)
    set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:31),'Value',1)
    set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:31),'Value',31)
end

function radiobutton_gridres_1_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
%     set(handles.popupmenu_DataPeriod_syr,'string','1948');set(handles.popupmenu_DataPeriod_smon,'string','1');set(handles.popupmenu_DataPeriod_sday,'string','1')
%     set(handles.popupmenu_DataPeriod_eyr,'string','2012');set(handles.popupmenu_DataPeriod_emon,'string','12');set(handles.popupmenu_DataPeriod_eday,'string','31')
    yrmat = (1948:2012);
    yr_cell = cell(length(yrmat),1);
    for i = 1:length(yrmat)
        yr_cell{i} = num2str(yrmat(i));
    end
    day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
    
    set(handles.popupmenu_DataPeriod_syr,'String',yr_cell,'Value',1)
    set(handles.popupmenu_DataPeriod_eyr,'String',yr_cell,'Value',length(yrmat))
    set(handles.popupmenu_DataPeriod_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',1)
    set(handles.popupmenu_DataPeriod_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',12)
    set(handles.popupmenu_DataPeriod_sday,'String',day_cell(1:31),'Value',1)
    set(handles.popupmenu_DataPeriod_eday,'String',day_cell(1:31),'Value',31)
end



% --- Executes on selection change in listbox_MeteoVar.
function listbox_MeteoVar_Callback(hObject, eventdata, handles)
set(handles.listbox_MeteoVar_ext, 'min', 0, 'max', 2);
set(handles.listbox_MeteoVar_ext,'Value',[]);


% --- Executes on selection change in listbox_MeteoVar_ext.
function listbox_MeteoVar_ext_Callback(hObject, eventdata, handles)
set(handles.listbox_MeteoVar, 'min', 0, 'max', 2);
set(handles.listbox_MeteoVar,'Value',[]);
handles.seletedrow2 = get(hObject,'Value');    
guidata(hObject, handles);


function pushbutton_Meteo_Var_move_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_MeteoVar.Value)

    selvar_ind = handles.listbox_MeteoVar.Value;
    selvar_str = handles.listbox_MeteoVar.String{selvar_ind};
    unit_str_ind = strfind(selvar_str,'(');
    set(handles.listbox_MeteoVar_ext,'String',[get(handles.listbox_MeteoVar_ext,'String');deblank(selvar_str(1:unit_str_ind-1))]);
    
    set(handles.listbox_MeteoVar, 'min', 0, 'max', 2);
    set(handles.listbox_MeteoVar,'Value',[]);
end


function pushbutton_Meteo_Var_remove_Callback(hObject, eventdata, handles)
if handles.seletedrow2 ~= 0
    set(handles.listbox_MeteoVar_ext, 'min', 0, 'max', 2);
    set(handles.listbox_MeteoVar_ext,'Value',[]);
    selrow_ind = handles.seletedrow2;
    old_str = handles.listbox_MeteoVar_ext.String;
    indmat = (1:length(old_str));
    update_str = old_str(indmat~=selrow_ind);
    set(handles.listbox_MeteoVar_ext,'String',update_str);
end
guidata(hObject, handles);


function pushbutton_Meteo_Var_move_all_Callback(hObject, eventdata, handles)
allstr = {'Year'; 'Month'; 'Day'};
varstr = handles.listbox_MeteoVar.String;

for i = 1:size(varstr,1)
    selvar_str = varstr{i};
    unit_str_ind = strfind(selvar_str,'(');
    set(handles.listbox_MeteoVar_ext,'String',[get(handles.listbox_MeteoVar_ext,'String');deblank(selvar_str(1:unit_str_ind-1))]);
    allstr = [allstr;deblank(selvar_str(1:unit_str_ind-1))];
end
set(handles.listbox_MeteoVar_ext,'String',allstr)
set(handles.listbox_MeteoVar, 'min', 0, 'max', 2);
set(handles.listbox_MeteoVar,'Value',[]);

handles.seletedrow2 = 0;    
guidata(hObject, handles);


function pushbutton_Meteo_Var_remove_all_Callback(hObject, eventdata, handles)
set(handles.listbox_MeteoVar_ext,'String',{})



function pushbutton_Meteo_Var_move_up_Callback(hObject, eventdata, handles)
if handles.seletedrow2 ~= 0  && handles.seletedrow2 ~= 1    
    oldstr = handles.listbox_MeteoVar_ext.String;
    upstr = oldstr{handles.seletedrow2-1};
    downstr = oldstr{handles.seletedrow2};
    oldstr{handles.seletedrow2-1} = downstr;
    oldstr{handles.seletedrow2} = upstr;
    set(handles.listbox_MeteoVar_ext,'String',oldstr)   
    set(handles.listbox_MeteoVar_ext,'Value',handles.seletedrow2-1); 
    handles.seletedrow2 = handles.seletedrow2-1;
end
guidata(hObject, handles);


function pushbutton_Meteo_Var_move_down_Callback(hObject, eventdata, handles)
numvar = length(handles.listbox_MeteoVar_ext.String);
if numvar > 0
    if handles.seletedrow2 ~= 0  && handles.seletedrow2 ~= numvar
        oldstr = handles.listbox_MeteoVar_ext.String;
        upstr = oldstr{handles.seletedrow2};
        downstr = oldstr{handles.seletedrow2+1};
        oldstr{handles.seletedrow2} = downstr;
        oldstr{handles.seletedrow2+1} = upstr;
        set(handles.listbox_MeteoVar_ext,'String',oldstr)
        set(handles.listbox_MeteoVar_ext,'Value',handles.seletedrow2+1);
        handles.seletedrow2 = handles.seletedrow2+1;
    end
end
guidata(hObject, handles);



function pushbutton_GridClimateGen_Output_Extract_Callback(hObject, eventdata, handles)
set(hObject,'String','Extracting')

% Where is the basin boundary shape file?
Watershed_polygon_all   = get(handles.listbox_GridClimateGen_WatershedPoly,'String');
num_basin               = length(get(handles.listbox_GridClimateGen_WatershedPoly,'String'));

% Output Directory
outputdir_all = get(handles.listbox_GridClimateGen_Output,'String');

% Date matrix based on the user defined period
contents_syr = cellstr(get(handles.popupmenu_DataPeriod_syr,'String'));
contents_smon = cellstr(get(handles.popupmenu_DataPeriod_smon,'String'));
contents_sday = cellstr(get(handles.popupmenu_DataPeriod_sday,'String'));
contents_eyr = cellstr(get(handles.popupmenu_DataPeriod_eyr,'String'));
contents_emon = cellstr(get(handles.popupmenu_DataPeriod_emon,'String'));
contents_eday = cellstr(get(handles.popupmenu_DataPeriod_eday,'String'));

syr     = str2double(contents_syr{get(handles.popupmenu_DataPeriod_syr,'Value')});
smon	= str2double(contents_smon{get(handles.popupmenu_DataPeriod_smon,'Value')});
sday    = str2double(contents_sday{get(handles.popupmenu_DataPeriod_sday,'Value')});
eyr     = str2double(contents_eyr{get(handles.popupmenu_DataPeriod_eyr,'Value')});
emon	= str2double(contents_emon{get(handles.popupmenu_DataPeriod_emon,'Value')});
eday    = str2double(contents_eday{get(handles.popupmenu_DataPeriod_eday,'Value')});
datemat_desired = datevec(datenum([syr smon sday]):datenum([eyr emon eday]));

selvar          = get(handles.listbox_MeteoVar_ext,'String');
selvar_valid    = cell(0);
for i = 1:length(selvar)
    if ~isempty(selvar{i})
        selvar_valid{i} = deblank(selvar{i});
    end
end

% User defined prefix for extracted climate forcing file
user_prefix = deblank(get(handles.edit_GridClimateGen_Output_prefix,'String'));

% Lat&Lon points for the selected climate forcing
if get(handles.radiobutton_gridres_1_16,'Value') && get(handles.radiobutton_DataList_CONUS2,'Value')
%     latmat = (23.59375:0.0625:51.71875);
%     lonmat = (-127.59375:0.0625:-61.96875);
%     halfgridsize = 0.0625/2;
%     forcing_dir_prefix = handles.climateforcing_dir_prefix.extCONUS;
%     selected_climateforcing = 'extCONUS';
%     datemat_extCONUS = datevec(datenum([1915 1 1]):datenum([2011 12 31]));
% elseif get(handles.radiobutton_gridres_1_16,'Value') && get(handles.radiobutton_DataList_CONUS2015,'Value')
%     latmat = (14.65625:0.0625:52.96875);
%     lonmat = (-124.96875:0.0625:-67.03125);
    latmat = (-89.96875:0.0625:89.96875);
    lonmat = (-179.96875:0.0625:179.96875);
    halfgridsize = 0.0625/2;
    forcing_dir_prefix = handles.climateforcing_dir_prefix.extCONUS2;
    selected_climateforcing = 'extCONUS2';
    datemat_extCONUS2 = datevec(datenum([1950 1 1]):datenum([2013 12 31]));    
elseif get(handles.radiobutton_gridres_1_8,'Value')
%     latmat = (24.0625:0.125:50.9375);
%     lonmat = (-126.5625:0.125:-61.9375);
    latmat = (-89.9375:0.125:89.9375);
    lonmat = (-179.9375:0.125:179.9375);
    halfgridsize = 0.125/2;
    forcing_dir_prefix = handles.climateforcing_dir_prefix.CONUS;
    selected_climateforcing = 'CONUS';
    datemat_CONUS = datevec(datenum([1949 1 1]):datenum([2010 12 31]));
elseif get(handles.radiobutton_gridres_0_25,'Value') && get(handles.radiobutton_DataList_PGF2,'Value')
    latmat = (-89.875:0.25:89.875);
    lonmat = (0.125:0.25:359.875);
    lonmat(lonmat>180) = lonmat(lonmat>180)-360;
    halfgridsize = 0.25/2;
    forcing_dir_prefix = handles.climateforcing_dir_prefix.PGF025;
    selected_climateforcing = 'PGF025';
    datemat_pgf025 = datevec(datenum([1948 1 1]):datenum([2010 12 31]));
elseif get(handles.radiobutton_gridres_0_5,'Value') && get(handles.radiobutton_DataList_PGF2,'Value')
    latmat = (-89.75:0.5:89.75);
    lonmat = (0.25:0.5:359.75);
    lonmat(lonmat>180) = lonmat(lonmat>180)-360;
    halfgridsize = 0.5/2;
    forcing_dir_prefix = handles.climateforcing_dir_prefix.PGF050;
    selected_climateforcing = 'PGF050';
    datemat_pgf050 = datevec(datenum([1901 1 1]):datenum([2012 12 31]));
elseif get(handles.radiobutton_gridres_1,'Value') && get(handles.radiobutton_DataList_PGF2,'Value')
    latmat = (-89.5:1:89.5);
    lonmat = (0.5:1:359.5);
    lonmat(lonmat>180) = lonmat(lonmat>180)-360;
    halfgridsize = 1.0/2;
    forcing_dir_prefix = handles.climateforcing_dir_prefix.PGF100;
    selected_climateforcing = 'PGF100';
    datemat_pgf100 = datevec(datenum([1948 1 1]):datenum([2012 12 31]));
elseif get(handles.radiobutton_gridres_0_5,'Value') && get(handles.radiobutton_DataList_UWGF,'Value')
    latmat = (-55.25:0.5:83.25);
    lonmat = (-179.75:0.5:179.75);
    halfgridsize = 0.5/2;
    forcing_dir_prefix = handles.climateforcing_dir_prefix.UWGF050;
    selected_climateforcing = 'UWGF050';
    datemat_uwgf050 = datevec(datenum([1948 1 1]):datenum([2007 10 31]));
elseif get(handles.radiobutton_DataList_TMPA,'Value')
    latmat = (-49.875:0.25:49.875);
    lonmat = (-179.875:0.25:179.875);
    halfgridsize = 0.25/2;
    selected_climateforcing = 'TMPA';
end


for nb = 1:num_basin
    
    Watershed_polygon   = Watershed_polygon_all{nb};
    outputdir          	= outputdir_all{nb};
    Watershed_polygon_nameind = strfind(Watershed_polygon,'\');
    Watershed_polygon_namestr_org = deblank(Watershed_polygon(Watershed_polygon_nameind(end)+1:end));
    Watershed_polygon_namestr = strrep(Watershed_polygon_namestr_org,'_','\_');
    
    watershed_shpinfo = shaperead(Watershed_polygon);
    
    % First trimming out grids for a retangular area covering the watershed
    latmat_trim = latmat(latmat>(watershed_shpinfo.BoundingBox(1,2)-halfgridsize) & latmat<(watershed_shpinfo.BoundingBox(2,2)+halfgridsize));
    lonmat_trim = lonmat(lonmat>(watershed_shpinfo.BoundingBox(1,1)-halfgridsize) & lonmat<(watershed_shpinfo.BoundingBox(2,1)+halfgridsize));
    
    % Second trimming out grids for the watershed boundary
    grid_lat  = [];
    grid_lon  = [];
    grid_area = [];
    for i = 1:length(latmat_trim)
        
        for j = 1:length(lonmat_trim)
            
            latlim = [latmat_trim(i)-halfgridsize,latmat_trim(i)+halfgridsize];
            lonlim = [lonmat_trim(j)-halfgridsize,lonmat_trim(j)+halfgridsize];
            
            [polylat,polylon] = maptrimp(watershed_shpinfo.Y, watershed_shpinfo.X, latlim, lonlim);
            
            if ~isempty(polylat)
                grid_lat  = [grid_lat; latmat_trim(i)];
                grid_lon  = [grid_lon; lonmat_trim(j)];
                grid_area = [grid_area; sum(areaint(polylat,polylon))];
            end
            
        end
        
    end
    grid_area = grid_area/sum(grid_area)*100;
    
    extracted_gridinfo = [grid_lat, grid_lon, grid_area];
    fid = fopen([outputdir,'\extracted_gridinfo',strrep(Watershed_polygon_namestr_org,'.shp',''),'.txt'],'w');
    fprintf(fid,'%s\t%s\t%s\n','lat','lon','area%');
    fprintf(fid,'%2.5f\t%2.5f\t%3.6f\n',extracted_gridinfo');
    fclose(fid);
    
    
    if ~handles.checkbox_parallelpool.Value

        set(handles.text_extract,'String','Close the status bar to stop')
        set(handles.text_extract,'Visible','on')
        
        switch selected_climateforcing
            
            case 'extCONUS'
                h = waitbar(0,'Please wait ...','Name',['Extracting CONUS 1/16',char(186)]);
                for i = 1:length(grid_lat)
                    
                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')]);
                        sind = find(datemat_extCONUS(:,1)==syr & datemat_extCONUS(:,2)==smon & datemat_extCONUS(:,3)==sday);
                        eind = find(datemat_extCONUS(:,1)==eyr & datemat_extCONUS(:,2)==emon & datemat_extCONUS(:,3)==eday);
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired(:,1);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired(:,2);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired(:,3);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = (grid_data(sind:eind,2)+grid_data(sind:eind,3))/2;
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                            
                        end
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                        if ishandle(h)
                            waitbar(i/length(grid_lat),h,[Watershed_polygon_namestr,': ',num2str(length(grid_lat)),' grids'])
                        else
                            set(hObject,'Value',0)
                            set(hObject,'String','Extract')
                            set(handles.text_extract,'Visible','off')
                            error('Program terminated per user''s request')
                        end
                        
                    end
                    
                end
                close(h)    
                
            case 'extCONUS2'
                h = waitbar(0,'Please wait ...','Name',['Extracting CONUS2 1/16',char(186)]);
                for i = 1:length(grid_lat)
                    
                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')]);
                        sind = find(datemat_extCONUS2(:,1)==syr & datemat_extCONUS2(:,2)==smon & datemat_extCONUS2(:,3)==sday);
                        eind = find(datemat_extCONUS2(:,1)==eyr & datemat_extCONUS2(:,2)==emon & datemat_extCONUS2(:,3)==eday);
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired(:,1);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired(:,2);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired(:,3);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = (grid_data(sind:eind,2)+grid_data(sind:eind,3))/2;
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                            
                        end
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                        if ishandle(h)
                            waitbar(i/length(grid_lat),h,[Watershed_polygon_namestr,': ',num2str(length(grid_lat)),' grids'])
                        else
                            set(hObject,'Value',0)
                            set(hObject,'String','Extract')
                            set(handles.text_extract,'Visible','off')
                            error('Program terminated per user''s request')
                        end
                        
                    end
                    
                end
                close(h)  
                               
            case 'CONUS'
                h = waitbar(0,'Please wait ...','Name',['Extracting CONUS 1/8',char(186)]);
                for i = 1:length(grid_lat)
                    
                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.4f'),'_',num2str(grid_lon(i),'%2.4f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.4f'),'_',num2str(grid_lon(i),'%2.4f')]);
                        sind = find(datemat_CONUS(:,1)==syr & datemat_CONUS(:,2)==smon & datemat_CONUS(:,3)==sday);
                        eind = find(datemat_CONUS(:,1)==eyr & datemat_CONUS(:,2)==emon & datemat_CONUS(:,3)==eday);
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired(:,1);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired(:,2);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired(:,3);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = (grid_data(sind:eind,5)+grid_data(sind:eind,6))/2;
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,5);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,6);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,7);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                        end
                        
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.4f'),'_',num2str(grid_lon(i),'%2.4f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                        if ishandle(h)
                            waitbar(i/length(grid_lat),h,[Watershed_polygon_namestr,': ',num2str(length(grid_lat)),' grids'])
                        else
                            set(hObject,'Value',0)
                            set(hObject,'String','Extract')
                            set(handles.text_extract,'Visible','off')
                            error('Program terminated per user''s request')
                        end
                        
                    end
                    
                end
                close(h)
                
            case 'PGF025'
                
                h = waitbar(0,'Please wait ...','Name',['Extracting PGF 0.25',char(186)]);
                for i = 1:length(grid_lat)
                    
                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.3f'),'_',num2str(grid_lon(i),'%2.3f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.3f'),'_',num2str(grid_lon(i),'%2.3f')]);
                        sind = find(datemat_pgf025(:,1)==syr & datemat_pgf025(:,2)==smon & datemat_pgf025(:,3)==sday);
                        eind = find(datemat_pgf025(:,1)==eyr & datemat_pgf025(:,2)==emon & datemat_pgf025(:,3)==eday);
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired(:,1);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired(:,2);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired(:,3);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = (grid_data(sind:eind,2)+grid_data(sind:eind,3))/2;
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dlwrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,5);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dswrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,6);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'shum'
                                    var_saved_tot(:,j) = grid_data(sind:eind,7);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'pres'
                                    var_saved_tot(:,j) = grid_data(sind:eind,8);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                            
                        end
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.3f'),'_',num2str(grid_lon(i),'%2.3f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                        if ishandle(h)
                            waitbar(i/length(grid_lat),h,[Watershed_polygon_namestr,': ',num2str(length(grid_lat)),' grids'])
                        else
                            set(hObject,'Value',0)
                            set(hObject,'String','Extract')
                            set(handles.text_extract,'Visible','off')
                            error('Program terminated per user''s request')
                        end
                        
                    end
                    
                end
                close(h)
                
            case 'PGF050'
                
                h = waitbar(0,'Please wait ...','Name',['Extracting PGF 0.50',char(186)]);
                for i = 1:length(grid_lat)
                    
                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')]);
                        sind = find(datemat_pgf050(:,1)==syr & datemat_pgf050(:,2)==smon & datemat_pgf050(:,3)==sday);
                        eind = find(datemat_pgf050(:,1)==eyr & datemat_pgf050(:,2)==emon & datemat_pgf050(:,3)==eday);                       
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired(:,1);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired(:,2);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired(:,3);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,5);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dlwrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,6);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dswrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,7);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'shum'
                                    var_saved_tot(:,j) = grid_data(sind:eind,8);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'pres'
                                    var_saved_tot(:,j) = grid_data(sind:eind,9);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                            
                        end
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                        if ishandle(h)
                            waitbar(i/length(grid_lat),h,[Watershed_polygon_namestr,': ',num2str(length(grid_lat)),' grids'])
                        else
                            set(hObject,'Value',0)
                            set(hObject,'String','Extract')
                            set(handles.text_extract,'Visible','off')
                            error('Program terminated per user''s request')
                        end
                        
                    end
                    
                end
                close(h)
                
            case 'PGF100'
                               
                h = waitbar(0,'Please wait ...','Name',['Extracting PGF 1.0',char(186)]);
                for i = 1:length(grid_lat)
                    
                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.1f'),'_',num2str(grid_lon(i),'%2.1f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.1f'),'_',num2str(grid_lon(i),'%2.1f')]);
                        sind = find(datemat_pgf100(:,1)==syr & datemat_pgf100(:,2)==smon & datemat_pgf100(:,3)==sday);
                        eind = find(datemat_pgf100(:,1)==eyr & datemat_pgf100(:,2)==emon & datemat_pgf100(:,3)==eday);                                             
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired(:,1);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired(:,2);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired(:,3);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,5);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dlwrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,6);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dswrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,7);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'shum'
                                    var_saved_tot(:,j) = grid_data(sind:eind,8);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'pres'
                                    var_saved_tot(:,j) = grid_data(sind:eind,9);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                            
                        end
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.1f'),'_',num2str(grid_lon(i),'%2.1f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                        if ishandle(h)
                            waitbar(i/length(grid_lat),h,[Watershed_polygon_namestr,': ',num2str(length(grid_lat)),' grids'])
                        else
                            set(hObject,'Value',0)
                            set(hObject,'String','Extract')
                            set(handles.text_extract,'Visible','off')
                            error('Program terminated per user''s request')
                        end
                        
                    end
                    
                end
                close(h)
                
            case 'UWGF050'
                
                h = waitbar(0,'Please wait ...','Name',['Extracting UWFG 0.5',char(186)]);
                for i = 1:length(grid_lat)
                    
                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')]);
                        sind = find(datemat_uwgf050(:,1)==syr & datemat_uwgf050(:,2)==smon & datemat_uwgf050(:,3)==sday);
                        eind = find(datemat_uwgf050(:,1)==eyr & datemat_uwgf050(:,2)==emon & datemat_uwgf050(:,3)==eday);
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired(:,1);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired(:,2);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired(:,3);
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = (grid_data(sind:eind,2)+grid_data(sind:eind,3))/2;
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                        end
                        
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                        if ishandle(h)
                            waitbar(i/length(grid_lat),h,[Watershed_polygon_namestr,': ',num2str(length(grid_lat)),' grids'])
                        else
                            set(hObject,'Value',0)
                            set(hObject,'String','Extract')
                            set(handles.text_extract,'Visible','off')
                            error('Program terminated per user''s request')
                        end
                        
                    end
                    
                end
                close(h)
                
            case 'TMPA'
                
                s_yr = syr;  % Extraction first year
                e_yr = eyr;  % Extraction last year
                datemat = datevec(datenum([s_yr 1 1]):datenum([e_yr 12 31]));
                datemat = datemat(:,1:3);
                
                pr_data = nan(size(datemat,1),length(grid_lat));
                if ismember('prcp',selvar_valid)
                    h = waitbar(0,'Please wait ...','Name','Extracting TRMM grid data');
                    for k = 1:size(datemat,1)
                        
                        if datemat(k,2) < 10
                            monstr = ['0' num2str(datemat(k,2))];
                        else
                            monstr = num2str(datemat(k,2));
                        end
                        
                        if datemat(k,3) < 10
                            daystr = ['0' num2str(datemat(k,3))];
                        else
                            daystr = num2str(datemat(k,3));
                        end
                        
                        for i = 1:length(grid_lat)
                            
                            row_ind = find(latmat == grid_lat(i));
                            col_ind = find(lonmat == grid_lon(i));
                            
                            pr = ncread(['./meteo/TMPA/3B42V7_nc4/',num2str(datemat(k,1)),'/3B42_daily.',num2str(datemat(k,1)),monstr,daystr,'.7.nc4'],'precipitation',[row_ind, col_ind],[1,1]);
                            
                            pr_data(k,i) = pr;
                            
                        end
                        
%                         h = waitbar(k/size(datemat,1));
                        
                        if ishandle(h)
                            waitbar(k/size(datemat,1),h,[Watershed_polygon_namestr,': ',num2str(length(grid_lat)),' grids'])
                        else
                            set(hObject,'Value',0)
                            set(hObject,'String','Extract')
                            set(handles.text_extract,'Visible','off')
                            error('Program terminated per user''s request')
                        end
                        
                    end
                    close(h)
                    
                end
                
                sind = find(datemat(:,1)==syr & datemat(:,2)==smon & datemat(:,3)==sday);
                eind = find(datemat(:,1)==eyr & datemat(:,2)==emon & datemat(:,3)==eday);
                var_saved_format = [];
                for j = 1:length(selvar_valid)
                    var_saved = selvar_valid{j};
                    switch var_saved
                        case 'Year'
                            var_saved_format = [var_saved_format,'%1.0f\t'];
                        case 'Month'
                            var_saved_format = [var_saved_format,'%1.0f\t'];
                        case 'Day'
                            var_saved_format = [var_saved_format,'%1.0f\t'];
                        case 'prcp'
                            var_saved_format = [var_saved_format,'%1.2f\t'];
                    end
                end
                
                for i = 1:length(grid_lat)
                    var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                    for j = 1:length(selvar_valid)
                        var_saved = selvar_valid{j};
                        switch var_saved
                            case 'Year'
                                var_saved_tot(:,j) = datemat_desired(:,1);
                            case 'Month'
                                var_saved_tot(:,j) = datemat_desired(:,2);
                            case 'Day'
                                var_saved_tot(:,j) = datemat_desired(:,3);
                            case 'prcp'
                                var_saved_tot(:,j) = pr_data(sind:eind,i);
                        end
                    end
                    
                    fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.3f'),'_',num2str(grid_lon(i),'%2.3f')],'w');
                    fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                    fclose(fid);
                    
                end
                
                                  
        end
        
    else % Extract Data in a parallel pool
        
        gcp; 
        set(handles.text_extract,'String',['Extracting ',num2str(length(grid_lat)),' grids for ',Watershed_polygon_namestr_org])
        set(handles.text_extract,'Visible','on')
        pause(0.5)
        
        datemat_desired_yr      = datemat_desired(:,1);
        datemat_desired_mon     = datemat_desired(:,2);
        datemat_desired_day     = datemat_desired(:,3);
        
        switch selected_climateforcing
            
            case 'extCONUS'
                
                datemat_extCONUS_yr     = datemat_extCONUS(:,1); 
                datemat_extCONUS_mon    = datemat_extCONUS(:,2);
                datemat_extCONUS_day    = datemat_extCONUS(:,3);

                parfor i = 1:length(grid_lat)
                    
                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')]);
                        sind = find(datemat_extCONUS_yr==syr & datemat_extCONUS_mon==smon & datemat_extCONUS_day==sday);
                        eind = find(datemat_extCONUS_yr==eyr & datemat_extCONUS_mon==emon & datemat_extCONUS_day==eday);
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired_yr;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired_mon;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired_day;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = (grid_data(sind:eind,2)+grid_data(sind:eind,3))/2;
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                            
                        end
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                    end
                    
                end
                
            case 'extCONUS2'
                
                datemat_extCONUS2_yr     = datemat_extCONUS2(:,1); 
                datemat_extCONUS2_mon    = datemat_extCONUS2(:,2);
                datemat_extCONUS2_day    = datemat_extCONUS2(:,3);

                parfor i = 1:length(grid_lat)
                    
                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')]);
                        sind = find(datemat_extCONUS2_yr==syr & datemat_extCONUS2_mon==smon & datemat_extCONUS2_day==sday);
                        eind = find(datemat_extCONUS2_yr==eyr & datemat_extCONUS2_mon==emon & datemat_extCONUS2_day==eday);
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired_yr;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired_mon;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired_day;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = (grid_data(sind:eind,2)+grid_data(sind:eind,3))/2;
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                            
                        end
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.5f'),'_',num2str(grid_lon(i),'%2.5f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                    end
                    
                end
                
                
            case 'CONUS'

                datemat_CONUS_yr     = datemat_CONUS(:,1); 
                datemat_CONUS_mon    = datemat_CONUS(:,2);
                datemat_CONUS_day    = datemat_CONUS(:,3);
                parfor i = 1:length(grid_lat)
                    
                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.4f'),'_',num2str(grid_lon(i),'%2.4f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.4f'),'_',num2str(grid_lon(i),'%2.4f')]);
                        sind = find(datemat_CONUS_yr==syr & datemat_CONUS_mon==smon & datemat_CONUS_day==sday);
                        eind = find(datemat_CONUS_yr==eyr & datemat_CONUS_mon==emon & datemat_CONUS_day==eday);
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired_yr;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired_mon;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired_day;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = (grid_data(sind:eind,5)+grid_data(sind:eind,6))/2;
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,5);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,6);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,7);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                        end
                        
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.4f'),'_',num2str(grid_lon(i),'%2.4f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                    end
                    
                end
                
            case 'PGF025'
                                            
                datemat_pgf025_yr     = datemat_pgf025(:,1); 
                datemat_pgf025_mon    = datemat_pgf025(:,2);
                datemat_pgf025_day    = datemat_pgf025(:,3);
                parfor i = 1:length(grid_lat)

                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.3f'),'_',num2str(grid_lon(i),'%2.3f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.3f'),'_',num2str(grid_lon(i),'%2.3f')]);
                        sind = find(datemat_pgf025_yr==syr & datemat_pgf025_mon==smon & datemat_pgf025_day==sday);
                        eind = find(datemat_pgf025_yr==eyr & datemat_pgf025_mon==emon & datemat_pgf025_day==eday);
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired_yr;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired_mon;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired_day;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = (grid_data(sind:eind,2)+grid_data(sind:eind,3))/2;
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dlwrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,5);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dswrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,6);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'shum'
                                    var_saved_tot(:,j) = grid_data(sind:eind,7);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'pres'
                                    var_saved_tot(:,j) = grid_data(sind:eind,8);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                            
                        end
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.3f'),'_',num2str(grid_lon(i),'%2.3f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);                       
                        
                    end
                    
                end
                
                
            case 'PGF050'
                
                datemat_pgf050_yr     = datemat_pgf050(:,1); 
                datemat_pgf050_mon    = datemat_pgf050(:,2);
                datemat_pgf050_day    = datemat_pgf050(:,3);
                parfor i = 1:length(grid_lat)

                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')]);
                        sind = find(datemat_pgf050_yr==syr & datemat_pgf050_mon==smon & datemat_pgf050_day==sday);
                        eind = find(datemat_pgf050_yr==eyr & datemat_pgf050_mon==emon & datemat_pgf050_day==eday);                       
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired_yr;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired_mon;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired_day;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,5);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dlwrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,6);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dswrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,7);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'shum'
                                    var_saved_tot(:,j) = grid_data(sind:eind,8);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'pres'
                                    var_saved_tot(:,j) = grid_data(sind:eind,9);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                            
                        end
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                        
                    end
                    
                end
                
                
                
            case 'PGF100'
                
                datemat_pgf100_yr     = datemat_pgf100(:,1); 
                datemat_pgf100_mon    = datemat_pgf100(:,2);
                datemat_pgf100_day    = datemat_pgf100(:,3);
                parfor i = 1:length(grid_lat)

                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.1f'),'_',num2str(grid_lon(i),'%2.1f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.1f'),'_',num2str(grid_lon(i),'%2.1f')]);
                        sind = find(datemat_pgf100_yr==syr & datemat_pgf100_mon==smon & datemat_pgf100_day==sday);
                        eind = find(datemat_pgf100_yr==eyr & datemat_pgf100_mon==emon & datemat_pgf100_day==eday);                                             
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired_yr;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired_mon;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired_day;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,5);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dlwrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,6);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'dswrf'
                                    var_saved_tot(:,j) = grid_data(sind:eind,7);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'shum'
                                    var_saved_tot(:,j) = grid_data(sind:eind,8);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'pres'
                                    var_saved_tot(:,j) = grid_data(sind:eind,9);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                            
                        end
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.1f'),'_',num2str(grid_lon(i),'%2.1f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);
                        
                    end
                    
                end
                
                
                
            case 'UWGF050'
                
                datemat_uwgf050_yr     = datemat_uwgf050(:,1); 
                datemat_uwgf050_mon    = datemat_uwgf050(:,2);
                datemat_uwgf050_day    = datemat_uwgf050(:,3);
                parfor i = 1:length(grid_lat)
                    
                    if exist([forcing_dir_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')],'file')
                        
                        grid_data = load([forcing_dir_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')]);
                        sind = find(datemat_uwgf050_yr==syr & datemat_uwgf050_mon==smon & datemat_uwgf050_day==sday);
                        eind = find(datemat_uwgf050_yr==eyr & datemat_uwgf050_mon==emon & datemat_uwgf050_day==eday);
                        
                        var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                        var_saved_format = [];
                        for j = 1:length(selvar_valid)
                            var_saved = selvar_valid{j};
                            switch var_saved
                                case 'Year'
                                    var_saved_tot(:,j) = datemat_desired_yr;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Month'
                                    var_saved_tot(:,j) = datemat_desired_mon;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'Day'
                                    var_saved_tot(:,j) = datemat_desired_day;
                                    var_saved_format = [var_saved_format,'%1.0f\t'];
                                case 'prcp'
                                    var_saved_tot(:,j) = grid_data(sind:eind,1);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tas'
                                    var_saved_tot(:,j) = (grid_data(sind:eind,2)+grid_data(sind:eind,3))/2;
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmax'
                                    var_saved_tot(:,j) = grid_data(sind:eind,2);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'tmin'
                                    var_saved_tot(:,j) = grid_data(sind:eind,3);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                                case 'wind'
                                    var_saved_tot(:,j) = grid_data(sind:eind,4);
                                    var_saved_format = [var_saved_format,'%1.2f\t'];
                            end
                        end
                        
                        fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.2f'),'_',num2str(grid_lon(i),'%2.2f')],'w');
                        fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                        fclose(fid);

                        
                    end
                    
                end  
                
                
            case 'TMPA'
                
                s_yr = syr;  % Extraction first year
                e_yr = eyr;  % Extraction last year
                datemat = datevec(datenum([s_yr 1 1]):datenum([e_yr 12 31]));
                datemat = datemat(:,1:3);
                
                pr_data = nan(size(datemat,1),length(grid_lat));
                if ismember('prcp',selvar_valid)
%                     h = waitbar(0,'Please wait ...','Name','Extracting TRMM grid data');
                    for k = 1:size(datemat,1)
                        
                        if datemat(k,2) < 10
                            monstr = ['0' num2str(datemat(k,2))];
                        else
                            monstr = num2str(datemat(k,2));
                        end
                        
                        if datemat(k,3) < 10
                            daystr = ['0' num2str(datemat(k,3))];
                        else
                            daystr = num2str(datemat(k,3));
                        end
                        
                        parfor i = 1:length(grid_lat)
                            
                            row_ind = find(latmat == grid_lat(i));
                            col_ind = find(lonmat == grid_lon(i));
                            
                            pr = ncread(['./meteo/TMPA/3B42V7_nc4/',num2str(datemat(k,1)),'/3B42_daily.',num2str(datemat(k,1)),monstr,daystr,'.7.nc4'],'precipitation',[row_ind, col_ind],[1,1]);
                            
                            pr_data(k,i) = pr;
                            
                        end
                        
%                         h = waitbar(k/size(datemat,1));
                        
%                         if ishandle(h)
%                             waitbar(k/size(datemat,1),h,[Watershed_polygon_namestr,': ',num2str(length(grid_lat)),' grids'])
%                         else
%                             set(hObject,'Value',0)
%                             set(hObject,'String','Extract')
%                             set(handles.text_extract,'Visible','off')
%                             error('Program terminated per user''s request')
%                         end
                        
                    end
%                     close(h)
                    
                end
                
                sind = find(datemat(:,1)==syr & datemat(:,2)==smon & datemat(:,3)==sday);
                eind = find(datemat(:,1)==eyr & datemat(:,2)==emon & datemat(:,3)==eday);
                var_saved_format = [];
                for j = 1:length(selvar_valid)
                    var_saved = selvar_valid{j};
                    switch var_saved
                        case 'Year'
                            var_saved_format = [var_saved_format,'%1.0f\t'];
                        case 'Month'
                            var_saved_format = [var_saved_format,'%1.0f\t'];
                        case 'Day'
                            var_saved_format = [var_saved_format,'%1.0f\t'];
                        case 'prcp'
                            var_saved_format = [var_saved_format,'%1.2f\t'];
                    end
                end
                
                for i = 1:length(grid_lat)
                    var_saved_tot = zeros(eind-sind+1,length(selvar_valid));
                    for j = 1:length(selvar_valid)
                        var_saved = selvar_valid{j};
                        switch var_saved
                            case 'Year'
                                var_saved_tot(:,j) = datemat_desired(:,1);
                            case 'Month'
                                var_saved_tot(:,j) = datemat_desired(:,2);
                            case 'Day'
                                var_saved_tot(:,j) = datemat_desired(:,3);
                            case 'prcp'
                                var_saved_tot(:,j) = pr_data(sind:eind,i);
                        end
                    end
                    
                    fid = fopen([outputdir,'\',user_prefix,num2str(grid_lat(i),'%2.3f'),'_',num2str(grid_lon(i),'%2.3f')],'w');
                    fprintf(fid,[var_saved_format(1:end-2),'\n'],var_saved_tot');
                    fclose(fid);
                    
                end
                               
        end
        
    end
    
end

set(hObject,'String','Extract')
set(handles.text_extract,'Visible','off')



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%                           Input File Generation                  
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


% --- Executes on button press in pushbutton_GlobalFileGen.
function pushbutton_GlobalFileGen_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_GlobalFileGen,'foregroundcolor','k')
    set(handles.uipanel_GlobalFileGen,'visible','on')
    
    set(handles.pushbutton_SnowFileGen,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_OtherFileGen,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_VICrun,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    
%     set(handles.uipanel_SnowFileGen,'visible','off')
    set(handles.uipanel_OtherFileGen,'visible','off')
    set(handles.uipanel_VICrun,'visible','off')

else
    set(handles.pushbutton_GlobalFileGen,'value',1)
end


% --- Executes on button press in pushbutton_SnowFileGen.
function pushbutton_SnowFileGen_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_SnowFileGen,'foregroundcolor','k')
    set(handles.uipanel_SnowFileGen,'visible','on')
    
    set(handles.pushbutton_GlobalFileGen,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_OtherFileGen,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_VICrun,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    
    set(handles.uipanel_GlobalFileGen,'visible','off')
    set(handles.uipanel_OtherFileGen,'visible','off')
    set(handles.uipanel_VICrun,'visible','off')

else
    set(handles.pushbutton_SnowFileGen,'value',1)
end


% --- Executes on button press in pushbutton_OtherFileGen.
function pushbutton_OtherFileGen_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_OtherFileGen,'foregroundcolor','k')
    set(handles.uipanel_OtherFileGen,'visible','on')
    
    set(handles.pushbutton_GlobalFileGen,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_SnowFileGen,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_VICrun,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    
    set(handles.uipanel_GlobalFileGen,'visible','off')
%     set(handles.uipanel_SnowFileGen,'visible','off')
    set(handles.uipanel_VICrun,'visible','off')

else
    set(handles.pushbutton_OtherFileGen,'value',1)
end


% --- Executes on button press in pushbutton_VICrun.
function pushbutton_VICrun_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_VICrun,'foregroundcolor','k')
    set(handles.uipanel_VICrun,'visible','on')
    
    set(handles.pushbutton_GlobalFileGen,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_SnowFileGen,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.pushbutton_OtherFileGen,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    
    set(handles.uipanel_GlobalFileGen,'visible','off')
%     set(handles.uipanel_SnowFileGen,'visible','off')
    set(handles.uipanel_OtherFileGen,'visible','off')

else
    set(handles.pushbutton_VICrun,'value',1)
end



%%%%%%%%%%%%%%%%%%%%%%%%%%   Soil/Vege/Rout   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function pushbutton_DigitalElevationModel_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*.tif'],'Select DEM File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_DigitalElevationModel,'string',[filepath, filename])
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

function radiobutton_SnowBandOptional_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.edit_ElevationBandInterval,'Enable','on')
    set(handles.edit_OutputFileSnowBand,'Enable','on')
    set(handles.pushbutton_OutputFileSnowBand_search,'Enable','on')
    set(handles.listbox_OutputFileSnowBand,'Enable','on')
    set(handles.pushbutton_OutputFileSnowBand_add,'Enable','on')
    set(handles.pushbutton_OutputFileSnowBand_remove,'Enable','on')
    set(handles.text_ElevationBand,'ForegroundColor','k')
else
    set(handles.edit_ElevationBandInterval,'Enable','off')
    set(handles.edit_OutputFileSnowBand,'Enable','off')
    set(handles.pushbutton_OutputFileSnowBand_search,'Enable','off')
    set(handles.listbox_OutputFileSnowBand,'Enable','off')
    set(handles.pushbutton_OutputFileSnowBand_add,'Enable','off')
    set(handles.pushbutton_OutputFileSnowBand_remove,'Enable','off')
    set(handles.text_ElevationBand,'ForegroundColor',[0.65 0.65 0.65])
end


function pushbutton_WatershedPolygonShape_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*.shp'],'Watershed shape file');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.listbox_WatershedPolygonShape,'value',1)
    update_filedir = [handles.listbox_WatershedPolygonShape.String; {filedir}];
    set(handles.listbox_WatershedPolygonShape,'string',update_filedir)
    
    set(handles.listbox_WatershedPolygonShape, 'min', 0, 'max', 2);
    set(handles.listbox_WatershedPolygonShape,'Value',[]);
    
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);


function pushbutton_WatershedPolygonShape_add_Callback(hObject, eventdata, handles)
if ~isempty(handles.edit_WatershedPolygonShape.String)
    set(handles.listbox_WatershedPolygonShape,'value',1)
    update_filedir = [handles.listbox_WatershedPolygonShape.String; {handles.edit_WatershedPolygonShape.String}];
    set(handles.listbox_WatershedPolygonShape,'string',update_filedir)
    set(handles.edit_WatershedPolygonShape,'string',[])
    
    set(handles.listbox_WatershedPolygonShape, 'min', 0, 'max', 2);
    set(handles.listbox_WatershedPolygonShape,'Value',[]);
end


function pushbutton_WatershedPolygonShape_remove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_WatershedPolygonShape.Value)
    selind = handles.listbox_WatershedPolygonShape.Value;
    newstring = handles.listbox_WatershedPolygonShape.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_WatershedPolygonShape.String)
        if selind-1 == 0
            set(handles.listbox_WatershedPolygonShape,'value',[])
        else
            set(handles.listbox_WatershedPolygonShape,'value',selind-1)
        end
    end
    set(handles.listbox_WatershedPolygonShape,'string',newstring)
    
    set(handles.listbox_WatershedPolygonShape, 'min', 0, 'max', 2);
    set(handles.listbox_WatershedPolygonShape,'Value',[]);
end

   
function pushbutton_FlowLengthRaster_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*.tif'],'Flow Length Raster');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.listbox_FlowLengthRaster,'value',1)
    update_filedir = [handles.listbox_FlowLengthRaster.String; {filedir}];
    set(handles.listbox_FlowLengthRaster,'string',update_filedir)
    
    set(handles.listbox_FlowLengthRaster, 'min', 0, 'max', 2);
    set(handles.listbox_FlowLengthRaster,'Value',[]);
    
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);


function pushbutton_FlowLengthRaster_add_Callback(hObject, eventdata, handles)
if ~isempty(handles.edit_FlowLengthRaster.String)
    set(handles.listbox_FlowLengthRaster,'value',1)
    update_filedir = [handles.listbox_FlowLengthRaster.String; {handles.edit_FlowLengthRaster.String}];
    set(handles.listbox_FlowLengthRaster,'string',update_filedir)
    set(handles.edit_FlowLengthRaster,'string',[])
    
    set(handles.listbox_FlowLengthRaster, 'min', 0, 'max', 2);
    set(handles.listbox_FlowLengthRaster,'Value',[]);
end


function pushbutton_FlowLengthRaster_remove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_FlowLengthRaster.Value)
    selind = handles.listbox_FlowLengthRaster.Value;
    newstring = handles.listbox_FlowLengthRaster.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_FlowLengthRaster.String)
        if selind-1 == 0
            set(handles.listbox_FlowLengthRaster,'value',[])
        else
            set(handles.listbox_FlowLengthRaster,'value',selind-1)
        end
    end
    set(handles.listbox_FlowLengthRaster,'string',newstring)
    
    set(handles.listbox_FlowLengthRaster, 'min', 0, 'max', 2);
    set(handles.listbox_FlowLengthRaster,'Value',[]);
end


function pushbutton_OutputFileSoilParameter_search_Callback(hObject, eventdata, handles)
[savefile,savepath] = uiputfile([handles.lastvisitdir,'\*'],'Save Soil Parameter File');
filedir = [savepath, savefile];
if ~(savefile==0)
    set(handles.listbox_OutputFileSoilParameter,'value',1)
    update_filedir = [handles.listbox_OutputFileSoilParameter.String; {filedir}];
    set(handles.listbox_OutputFileSoilParameter,'string',update_filedir)
    
    set(handles.listbox_OutputFileSoilParameter, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileSoilParameter,'Value',[]);
    
    handles.lastvisitdir = savepath;
end
guidata(hObject,handles);

function pushbutton_OutputFileSoilParameter_add_Callback(hObject, eventdata, handles)
if ~isempty(handles.edit_OutputFileSoilParameter.String)
    set(handles.listbox_OutputFileSoilParameter,'value',1)
    update_filedir = [handles.listbox_OutputFileSoilParameter.String; {handles.edit_OutputFileSoilParameter.String}];
    set(handles.listbox_OutputFileSoilParameter,'string',update_filedir)
    set(handles.edit_OutputFileSoilParameter,'string',[])
    
    set(handles.listbox_OutputFileSoilParameter, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileSoilParameter,'Value',[]);
end


function pushbutton_OutputFileSoilParameter_remove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_OutputFileSoilParameter.Value)
    selind = handles.listbox_OutputFileSoilParameter.Value;
    newstring = handles.listbox_OutputFileSoilParameter.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_OutputFileSoilParameter.String)
        if selind-1 == 0
            set(handles.listbox_OutputFileSoilParameter,'value',[])
        else
            set(handles.listbox_OutputFileSoilParameter,'value',selind-1)
        end
    end
    set(handles.listbox_OutputFileSoilParameter,'string',newstring)
    
    set(handles.listbox_OutputFileSoilParameter, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileSoilParameter,'Value',[]);
end


function pushbutton_OutputFileVegeParameter_search_Callback(hObject, eventdata, handles)
[savefile,savepath] = uiputfile([handles.lastvisitdir,'\*'],'Save Vege Parameter File');
filedir = [savepath, savefile];
if ~(savefile==0)
    set(handles.listbox_OutputFileVegeParameter,'value',1)
    update_filedir = [handles.listbox_OutputFileVegeParameter.String; {filedir}];
    set(handles.listbox_OutputFileVegeParameter,'string',update_filedir)
    
    set(handles.listbox_OutputFileVegeParameter, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileVegeParameter,'Value',[]);
    
    handles.lastvisitdir = savepath;
end
guidata(hObject,handles);

function pushbutton_OutputFileVegeParameter_add_Callback(hObject, eventdata, handles)
if ~isempty(handles.edit_OutputFileVegeParameter.String)
    set(handles.listbox_OutputFileVegeParameter,'value',1)
    update_filedir = [handles.listbox_OutputFileVegeParameter.String; {handles.edit_OutputFileVegeParameter.String}];
    set(handles.listbox_OutputFileVegeParameter,'string',update_filedir)
    set(handles.edit_OutputFileVegeParameter,'string',[])
    
    set(handles.listbox_OutputFileVegeParameter, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileVegeParameter,'Value',[]);
end


function pushbutton_OutputFileVegeParameter_remove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_OutputFileVegeParameter.Value)
    selind = handles.listbox_OutputFileVegeParameter.Value;
    newstring = handles.listbox_OutputFileVegeParameter.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_OutputFileVegeParameter.String)
        if selind-1 == 0
            set(handles.listbox_OutputFileVegeParameter,'value',[])
        else
            set(handles.listbox_OutputFileVegeParameter,'value',selind-1)
        end
    end
    set(handles.listbox_OutputFileVegeParameter,'string',newstring)
    
    set(handles.listbox_OutputFileVegeParameter, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileVegeParameter,'Value',[]);
end


function pushbutton_OutputFileRouteParameter_search_Callback(hObject, eventdata, handles)
[savefile,savepath] = uiputfile([handles.lastvisitdir,'\*'],'Save Route Parameter File');
filedir = [savepath, savefile];
if ~(savefile==0)
    set(handles.listbox_OutputFileRouteParameter,'value',1)
    update_filedir = [handles.listbox_OutputFileRouteParameter.String; {filedir}];
    set(handles.listbox_OutputFileRouteParameter,'string',update_filedir)
    
    set(handles.listbox_OutputFileRouteParameter, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileRouteParameter,'Value',[]);
    
    handles.lastvisitdir = savepath;
end
guidata(hObject,handles);


function pushbutton_OutputFileRouteParameter_add_Callback(hObject, eventdata, handles)
if ~isempty(handles.edit_OutputFileRouteParameter.String)
    set(handles.listbox_OutputFileRouteParameter,'value',1)
    update_filedir = [handles.listbox_OutputFileRouteParameter.String; {handles.edit_OutputFileRouteParameter.String}];
    set(handles.listbox_OutputFileRouteParameter,'string',update_filedir)
    set(handles.edit_OutputFileRouteParameter,'string',[])
    
    set(handles.listbox_OutputFileRouteParameter, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileRouteParameter,'Value',[]);
end


function pushbutton_OutputFileRouteParameter_remove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_OutputFileRouteParameter.Value)
    selind = handles.listbox_OutputFileRouteParameter.Value;
    newstring = handles.listbox_OutputFileRouteParameter.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_OutputFileRouteParameter.String)
        if selind-1 == 0
            set(handles.listbox_OutputFileRouteParameter,'value',[])
        else
            set(handles.listbox_OutputFileRouteParameter,'value',selind-1)
        end
    end
    set(handles.listbox_OutputFileRouteParameter,'string',newstring)
    
    set(handles.listbox_OutputFileRouteParameter, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileRouteParameter,'Value',[]);
end


function pushbutton_OutputFileSnowBand_search_Callback(hObject, eventdata, handles)
[savefile,savepath] = uiputfile([handles.lastvisitdir,'\*'],'Save Elevation Band File');
filedir = [savepath, savefile];
if ~(savefile==0)
    set(handles.listbox_OutputFileSnowBand,'value',1)
    update_filedir = [handles.listbox_OutputFileSnowBand.String; {filedir}];
    set(handles.listbox_OutputFileSnowBand,'string',update_filedir)
    
    set(handles.listbox_OutputFileSnowBand, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileSnowBand,'Value',[]);
    
    handles.lastvisitdir = savepath;
end
guidata(hObject,handles);


function pushbutton_OutputFileSnowBand_add_Callback(hObject, eventdata, handles)
if ~isempty(handles.edit_OutputFileSnowBand.String)
    set(handles.listbox_OutputFileSnowBand,'value',1)
    update_filedir = [handles.listbox_OutputFileSnowBand.String; {handles.edit_OutputFileSnowBand.String}];
    set(handles.listbox_OutputFileSnowBand,'string',update_filedir)
    set(handles.edit_OutputFileSnowBand,'string',[])
    
    set(handles.listbox_OutputFileSnowBand, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileSnowBand,'Value',[]);
end


function pushbutton_OutputFileSnowBand_remove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_OutputFileSnowBand.Value)
    selind = handles.listbox_OutputFileSnowBand.Value;
    newstring = handles.listbox_OutputFileSnowBand.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_OutputFileSnowBand.String)
        if selind-1 == 0
            set(handles.listbox_OutputFileSnowBand,'value',[])
        else
            set(handles.listbox_OutputFileSnowBand,'value',selind-1)
        end
    end
    set(handles.listbox_OutputFileSnowBand,'string',newstring)
    
    set(handles.listbox_OutputFileSnowBand, 'min', 0, 'max', 2);
    set(handles.listbox_OutputFileSnowBand,'Value',[]);
end

% --- Executes on button press in pushbutton_otherfilegen.
function pushbutton_otherfilegen_Callback(hObject, eventdata, handles)

num_basin = length(get(handles.listbox_WatershedPolygonShape,'String'));
spatialres_val = get(handles.popupmenu_GridSpatialResolution,'Value');
spatialres_str = get(handles.popupmenu_GridSpatialResolution,'String');

% What is the spatial resolution for the CONUS (either '0.125' or '0.0625')
if strcmp(deblank(spatialres_str(spatialres_val,:)),'1/16 degree')
    spatialres = '0.0625';
%     latmat = (23.59375:0.0625:51.71875);
%     lonmat = (-127.59375:0.0625:-61.96875);
    latmat = (-89.96875:0.0625:89.96875);
    lonmat = (-179.96875:0.0625:179.96875);
    halfgridsize = 0.0625/2;

    saveformat = ['%d\t%d\t%1.5f\t%1.5f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t'...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t'...
        '%1.6f\t%1.6f\t%d\n'];
    
elseif strcmp(deblank(spatialres_str(spatialres_val,:)),'1/8 degree')
    spatialres = '0.125';
%     latmat = (24.0625:0.125:50.9375);
%     lonmat = (-126.5625:0.125:-61.9375);
    latmat = (-89.9375:0.125:89.9375);
    lonmat = (-179.9375:0.125:179.9375);
    halfgridsize = 0.125/2;
    
    saveformat = ['%d\t%d\t%1.4f\t%1.4f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t'...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t'...
        '%1.6f\t%1.6f\t%d\n'];
    
elseif strcmp(deblank(spatialres_str(spatialres_val,:)),'0.25 degree')
    spatialres = '0.25';
    latmat = (-89.875:0.25:89.875);
    lonmat = (0.125:0.25:359.875);
    lonmat(lonmat>180) = lonmat(lonmat>180)-360;
    halfgridsize = 0.25/2;
    
    saveformat = ['%d\t%d\t%1.3f\t%1.3f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t'...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t'...
        '%1.6f\t%1.6f\t%d\n'];
    
elseif strcmp(deblank(spatialres_str(spatialres_val,:)),'0.5 degree')
    spatialres = '0.5';
    latmat = (-89.75:0.5:89.75);
    lonmat = (0.25:0.5:359.75);
    lonmat(lonmat>180) = lonmat(lonmat>180)-360;
    halfgridsize = 0.5/2;
    
    saveformat = ['%d\t%d\t%1.2f\t%1.2f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t'...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t'...
        '%1.6f\t%1.6f\t%d\n'];
    
elseif strcmp(deblank(spatialres_str(spatialres_val,:)),'1.0 degree')
    spatialres = '1.0'; 
    latmat = (-89.5:1:89.5);
    lonmat = (0.5:1:359.5);
    lonmat(lonmat>180) = lonmat(lonmat>180)-360;
    halfgridsize = 1.0/2;
    
    saveformat = ['%d\t%d\t%1.1f\t%1.1f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t'...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t' ...
        '%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t%1.6f\t'...
        '%1.6f\t%1.6f\t%d\n'];
    
end


% Required INPUTS
% Where is the DEM?
DEM_tiff = deblank(get(handles.edit_DigitalElevationModel,'String'));
% No data for DEM
% NoDataLimit = -9999; % Only values above this limit are assumed to be valid

% Where is soil type layer?
soiltype_layer_val  = get(handles.popupmenu_SoilTextureData,'Value');
soiltype_layer_str  = get(handles.popupmenu_SoilTextureData,'String');
soiltype_layer      = deblank(soiltype_layer_str{soiltype_layer_val,:});

% Where is land use layer?
vegecover_layer_val  = get(handles.popupmenu_VegeCoverData,'Value');
vegecover_layer_str  = get(handles.popupmenu_VegeCoverData,'String');
vegecover_layer      = deblank(vegecover_layer_str{vegecover_layer_val});

% Where is the basin boundary shape file?
Watershed_polygon_all = get(handles.listbox_WatershedPolygonShape,'String');

% Where is the TIFF for flow length?
FlowLength_tiff_all = get(handles.listbox_FlowLengthRaster,'String');

% Name & Directory of soil parameter file
name_soilfile_all = get(handles.listbox_OutputFileSoilParameter,'String');

% Name & Directory of vege parameter file
name_vegefile_all = get(handles.listbox_OutputFileVegeParameter,'String');

% Name & Directory of rout parameter file
name_routfile_all = get(handles.listbox_OutputFileRouteParameter,'String');

% Name & Directory of elevation parameter file
name_elevbandfile_all = get(handles.listbox_OutputFileSnowBand,'String');

% Elevation bands
DoYouWantHRUelevBand = get(handles.radiobutton_SnowBandOptional,'Value');
elevband = str2double(get(handles.edit_ElevationBandInterval,'String'));
elevbandmat = (-400:elevband:9000);



for nb = 1:num_basin
    
    set(handles.text_status_calgridelev,'Visible','on')
    set(handles.text_status_calgridelev,'BackgroundColor','w')
    set(handles.text_status_calgridelev,'ForegroundColor',[0.5 0.5 0.5])
    set(handles.text_status_calgridelev,'FontAngle','italic')
    set(handles.text_status_calgridelev,'String','Cal Grid Elev')
    
    set(handles.text_status_gensoilfile,'Visible','on')
    set(handles.text_status_gensoilfile,'BackgroundColor','w')
    set(handles.text_status_gensoilfile,'ForegroundColor',[0.5 0.5 0.5])
    set(handles.text_status_gensoilfile,'FontAngle','italic')
    set(handles.text_status_gensoilfile,'String','Gen Soil File')
    
    set(handles.text_status_genvegefile,'Visible','on')
    set(handles.text_status_genvegefile,'BackgroundColor','w')
    set(handles.text_status_genvegefile,'ForegroundColor',[0.5 0.5 0.5])
    set(handles.text_status_genvegefile,'FontAngle','italic')
    set(handles.text_status_genvegefile,'String','Gen Vege File')
    
    set(handles.text_status_genroutfile,'Visible','on')
    set(handles.text_status_genroutfile,'BackgroundColor','w')
    set(handles.text_status_genroutfile,'ForegroundColor',[0.5 0.5 0.5])
    set(handles.text_status_genroutfile,'FontAngle','italic')
    set(handles.text_status_genroutfile,'String','Gen Rout File')
    
    if DoYouWantHRUelevBand
        set(handles.text_status_genelevfile,'Visible','on')
        set(handles.text_status_genelevfile,'BackgroundColor','w')
        set(handles.text_status_genelevfile,'ForegroundColor',[0.5 0.5 0.5])
        set(handles.text_status_genelevfile,'FontAngle','italic')
        set(handles.text_status_genelevfile,'String','Gen Elev File')
    else
        set(handles.text_status_genelevfile,'Visible','off')
    end
    
    set(handles.text_genfile_etime,'Visible','off')

    Watershed_polygon   = Watershed_polygon_all{nb};
    FlowLength_tiff     = FlowLength_tiff_all{nb};
    name_soilfile       = name_soilfile_all{nb};
    name_vegefile       = name_vegefile_all{nb};
    name_routfile       = name_routfile_all{nb};
    if DoYouWantHRUelevBand
        name_elevbandfile   = name_elevbandfile_all{nb};
    end
     
    shpfile_name_ind = strfind(Watershed_polygon,'\');
    shpfile_name = Watershed_polygon(shpfile_name_ind(end)+1:end);
    set(handles.text_genfile_shp,'String',['Working on ',shpfile_name,' ...'])
    set(handles.text_genfile_shp,'Visible','on')
    pause(0.5)
    
    % Basin shape file info
    watershed_shpinfo = shaperead(Watershed_polygon);
       
    latmat_trim = latmat(latmat>(watershed_shpinfo.BoundingBox(1,2)-halfgridsize) & latmat<(watershed_shpinfo.BoundingBox(2,2)+halfgridsize));
    lonmat_trim = lonmat(lonmat>(watershed_shpinfo.BoundingBox(1,1)-halfgridsize) & lonmat<(watershed_shpinfo.BoundingBox(2,1)+halfgridsize));
    
    grid_lat  = [];
    grid_lon  = [];
    grid_area = [];
    for i = 1:length(latmat_trim)
        
        for j = 1:length(lonmat_trim)
            
            latlim = [latmat_trim(i)-halfgridsize,latmat_trim(i)+halfgridsize];
            lonlim = [lonmat_trim(j)-halfgridsize,lonmat_trim(j)+halfgridsize];
            
            [polylat,polylon] = maptrimp(watershed_shpinfo.Y, watershed_shpinfo.X, latlim, lonlim);
            
            if ~isempty(polylat)
                grid_lat  = [grid_lat; latmat_trim(i)];
                grid_lon  = [grid_lon; lonmat_trim(j)];
                grid_area = [grid_area; sum(areaint(polylat,polylon))];
            end
            
        end
        
    end
    grid_area = grid_area/sum(grid_area)*100; % fractional area in percent
    
    tic;
    
    % Grid's Elevation
    set(handles.text_status_calgridelev,'ForegroundColor','r')
    set(handles.text_status_calgridelev,'FontAngle','normal')
    pause(0.5)
    
    [Z_dem,dem_tiffinfo] = geotiffread(DEM_tiff);
    % Coordinates of origin (edge) for dem
    if strcmp(dem_tiffinfo.ColumnsStartFrom,'north') && strcmp(dem_tiffinfo.RowsStartFrom,'west')
        orgcoord_dem = [max(dem_tiffinfo.Latlim), min(dem_tiffinfo.Lonlim)];
    elseif strcmp(dem_tiffinfo.ColumnsStartFrom,'north') && strcmp(dem_tiffinfo.RowsStartFrom,'east')
        orgcoord_dem = [max(dem_tiffinfo.Latlim), max(dem_tiffinfo.Lonlim)];
    elseif strcmp(dem_tiffinfo.ColumnsStartFrom,'south') && strcmp(dem_tiffinfo.RowsStartFrom,'west')
        orgcoord_dem = [min(dem_tiffinfo.Latlim), min(dem_tiffinfo.Lonlim)];
    elseif strcmp(dem_tiffinfo.ColumnsStartFrom,'south') && strcmp(dem_tiffinfo.RowsStartFrom,'east')
        orgcoord_dem = [min(dem_tiffinfo.Latlim), max(dem_tiffinfo.Lonlim)];
    end
    % Coordinates of start dem grid
    strcoord_dem = [orgcoord_dem(1)+0.5*dem_tiffinfo.DeltaLat, orgcoord_dem(2)+0.5*dem_tiffinfo.DeltaLon];
    % DEM grids' Lat&Lon
    gridlat_dem = (strcoord_dem(1):dem_tiffinfo.DeltaLat:strcoord_dem(1)+(dem_tiffinfo.RasterSize(1)-1)*dem_tiffinfo.DeltaLat+0.5*dem_tiffinfo.DeltaLat);
    gridlon_dem = (strcoord_dem(2):dem_tiffinfo.DeltaLon:strcoord_dem(2)+(dem_tiffinfo.RasterSize(2)-1)*dem_tiffinfo.DeltaLon+0.5*dem_tiffinfo.DeltaLon);
    gridlat_dem_mat = repmat(gridlat_dem',1,length(gridlon_dem));
    gridlon_dem_mat = repmat(gridlon_dem,length(gridlat_dem),1);
    

    grid_elev = nan(length(grid_lat),1);
    for igrid = 1:length(grid_lat)

        latlim = [grid_lat(igrid)-halfgridsize,grid_lat(igrid)+halfgridsize];
        lonlim = [grid_lon(igrid)-halfgridsize,grid_lon(igrid)+halfgridsize];
        
        [polylat,polylon] = maptrimp(watershed_shpinfo.Y, watershed_shpinfo.X, latlim, lonlim);
        sel_Z = Z_dem(inpolygon(gridlon_dem_mat,gridlat_dem_mat,polylon,polylat));
        sel_dem = double(sel_Z);
        sel_dem(sel_dem>10000 | sel_dem<-10000)=[];
        
        if isempty(sel_dem)
            e_dist = (gridlon_dem_mat-polylon(1)).^2+(gridlat_dem_mat-polylat(1)).^2;
            [~,min_ind] = sort(e_dist(:));
            n = 1;
            for i=1:length(min_ind)
                Z_dem_sel = double(Z_dem(min_ind(n)));
                if Z_dem_sel>10000 || Z_dem_sel<-10000; Z_dem_sel=nan; end
                if ~isnan(Z_dem_sel)
                    grid_elev(igrid) = Z_dem_sel;
                    break;
                end
                n = n+1;
            end
            
        else

            grid_elev(igrid) = mean(sel_dem);

        end
        
    end
    e_time1 = toc;
    set(handles.text_status_calgridelev,'BackgroundColor','r')
    set(handles.text_status_calgridelev,'String',['Cal Grid Elev (',num2str(e_time1/60,'%1.1f'),'min)'])
    set(handles.text_status_calgridelev,'ForegroundColor','w')
    
    
    % Grid's Soil Parameter  
    set(handles.text_status_gensoilfile,'ForegroundColor','r')
    set(handles.text_status_gensoilfile,'FontAngle','normal')
    pause(0.5)
    
    switch soiltype_layer
        
        case 'NIJSSEN2001 (0.5-deg Global)' % global 0.5-degree soil parameter set developed by Nijssen et al.(2001)
            
            data_soilpar = load('.\library\vicparfile\Nijssen_2001\vic_params_global_0.5deg\global_soil_param_new');
            data_soilpar_lat = data_soilpar(:,3);
            data_soilpar_lon = data_soilpar(:,4);
            
            new_soilpar = nan(length(grid_lat),53);
            for igrid = 1:length(grid_lat)
                
                euc_dist = (data_soilpar_lat-grid_lat(igrid)).^2+(data_soilpar_lon-grid_lon(igrid)).^2;
                
                sel_cell_soilpar = data_soilpar(euc_dist == min(euc_dist),:);
                new_soilpar(igrid,5:end-1) = mean(sel_cell_soilpar(:,5:end-1),1);
                
                new_soilpar(igrid,1)    = 1;
                new_soilpar(igrid,2)    = igrid;
                new_soilpar(igrid,3)	= grid_lat(igrid);
                new_soilpar(igrid,4)    = grid_lon(igrid);
                new_soilpar(igrid,22)   = grid_elev(igrid);
                new_soilpar(igrid,end)  = 0;
                
            end
                        
            fid = fopen(name_soilfile,'w');
            fprintf(fid, saveformat, new_soilpar');
            fclose(fid);
            
        case 'MAURER2002 (1/8-deg CONUS)' % global 0.5-degree soil parameter set developed by Nijssen et al.(2001)
            
            data_soilpar = load('.\library\vicparfile\Maurer_2002\LDAS_vicparfiles_Maureretal2002\LDAS_soil_calib_Maureretal2002\soil_ldas.all');
            data_soilpar_lat = data_soilpar(:,3);
            data_soilpar_lon = data_soilpar(:,4);
            
            new_soilpar = nan(length(grid_lat),53);
            for igrid = 1:length(grid_lat)
                
                euc_dist = (data_soilpar_lat-grid_lat(igrid)).^2+(data_soilpar_lon-grid_lon(igrid)).^2;
                
                sel_cell_soilpar = data_soilpar(euc_dist == min(euc_dist),:);
                new_soilpar(igrid,5:end-1) = mean(sel_cell_soilpar(:,5:end-1),1);
                
                new_soilpar(igrid,1)    = 1;
                new_soilpar(igrid,2)    = igrid;
                new_soilpar(igrid,3)	= grid_lat(igrid);
                new_soilpar(igrid,4)    = grid_lon(igrid);
                new_soilpar(igrid,22)   = grid_elev(igrid);
                new_soilpar(igrid,end)  = 0;
                
            end
                        
            fid = fopen(name_soilfile,'w');
            fprintf(fid, saveformat, new_soilpar');
            fclose(fid);   
            
            
        case 'LIVNEH2015 (1/16-deg extCONUS)'
            
            data_soilpar = load('.\library\vicparfile\Livneh_2015\vic.nldas.mexico.soil.txt');
            data_soilpar_lat = data_soilpar(:,3);
            data_soilpar_lon = data_soilpar(:,4);
            
            new_soilpar = nan(length(grid_lat),53);
            for igrid = 1:length(grid_lat)
                
                euc_dist = (data_soilpar_lat-grid_lat(igrid)).^2+(data_soilpar_lon-grid_lon(igrid)).^2;
                
                sel_cell_soilpar = data_soilpar(euc_dist == min(euc_dist),:);
                new_soilpar(igrid,5:end-1) = mean(sel_cell_soilpar(:,5:end-1),1);
                
                new_soilpar(igrid,1)    = 1;
                new_soilpar(igrid,2)    = igrid;
                new_soilpar(igrid,3)	= grid_lat(igrid);
                new_soilpar(igrid,4)    = grid_lon(igrid);
                new_soilpar(igrid,22)   = grid_elev(igrid);
                new_soilpar(igrid,end)  = 0;
                
            end
                        
            fid = fopen(name_soilfile,'w');
            fprintf(fid, saveformat, new_soilpar');
            fclose(fid);   
            
                
        case 'STATSGO (1-km CONUS)'
            % Soil Information based on STATSGO
            % Raster file providing STATSGO sites: '.\library\soil\STATSGO\domtexture_geo.tif'
            % ASCII file regarding  dominant soil textures of 11 layers: '.\library\soil\STATSGO\mu_domtcode.ascii'
            % Soil information [Class type %sandy %Clay BulkDensity FieldCap WilltingP PorosityFrac Ksat b]: '.\library\soil\STATSGO\SoilProperty.xlsx'  
            
            % STATSGO soil layer information
            [statsgo_stie, statsgo_tiffinfo] = geotiffread('.\library\soil\STATSGO\domtexture_geo.tif');
            % Coordinates of origin (edge)
            if strcmp(statsgo_tiffinfo.ColumnsStartFrom,'north') && strcmp(statsgo_tiffinfo.RowsStartFrom,'west')
                orgcoord_statsgo = [max(statsgo_tiffinfo.Latlim), min(statsgo_tiffinfo.Lonlim)];
            elseif strcmp(statsgo_tiffinfo.ColumnsStartFrom,'north') && strcmp(statsgo_tiffinfo.RowsStartFrom,'east')
                orgcoord_statsgo = [max(statsgo_tiffinfo.Latlim), max(statsgo_tiffinfo.Lonlim)];
            elseif strcmp(statsgo_tiffinfo.ColumnsStartFrom,'south') && strcmp(statsgo_tiffinfo.RowsStartFrom,'west')
                orgcoord_statsgo = [min(statsgo_tiffinfo.Latlim), min(statsgo_tiffinfo.Lonlim)];
            elseif strcmp(statsgo_tiffinfo.ColumnsStartFrom,'south') && strcmp(statsgo_tiffinfo.RowsStartFrom,'east')
                orgcoord_statsgo = [min(statsgo_tiffinfo.Latlim), max(statsgo_tiffinfo.Lonlim)];
            end
            % Coordinates of starting grid
            strcoord_statsgo = [orgcoord_statsgo(1)+0.5*statsgo_tiffinfo.DeltaLat, orgcoord_statsgo(2)+0.5*statsgo_tiffinfo.DeltaLon];
            % grids' Lat&Lon
            gridlat_statsgo = (strcoord_statsgo(1):statsgo_tiffinfo.DeltaLat:strcoord_statsgo(1)+(statsgo_tiffinfo.RasterSize(1)-1)*statsgo_tiffinfo.DeltaLat+0.5*statsgo_tiffinfo.DeltaLat);
            gridlon_statsgo = (strcoord_statsgo(2):statsgo_tiffinfo.DeltaLon:strcoord_statsgo(2)+(statsgo_tiffinfo.RasterSize(2)-1)*statsgo_tiffinfo.DeltaLon+0.5*statsgo_tiffinfo.DeltaLon);
            
            grid_statsgo = struct;
            for igrid = 1:length(grid_lat)
                
                latlim = [grid_lat(igrid)-halfgridsize,grid_lat(igrid)+halfgridsize];
                lonlim = [grid_lon(igrid)-halfgridsize,grid_lon(igrid)+halfgridsize];
                [polylat,polylon] = maptrimp(watershed_shpinfo.Y, watershed_shpinfo.X, latlim, lonlim);
                
                latmat_trim = gridlat_statsgo(gridlat_statsgo>(min(polylat)-abs(statsgo_tiffinfo.DeltaLat)/2) & gridlat_statsgo<(max(polylat)+abs(statsgo_tiffinfo.DeltaLat)/2));
                lonmat_trim = gridlon_statsgo(gridlon_statsgo>(min(polylon)-abs(statsgo_tiffinfo.DeltaLon)/2) & gridlon_statsgo<(max(polylon)+abs(statsgo_tiffinfo.DeltaLon)/2));
                
                selsite  = [];
                selsite_area = [];
                for i = 1:length(latmat_trim)
                    
                    for j = 1:length(lonmat_trim)
                        
                        latlim = [latmat_trim(i)-abs(statsgo_tiffinfo.DeltaLat)/2,latmat_trim(i)+abs(statsgo_tiffinfo.DeltaLat)/2];
                        lonlim = [lonmat_trim(j)-abs(statsgo_tiffinfo.DeltaLon)/2,lonmat_trim(j)+abs(statsgo_tiffinfo.DeltaLon)/2];
                        
                        [polylon2,polylat2] = polybool('intersection',polylon,polylat,[lonlim(1),lonlim(1),lonlim(2),lonlim(2),lonlim(1)],[latlim(1),latlim(2),latlim(2),latlim(1),latlim(1)]);
                        %[polylat2,polylon2] = maptrimp(polylat, polylon, latlim, lonlim);                       
                        
                        if ~isempty(polylat2)
                            selsite  = [selsite; statsgo_stie(gridlat_statsgo==latmat_trim(i),gridlon_statsgo==lonmat_trim(j))];
                            selsite_area = [selsite_area; sum(areaint(polylat2,polylon2))];
                        end
                        
                    end
                    
                end
                
                unique_site = unique(selsite);
                site_fraction = nan(length(unique_site),2);
                for i = 1:length(unique_site)
                    site_fraction(i,1) = unique_site(i);
                    site_fraction(i,2) = sum(selsite_area(selsite==unique_site(i)))/sum(selsite_area);
                end
                site_fraction(site_fraction(:,2)==0,:)=[];
                
                grid_statsgo(igrid).site = site_fraction(:,1);
                grid_statsgo(igrid).fraction = site_fraction(:,2);
                
            end
            
            
            % STATSGO soil texture information. It has information about dominant soil
            % texture types for 11 layers
            STATSGO     = importdata('.\library\soil\STATSGO\mu_domtcode.ascii');
            soiltexture = STATSGO.data; % [site# Layer1 L2 L3 ... L11]
            layerdepth  = [1 5; 2 5; 3 10; 4 10; 5 10; 6 20; 7 20; 8 20; 9 50; 10 50; 11 50]; % Depth for each layer [layer# thickness(cm)]
            
            
            soiltexture_allgrid = []; % soil texture of 3 VIC model layers for all grid cells
            layerdepth_allgrid  = [];  % soil depth of 3 VIC model layers for all grid cells
            for igrid = 1:length(grid_statsgo)
                
                validsite = grid_statsgo(igrid).site;  % STATSGO experimental sites id in a grid
                numcell   = grid_statsgo(igrid).fraction;  % each site's portion in a grid
                
                soil_validsite = nan(length(validsite),11);
                for nsite = 1:length(validsite)
                    siteid_num  = validsite(nsite);
                    sitesoil    = soiltexture(soiltexture(:,1)==siteid_num,2:end); % soil textures of 11 layers for a site
                    soil_validsite(nsite,:) = sitesoil;
                end
                
                % Bed Rock location is detected to determine total soil depth for VIC
                % model. A layer is considered to be a bed rock layer if the dominanat
                % type of soil turns out to be a bed rock.
                domtexture = nan(11,1); % representative soil textures for 11 layers
                for nlay = 1:11
                    layonly  =  [soil_validsite(:,nlay) numcell repmat(layerdepth(nlay,2),length(validsite),1)];  % sites' textures and number of grid cells for a layer
                    existtype = unique(layonly(:,1));
                    type_volume = nan(length(existtype),2); % volume of soil textures
                    for i = 1:length(existtype)
                        typeportion = layonly(layonly(:,1)==existtype(i),2).*layonly(layonly(:,1)==existtype(i),3);
                        type_volume(i,:) = [existtype(i) sum(typeportion)];
                    end
                    
                    sort_type_portion = sortrows(type_volume,2);
                    domtype = sort_type_portion(end,1); % dominant soil type for selected layers
                    
                    % Rarely, a dominant soil type for layers can be the bed rock even though
                    % each layer has a dominant soil type other than the bed rock. In this case,
                    % we force the combined layer to have a secondly dominant type of soil.
                    if domtype == 15 && length(existtype) ~= 1
                        domtype  = sort_type_portion(end-1,1);
                    end
                   
                    domtexture(nlay) = domtype;
                    
                end
                
                % The pre-determined total soil depth is divided into three layers in this program
                bed_ind = find(domtexture==15,1,'first')-1;  % finding the layer right above the Bed Rock
                
                if bed_ind > 0   % Grid cell has soil layers
                    
                    % The very first top soil layer is fixed 10cm or less than 10cm if
                    % there is only one soil layer
                    
                    if bed_ind == 1 % in case there's only one soil layer
                        layonly  =  [soil_validsite(:,1) numcell repmat(layerdepth(1,2),length(validsite),1)];  % sites' textures and number of grid cells for a layer
                        existtype = unique(layonly(:,1));
                        type_volume = nan(length(existtype),2); % volume of soil textures
                        for i = 1:length(existtype)
                            typeportion = layonly(layonly(:,1)==existtype(i),2).*layonly(layonly(:,1)==existtype(i),3);
                            type_volume(i,:) = [existtype(i) sum(typeportion)];
                        end
                        sort_type_portion = sortrows(type_volume,2);
                        domtype = sort_type_portion(end,1);
                        if domtype == 15 && length(existtype) ~= 1
                            sort_type_portion(end,:)=[];
                            domtype  = sort_type_portion(end,1);
                        end
                        
                        if domtype == 13 || domtype == 14 || domtype == 16
                            for i = 1:size(sort_type_portion,1)-1
                                domtype_s = sort_type_portion(end-i,1);
                                if ~(domtype_s == 13 || domtype_s == 14 || domtype_s == 16 || domtype_s == 15)
                                    domtype = domtype_s;
                                    break;
                                end
                            end
                        end
                        
                        first_texture  = domtype;
                        second_texture = nan;
                        third_texture  = nan;
                        first_depth    = sum(layerdepth(1:1,2));
                        second_depth   = nan;
                        third_depth    = nan;
                        
                    elseif bed_ind == 2 % in case there's two soil layers
                        layonly = [soil_validsite(:,1) numcell repmat(layerdepth(1,2),length(validsite),1); soil_validsite(:,2) numcell repmat(layerdepth(2,2),length(validsite),1)];
                        existtype = unique(layonly(:,1));
                        type_volume = nan(length(existtype),2); % volume of soil textures
                        for i = 1:length(existtype)
                            typeportion = layonly(layonly(:,1)==existtype(i),2).*layonly(layonly(:,1)==existtype(i),3);
                            type_volume(i,:) = [existtype(i) sum(typeportion)];
                        end
                        sort_type_portion = sortrows(type_volume,2);
                        domtype = sort_type_portion(end,1);
                        if domtype == 15 && length(existtype) ~= 1
                            sort_type_portion(end,:)=[];
                            domtype  = sort_type_portion(end,1);
                        end
                        
                        if domtype == 13 || domtype == 14 || domtype == 16
                            for i = 1:size(sort_type_portion,1)-1
                                domtype_s = sort_type_portion(end-i,1);
                                if ~(domtype_s == 13 || domtype_s == 14 || domtype_s == 16 || domtype_s == 15)
                                    domtype = domtype_s;
                                    break;
                                end
                            end
                        end
                        
                        first_texture  = domtype;
                        second_texture = nan;
                        third_texture  = nan;
                        first_depth    = sum(layerdepth(1:2,2));
                        second_depth   = nan;
                        third_depth    = nan;
                        
                    elseif bed_ind > 2 % in case there's soil layers more than two
                        layonly      = [soil_validsite(:,1) numcell repmat(layerdepth(1,2),length(validsite),1); soil_validsite(:,2) numcell repmat(layerdepth(2,2),length(validsite),1)];
                        existtype = unique(layonly(:,1));
                        type_volume = nan(length(existtype),2); % volume of soil textures
                        for i = 1:length(existtype)
                            typeportion = layonly(layonly(:,1)==existtype(i),2).*layonly(layonly(:,1)==existtype(i),3);
                            type_volume(i,:) = [existtype(i) sum(typeportion)];
                        end
                        sort_type_portion = sortrows(type_volume,2);
                        domtype = sort_type_portion(end,1);
                        if domtype == 15 && length(existtype) ~= 1
                            sort_type_portion(end,:)=[];
                            domtype  = sort_type_portion(end,1);
                        end
                        
                        if domtype == 13 || domtype == 14 || domtype == 16
                            for i = 1:size(sort_type_portion,1)-1
                                domtype_s = sort_type_portion(end-i,1);
                                if ~(domtype_s == 13 || domtype_s == 14 || domtype_s == 16 || domtype_s == 15)
                                    domtype = domtype_s;
                                    break;
                                end
                            end
                        end
                        
                        first_texture  = domtype;
                        first_depth    = sum(layerdepth(1:2,2));
                        
                        remainlay      = bed_ind-2;
                        
                        if remainlay/2 == 0.5 % in case there are 3 layers. therefore no third layer
                            layonly  =  [soil_validsite(:,3) numcell repmat(layerdepth(3,2),length(validsite),1)];  % sites' textures and number of grid cells for a layer
                            existtype = unique(layonly(:,1));
                            type_volume = nan(length(existtype),2); % volume of soil textures
                            for i = 1:length(existtype)
                                typeportion = layonly(layonly(:,1)==existtype(i),2).*layonly(layonly(:,1)==existtype(i),3);
                                type_volume(i,:) = [existtype(i) sum(typeportion)];
                            end
                            sort_type_portion = sortrows(type_volume,2);
                            domtype = sort_type_portion(end,1);
                            if domtype == 15 && length(existtype) ~= 1
                                sort_type_portion(end,:)=[];
                                domtype  = sort_type_portion(end,1);
                            end
                            
                            if domtype == 13 || domtype == 14 || domtype == 16
                                for i = 1:size(sort_type_portion,1)-1
                                    domtype_s = sort_type_portion(end-i,1);
                                    if ~(domtype_s == 13 || domtype_s == 14 || domtype_s == 16 || domtype_s == 15)
                                        domtype = domtype_s;
                                        break;
                                    end
                                end
                            end
                            
                            second_texture  = domtype;
                            second_depth    = sum(layerdepth(3,2));
                            third_texture   = nan;  third_depth  = nan;
                            
                        else % second and third layers have at least one layer
                            num_2lay = round(remainlay/2);
                            secondlayinfo =[];
                            for n = 1:num_2lay
                                layerinfo     = [soil_validsite(:,n+2) numcell repmat(layerdepth(n+2,2),length(validsite),1)];
                                secondlayinfo = [secondlayinfo;layerinfo];
                            end
                            
                            existtype = unique(secondlayinfo(:,1));
                            type_volume = nan(length(existtype),2); % volume of soil textures
                            for i = 1:length(existtype)
                                typeportion = secondlayinfo(secondlayinfo(:,1)==existtype(i),2).*secondlayinfo(secondlayinfo(:,1)==existtype(i),3);
                                type_volume(i,:) = [existtype(i) sum(typeportion)];
                            end
                            
                            sort_type_portion = sortrows(type_volume,2);
                            domtype = sort_type_portion(end,1);
                            if domtype == 15 && length(existtype) ~= 1
                                sort_type_portion(end,:)=[];
                                domtype  = sort_type_portion(end,1);
                            end
                            
                            if domtype == 13 || domtype == 14 || domtype == 16
                                for i = 1:size(sort_type_portion,1)-1
                                    domtype_s = sort_type_portion(end-i,1);
                                    if ~(domtype_s == 13 || domtype_s == 14 || domtype_s == 16 || domtype_s == 15)
                                        domtype = domtype_s;
                                        break;
                                    end
                                end
                            end
                            
                            second_texture  = domtype;
                            second_depth    = sum(layerdepth(3:2+num_2lay,2));
                            
                            num_3lay = remainlay-num_2lay;
                            thirdlayinfo =[];
                            for n = 1:num_3lay
                                layerinfo    = [soil_validsite(:,n+2+num_2lay) numcell repmat(layerdepth(n+2+num_2lay,2),length(validsite),1)];
                                thirdlayinfo = [thirdlayinfo;layerinfo];
                            end
                            
                            existtype = unique(thirdlayinfo(:,1));
                            type_volume = nan(length(existtype),2); % volume of soil textures
                            for i = 1:length(existtype)
                                typeportion = thirdlayinfo(thirdlayinfo(:,1)==existtype(i),2).*thirdlayinfo(thirdlayinfo(:,1)==existtype(i),3);
                                type_volume(i,:) = [existtype(i) sum(typeportion)];
                            end
                            
                            sort_type_portion = sortrows(type_volume,2);
                            domtype = sort_type_portion(end,1);
                            if domtype == 15 && length(existtype) ~= 1
                                sort_type_portion(end,:)=[];
                                domtype  = sort_type_portion(end,1);
                            end
                            
                            if domtype == 13 || domtype == 14 || domtype == 16
                                for i = 1:size(sort_type_portion,1)-1
                                    domtype_s = sort_type_portion(end-i,1);
                                    if ~(domtype_s == 13 || domtype_s == 14 || domtype_s == 16 || domtype_s == 15)
                                        domtype = domtype_s;
                                        break;
                                    end
                                end
                            end
                            
                            third_texture  = domtype;
                            third_depth    = sum(layerdepth(2+num_2lay+1:2+num_2lay+num_3lay,2));
                        end
                        
                    end
                    
                elseif isempty(bed_ind) % all are soil layers
                    
                    layerinfo      = [soil_validsite(:,1) numcell repmat(layerdepth(1,2),length(validsite),1); soil_validsite(:,2) numcell repmat(layerdepth(2,2),length(validsite),1)];
                    existtype = unique(layerinfo(:,1));
                    type_volume = nan(length(existtype),2); % volume of soil textures
                    for i = 1:length(existtype)
                        typeportion = layerinfo(layerinfo(:,1)==existtype(i),2).*layerinfo(layerinfo(:,1)==existtype(i),3);
                        type_volume(i,:) = [existtype(i) sum(typeportion)];
                    end
                    
                    sort_type_portion = sortrows(type_volume,2);
                    domtype = sort_type_portion(end,1);
                    if domtype == 15 && length(existtype) ~= 1
                        sort_type_portion(end,:)=[];
                        domtype  = sort_type_portion(end,1);
                    end
                    
                    if domtype == 13 || domtype == 14 || domtype == 16
                        for i = 1:size(sort_type_portion,1)-1
                            domtype_s = sort_type_portion(end-i,1);
                            if ~(domtype_s == 13 || domtype_s == 14 || domtype_s == 16 || domtype_s == 15)
                                domtype = domtype_s;
                                break;
                            end
                        end
                    end
                    first_texture  = domtype;
                    first_depth    = sum(layerdepth(1:2,2));
                    remainlay      = 11-2;
                    
                    
                    num_2lay = round(remainlay/2);
                    secondlayinfo =[];
                    for n = 1:num_2lay
                        layerinfo     = [soil_validsite(:,n+2) numcell repmat(layerdepth(n+2,2),length(validsite),1)];
                        secondlayinfo = [secondlayinfo;layerinfo];
                    end
                    
                    existtype = unique(secondlayinfo(:,1));
                    type_volume = nan(length(existtype),2); % volume of soil textures
                    for i = 1:length(existtype)
                        typeportion = secondlayinfo(secondlayinfo(:,1)==existtype(i),2).*secondlayinfo(secondlayinfo(:,1)==existtype(i),3);
                        type_volume(i,:) = [existtype(i) sum(typeportion)];
                    end
                    
                    sort_type_portion = sortrows(type_volume,2);
                    domtype = sort_type_portion(end,1);
                    if domtype == 15 && length(existtype) ~= 1
                        sort_type_portion(end,:)=[];
                        domtype  = sort_type_portion(end,1);
                    end
                    
                    if domtype == 13 || domtype == 14 || domtype == 16
                        for i = 1:size(sort_type_portion,1)-1
                            domtype_s = sort_type_portion(end-i,1);
                            if ~(domtype_s == 13 || domtype_s == 14 || domtype_s == 16 || domtype_s == 15)
                                domtype = domtype_s;
                                break;
                            end
                        end
                    end
                    second_texture  = domtype;
                    second_depth    = sum(layerdepth(3:2+num_2lay,2));
                    
                    num_3lay = remainlay-num_2lay;
                    thirdlayinfo =[];
                    for n = 1:num_3lay
                        layerinfo    = [soil_validsite(:,n+2+num_2lay) numcell repmat(layerdepth(n+2+num_2lay,2),length(validsite),1)];
                        thirdlayinfo = [thirdlayinfo;layerinfo];
                    end
                    
                    existtype = unique(thirdlayinfo(:,1));
                    type_volume = nan(length(existtype),2); % volume of soil textures
                    for i = 1:length(existtype)
                        typeportion = thirdlayinfo(thirdlayinfo(:,1)==existtype(i),2).*thirdlayinfo(thirdlayinfo(:,1)==existtype(i),3);
                        type_volume(i,:) = [existtype(i) sum(typeportion)];
                    end
                    
                    sort_type_portion = sortrows(type_volume,2);
                    domtype = sort_type_portion(end,1);
                    if domtype == 15 && length(existtype) ~= 1
                        sort_type_portion(end,:)=[];
                        domtype  = sort_type_portion(end,1);
                    end
                    
                    if domtype == 13 || domtype == 14 || domtype == 16
                        for i = 1:size(sort_type_portion,1)-1
                            domtype_s = sort_type_portion(end-i,1);
                            if ~(domtype_s == 13 || domtype_s == 14 || domtype_s == 16 || domtype_s == 15)
                                domtype = domtype_s;
                                break;
                            end
                        end
                    end
                    third_texture  = domtype;
                    third_depth    = sum(layerdepth(2+num_2lay+1:2+num_2lay+num_3lay,2));
                    
                    
                elseif bed_ind == 0  % No soil layers for a grid
                    
                    first_texture  =  nan;
                    second_texture =  nan;
                    third_texture  =  nan;
                    first_depth    =  nan;
                    second_depth   =  nan;
                    third_depth    =  nan;
                    
                end
                
                soil_type_3layer    = [ first_texture second_texture third_texture];
                soil_depth_3layer   = [ first_depth second_depth third_depth];
                
                soiltexture_allgrid = [soiltexture_allgrid;soil_type_3layer];
                layerdepth_allgrid  = [layerdepth_allgrid;soil_depth_3layer];
                
            end
            
            % soil characteristic are unknown for 13:organic materials and 16:other
            % replace those type with type 12(Clay)
            soiltexture_allgrid(soiltexture_allgrid == 13 | soiltexture_allgrid == 16) = 12;
            
            % type14:water, type15:bed rock
            soiltexture_allgrid(soiltexture_allgrid == 14 | soiltexture_allgrid == 15) = 12;
            
            
            % Load soil information
            %[Class %sandy %Clay BulkDensity FieldCap WilltingP PorosityFrac Ksat b]
            soiltable = [...    
                1.0000      94.8300    2.2700    1.4900    0.0800    0.0300    0.4300   38.4100    4.1000;...
                2.0000      85.2300    6.5300    1.5200    0.1500    0.0600    0.4200   10.8700    3.9900;...
                3.0000      69.2800   12.4800    1.5700    0.2100    0.0900    0.4000    5.2400    4.8400;...
                4.0000      19.2800   17.1100    1.4200    0.3200    0.1200    0.4600    3.9600    3.7900;...
                5.0000       4.5000    8.3000    1.2800    0.2800    0.0800    0.5200    8.5900    3.0500;...
                6.0000      41.0000   20.6900    1.4900    0.2900    0.1400    0.4300    1.9700    5.3000;...
                7.0000      60.9700   26.3300    1.6000    0.2700    0.1700    0.3900    2.4000    8.6600;...
                8.0000       9.0400   33.0500    1.3800    0.3600    0.2100    0.4800    4.5700    7.4800;...
                9.0000      30.0800   33.4600    1.4300    0.3400    0.2100    0.4600    1.7700    8.0200;...
               10.0000      50.3200   39.3000    1.5700    0.3100    0.2300    0.4100    1.1900   13.0000;...
               11.0000       8.1800   44.5800    1.3500    0.3700    0.2500    0.4900    2.9500    9.7600;...
               12.0000      24.7100   52.4600    1.3900    0.3600    0.2700    0.4700    3.1800   12.2800;...
               ];
            
            % Soil texture information for 3 soil layers
            soilinfo_3layer = soiltexture_allgrid;
            
            % Ksat: Saturated Hydraulic conductivity. It is taken directely from soil property table
            totgrid_K = [];
            for igrid = 1:size(soilinfo_3layer,1)
                grid_K = [];
                for nly = 1:size(soilinfo_3layer,2)
                    type   =  soilinfo_3layer(igrid,nly);
                    ly_K   =  soiltable(soiltable(:,1)==type,8);
                    grid_K =  [grid_K, ly_K];
                end
                totgrid_K  =  [totgrid_K;grid_K];
            end
            totgrid_K = totgrid_K * 240; % Convert unit for use in VIC. Now in mm/day
            
            % expt: exponent from the Brooks-Corey relationship. we need use the value
            % of b in soil property table to obtain this
            totgrid_expt = [];
            for igrid = 1:size(soilinfo_3layer,1)
                grid_expt = [];
                for nly = 1:size(soilinfo_3layer,2)
                    type      =  soilinfo_3layer(igrid,nly);
                    ly_expt   =  soiltable(soiltable(:,1)==type,9)*2+3; % expt = 3+2b
                    grid_expt =  [grid_expt, ly_expt];
                end
                totgrid_expt  =  [totgrid_expt;grid_expt];
            end
            
            % Bulk Density. It is taken directely from soil property table
            totgrid_bulkden = [];
            for igrid=1:size(soilinfo_3layer,1)
                grid_bulkden = [];
                for nly = 1:size(soilinfo_3layer,2)
                    type         =  soilinfo_3layer(igrid,nly);
                    ly_bulkden   =  soiltable(soiltable(:,1)==type,4);
                    grid_bulkden =  [grid_bulkden, ly_bulkden];
                end
                totgrid_bulkden  =  [totgrid_bulkden;grid_bulkden];
            end
            totgrid_bulkden = totgrid_bulkden * 1000; % Convert unit for use in VIC. Now in kg/m3
            
            % bubble: Bubbling pressure. use calculated expt value
            totgrid_bubble = totgrid_expt*0.32+4.3;
            
            % Wcr_Fract. This is set at 70% of the field capacity.
            totgrid_WcrF = [];
            for igrid=1:size(soilinfo_3layer,1)
                grid_WcrF = [];
                for nly = 1:size(soilinfo_3layer,2)
                    type       =  soilinfo_3layer(igrid,nly);
                    ly_WcrF    =  soiltable(soiltable(:,1)==type,5)*0.7;
                    grid_WcrF  =  [grid_WcrF, ly_WcrF];
                end
                totgrid_WcrF   =  [totgrid_WcrF;grid_WcrF];
            end
            
            %Wpwp_Fract
            totgrid_WpwpF = [];
            for igrid=1:size(soilinfo_3layer,1)
                grid_WpwpF = [];
                for nly = 1:size(soilinfo_3layer,2)
                    type        =  soilinfo_3layer(igrid,nly);
                    ly_WpwpF    =  soiltable(soiltable(:,1)==type,6);
                    grid_WpwpF  =  [grid_WpwpF, ly_WpwpF];
                end
                totgrid_WpwpF   =  [totgrid_WpwpF;grid_WpwpF];
            end
            
            %check if Wpwp <= Wcr
            totgrid_WpwpF(totgrid_WcrF-totgrid_WpwpF < 0) = totgrid_WcrF(totgrid_WcrF-totgrid_WpwpF < 0);
            
            % Create VIC soil parameter file. Refer to the VIC web site
            % (http://www.hydro.washington.edu/Lettenmaier/Models/VIC/Documentation/SoilParam.shtml)
            % for the required format of file and description of each parameter
            
            % Column 1, active grid indicator
            run_cell = ones(size(grid_lat));
            % Column 2, Grid cell number
            gridid = (1:length(grid_lat))';
            % Column 3, Latitude of grid cell
            lat = grid_lat;
            % Column 4, Longitude of grid cell
            lon = grid_lon;
            % Column 5, Variable infiltration curve parameter
            infilt = repmat(0.01,size(grid_lat));
            % Column 6, Fraction of Dsmax where non-linear baseflow begins
            Ds = repmat(0.001,size(grid_lat));
            % Column 7, Maximum velocity of baseflow
            Dsmax = repmat(10,size(grid_lat));
            % Column 8, Fraction of maximum soil moisture where non-linear baseflow
            % occurs
            Ws = repmat(0.9,size(grid_lat));
            % Column 9, Exponent used in baseflow curve, normally set to 2
            c = repmat(0.9,size(grid_lat));
            % Column 10-12, Exponent n in Campbell's eqn for hydraulic conductivity
            expt = totgrid_expt;
            % Column 13-15, Saturated hydrologic conductivity
            Ksat = totgrid_K;
            % Column 16-18, Soil moisture diffusion parameter
            phi_s = repmat(-999,length(grid_lat),3);
            % Column 19-21, Initial layer moisture content
            init_moist1 = repmat(0.0,size(grid_lat));
            init_moist2 = repmat(0.0,size(grid_lat));
            init_moist3 = repmat(0.0,size(grid_lat));
            init_moist = [init_moist1,init_moist2,init_moist3];
            % Column 22, Average elevation of grid cell
            evel = grid_elev;
            % Column 23-25, Thickness of each soil moisture layer
            depth = layerdepth_allgrid*0.01;
            % Column 26,Average soil temperature
            avg_T = repmat(0.3025,size(grid_lat));
            % Column 27, Soil thermal damping depth
            dp = repmat(4,size(grid_lat));
            % Column 28-30, Bubbling pressure of soil
            bubble = totgrid_bubble;
            % Column 31-33, Quartz content of soil
            quartz = repmat(0.693,length(grid_lat),3);
            % Column 34-36, Bulk density of soil layer
            bulk_density = totgrid_bulkden;
            % Column 37-39, Soil particle density
            soil_density = repmat(2685,length(grid_lat),3);
            % Column 40, Time zone offset from GMT
            off_gmt = repmat(-8,size(grid_lat));
            % Column 41-43, Fractional soil moisture content at the critical point
            Wcr_FRACT = totgrid_WcrF;
            % Column 44-46, Fractional soil moisture content at the wilting point
            Wpwp_FRACT = totgrid_WpwpF;
            % Column 47, Surface roughness of bare soil
            rough = repmat(0.01,size(grid_lat));
            % Column 48, Surface roughness of snowpack (0.005m~0.2m)
            snow_rough = repmat(0.005,size(grid_lat));
            % Column 49, Average annual precipitation
            annual_prec = repmat(-99,size(grid_lat));
            % Column 50-52, Soil moisture layer residual moisture
            resid_moist = zeros(length(grid_lat),3);
            % Column 53, if set to 1, then frozen soil algorithm is activated 
            fs_active = ones(size(grid_lat));
            
            totalpar = [run_cell gridid lat lon infilt Ds Dsmax Ws c expt Ksat phi_s ...
                init_moist evel depth avg_T dp bubble quartz bulk_density soil_density ...
                off_gmt Wcr_FRACT Wpwp_FRACT rough snow_rough annual_prec resid_moist fs_active];
            
            fid = fopen(name_soilfile,'w');
            fprintf(fid, saveformat, totalpar');
            fclose(fid);
            
    end
    e_time2 = toc;
    set(handles.text_status_gensoilfile,'BackgroundColor','r')
    set(handles.text_status_gensoilfile,'String',['Gen Soil File (',num2str((e_time2-e_time1)/60,'%1.1f'),'min)'])
    set(handles.text_status_gensoilfile,'ForegroundColor','w')
    
    
    % Grid's Vege Parameter
    set(handles.text_status_genvegefile,'ForegroundColor','r')
    set(handles.text_status_genvegefile,'FontAngle','normal')
    pause(0.5)
  
    switch vegecover_layer
        
        case '1-km AVHRR Global Land Cover'

            % Vegetation Information based on AVHRR_1km_LANDCOVER
            % Raster file providing AVHRR_1km_LANDCOVER: 'E:\DATA\GIS\AVHRR_1km_LANDCOVER_1981_1994.GLOBAL\AVHRR_1km_LANDCOVER_1981_1994.GLOBAL.tif'
            
            % Global vegetation cover information from "AVHRR_1km_LANDCOVER_1981_1994.GLOBAL"
            [vege_cover, vege_tiffinfo] = geotiffread('.\library\vege\AVHRR\AVHRR_1km_LANDCOVER_1981_1994.GLOBAL.tif');
            % Coordinates of origin (edge)
            if strcmp(vege_tiffinfo.ColumnsStartFrom,'north') && strcmp(vege_tiffinfo.RowsStartFrom,'west')
                orgcoord_vege = [max(vege_tiffinfo.Latlim), min(vege_tiffinfo.Lonlim)];
            elseif strcmp(vege_tiffinfo.ColumnsStartFrom,'north') && strcmp(vege_tiffinfo.RowsStartFrom,'east')
                orgcoord_vege = [max(vege_tiffinfo.Latlim), max(vege_tiffinfo.Lonlim)];
            elseif strcmp(vege_tiffinfo.ColumnsStartFrom,'south') && strcmp(vege_tiffinfo.RowsStartFrom,'west')
                orgcoord_vege = [min(vege_tiffinfo.Latlim), min(vege_tiffinfo.Lonlim)];
            elseif strcmp(vege_tiffinfo.ColumnsStartFrom,'south') && strcmp(vege_tiffinfo.RowsStartFrom,'east')
                orgcoord_vege = [min(vege_tiffinfo.Latlim), max(vege_tiffinfo.Lonlim)];
            end
            % Coordinates of starting grid
            strcoord_vege = [orgcoord_vege(1)+0.5*vege_tiffinfo.DeltaLat, orgcoord_vege(2)+0.5*vege_tiffinfo.DeltaLon];
            % grids' Lat&Lon
            gridlat_vege = (strcoord_vege(1):vege_tiffinfo.DeltaLat:strcoord_vege(1)+(vege_tiffinfo.RasterSize(1)-1)*vege_tiffinfo.DeltaLat+0.5*vege_tiffinfo.DeltaLat);
            gridlon_vege = (strcoord_vege(2):vege_tiffinfo.DeltaLon:strcoord_vege(2)+(vege_tiffinfo.RasterSize(2)-1)*vege_tiffinfo.DeltaLon+0.5*vege_tiffinfo.DeltaLon);
            
            grid_vege = struct;
            for igrid = 1:length(grid_lat)
                
                latlim = [grid_lat(igrid)-halfgridsize,grid_lat(igrid)+halfgridsize];
                lonlim = [grid_lon(igrid)-halfgridsize,grid_lon(igrid)+halfgridsize];
                [polylat,polylon] = maptrimp(watershed_shpinfo.Y, watershed_shpinfo.X, latlim, lonlim);
                
                latmat_trim = gridlat_vege(gridlat_vege>(min(polylat)-abs(vege_tiffinfo.DeltaLat)/2) & gridlat_vege<(max(polylat)+abs(vege_tiffinfo.DeltaLat)/2));
                lonmat_trim = gridlon_vege(gridlon_vege>(min(polylon)-abs(vege_tiffinfo.DeltaLon)/2) & gridlon_vege<(max(polylon)+abs(vege_tiffinfo.DeltaLon)/2));
                %latmat_trim = gridlat_vege(gridlat_vege>min(polylat) & gridlat_vege<max(polylat)); % grid lat within the trimmed polygon
                %lonmat_trim = gridlon_vege(gridlon_vege>min(polylon) & gridlon_vege<max(polylon)); % grid lon within the trimmed polygon
                
                sel_vege  = [];
                sel_vege_area = [];
                for i = 1:length(latmat_trim)
                    
                    for j = 1:length(lonmat_trim)
                        
                        latlim = [latmat_trim(i)-abs(vege_tiffinfo.DeltaLat)/2,latmat_trim(i)+abs(vege_tiffinfo.DeltaLat)/2];
                        lonlim = [lonmat_trim(j)-abs(vege_tiffinfo.DeltaLon)/2,lonmat_trim(j)+abs(vege_tiffinfo.DeltaLon)/2];
                        
                        [polylon2,polylat2] = polybool('intersection',polylon,polylat,[lonlim(1),lonlim(1),lonlim(2),lonlim(2),lonlim(1)],[latlim(1),latlim(2),latlim(2),latlim(1),latlim(1)]);
                        %[polylat2,polylon2] = maptrimp(polylat, polylon,latlim, lonlim); %This doesn't work, giving multi-polygons 

                        if ~isempty(polylat2)
                            sel_vege  = [sel_vege; vege_cover(gridlat_vege==latmat_trim(i),gridlon_vege==lonmat_trim(j))];
                            sel_vege_area = [sel_vege_area; sum(areaint(polylat2,polylon2))];
                        end
                        
                    end
                    
                end
                
                % exclude the part for land cover type 0(water), type 12(bare land), and type 13(urban)
                unique_vege = unique(sel_vege(~(sel_vege==0 | sel_vege==12 | sel_vege==14)));
                vege_fraction = nan(length(unique_vege),2);
                for i = 1:length(unique_vege)
                    vege_fraction(i,1) = unique_vege(i);
                    vege_fraction(i,2) = sum(sel_vege_area(sel_vege==unique_vege(i)))/sum(sel_vege_area);
                end
                vege_fraction(vege_fraction(:,2)==0,:)=[];
                
                grid_vege(igrid).type = vege_fraction(:,1);
                grid_vege(igrid).fraction = vege_fraction(:,2);
                
            end
                      
            % root zone info (this is from the Ed Maurer vege file)
            rootzone_type1  =  [0.10 0.05 1.00 0.45 5.00 0.50];
            rootzone_type2  =  [0.10 0.05 1.00 0.45 5.00 0.50];
            rootzone_type3  =  [0.10 0.05 1.00 0.45 5.00 0.50];  % assumed same as type1
            rootzone_type4  =  [0.10 0.05 1.00 0.45 5.00 0.50];
            rootzone_type5  =  [0.10 0.05 1.00 0.45 5.00 0.50];
            rootzone_type6  =  [0.10 0.10 1.00 0.65 1.00 0.25];
            rootzone_type7  =  [0.10 0.10 1.00 0.65 1.00 0.25];
            rootzone_type8  =  [0.10 0.10 1.00 0.65 0.50 0.25];
            rootzone_type9  =  [0.10 0.10 1.00 0.65 0.50 0.25];
            rootzone_type10 =  [0.10 0.10 1.00 0.70 0.50 0.20];
            rootzone_type11 =  [0.10 0.10 0.75 0.60 0.50 0.30];
            
            % root zone info for 2 layers (this is from Nijssen)
%             rootzone_type1  =  [0.30 0.30 0.70 0.70];
%             rootzone_type2  =  [0.30 0.30 0.70 0.70];
%             rootzone_type3  =  [0.30 0.30 0.70 0.70];
%             rootzone_type4  =  [0.30 0.30 0.70 0.70];
%             rootzone_type5  =  [0.30 0.30 0.70 0.70];
%             rootzone_type6  =  [0.30 0.60 0.70 0.40];
%             rootzone_type7  =  [0.30 0.60 0.70 0.40];
%             rootzone_type8  =  [0.30 0.70 0.70 0.30];
%             rootzone_type9  =  [0.30 0.70 0.70 0.30];
%             rootzone_type10 =  [0.30 0.80 0.70 0.20];
%             rootzone_type11 =  [0.30 0.50 0.70 0.50];


            if handles.checkbox_leafareaindex.Value
                
                soilpar_nijssen = load('.\library\vicparfile\Nijssen_2001\vic_params_global_0.5deg\global_soil_param_new');
                cell_id = soilpar_nijssen(:,2);
                cell_lat = soilpar_nijssen(:,3);
                cell_lon = soilpar_nijssen(:,4);
                
                
                for igrid = 1:length(grid_lat)
 
                    exist_type = grid_vege(igrid).type;
                    
                    euclid_dist = (cell_lat-grid_lat(igrid)).^2+(cell_lon-grid_lon(igrid)).^2;
                    [~,sortind] = sort(euclid_dist);
                    cell_id_sort = cell_id(sortind);

                    grid_lai = nan(length(exist_type),12);                 
                    for igrid2 = 1:length(grid_lat)
                    
                        cell_id_sel = cell_id_sort(igrid2);
                        
                        fid = fopen('.\library\vicparfile\Nijssen_2001\vic_params_global_0.5deg\global_veg_param_new','r');
                        while ~feof(fid)
                            linestr = fgets(fid);
                            id_vegnum = sscanf(linestr,'%d %d');
                            
                            if ~(id_vegnum(1) == cell_id_sel)
                                
                                for i = 1:id_vegnum(2)
                                    fgets(fid);
%                                     vege_type = sscanf(linestr,'%d %*s %*s %*s %*s %*s');
                                    fgets(fid);
%                                     vege_lai  = sscanf(linestr,'%f %f %f %f %f %f %f %f %f %f %f %f');     
                                end
                                
                            else
                                 
                                for i = 1:id_vegnum(2)
                                    linestr = fgets(fid);
                                    vege_type = sscanf(linestr,'%d %*s %*s %*s %*s %*s');
                                    linestr = fgets(fid);
                                    vege_lai  = sscanf(linestr,'%f %f %f %f %f %f %f %f %f %f %f %f');
                                    
                                    if ismember(vege_type,exist_type)
                                        if isnan(grid_lai(exist_type==vege_type,1))
                                            grid_lai(exist_type==vege_type,:) = vege_lai';
                                        end
                                    end
                                    
                                end
                                
                                break;
                                
                            end
                                
                        end
                        fclose(fid);
                        
                        if sum(isnan(grid_lai(:))) == 0
                            grid_vege(igrid).lai = grid_lai;
                            break;
                        end

                    
                    end
                    
                    
                    
                end
                
            end
            
            if handles.checkbox_leafareaindex.Value
                
                for igrid = 1:length(grid_lat)
                    
                    fraction   = grid_vege(igrid).fraction;
                    exist_type = grid_vege(igrid).type;
                    lai_type = grid_vege(igrid).lai;
                    
                    num_type = length(fraction); % The second element of the first low in the vege param file
                    
                    if igrid==1
                        fid = fopen(name_vegefile,'w');
                        fprintf(fid, '%4d %1d\n', [igrid num_type]);
                        fclose(fid);
                    else
                        fid = fopen(name_vegefile,'a');
                        fprintf(fid, '%4d %1d\n', [igrid num_type]);
                        fclose(fid);
                    end
                    
                    % elements for second low (vege type, fraction, root zone input)
                    saveformat_vege = '%6d %1.6f %4.2f %4.2f %4.2f %4.2f %4.2f %4.2f\n';
                    saveformat_lai = '%12.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f\n';
                    for n = 1:num_type
                        
                        eval(['rootzone_input=rootzone_type',num2str(exist_type(n)),';'])
                        
                        second_low = [exist_type(n) fraction(n) rootzone_input];
                        
                        fid = fopen(name_vegefile,'a');
                        fprintf(fid, saveformat_vege, second_low);
                        fprintf(fid, saveformat_lai, lai_type(n,:));
                        fclose(fid);
                    end
                    
                    
                end
                
            else
                
                for igrid = 1:length(grid_lat)
                    
                    fraction   = grid_vege(igrid).fraction;
                    exist_type = grid_vege(igrid).type;
                    
                    num_type = length(fraction); % The second element of the first low in the vege param file
                    
                    if igrid==1
                        fid = fopen(name_vegefile,'w');
                        fprintf(fid, '%4d %1d\n', [igrid num_type]);
                        fclose(fid);
                    else
                        fid = fopen(name_vegefile,'a');
                        fprintf(fid, '%4d %1d\n', [igrid num_type]);
                        fclose(fid);
                    end
                    
                    % elements for second low (vege type, fraction, root zone input)
                    saveformat_vege = '%6d %1.6f %4.2f %4.2f %4.2f %4.2f %4.2f %4.2f\n';
                    for n = 1:num_type
                        
                        eval(['rootzone_input=rootzone_type',num2str(exist_type(n)),';'])
                        
                        second_low = [exist_type(n) fraction(n) rootzone_input];
                        
                        fid = fopen(name_vegefile,'a');
                        fprintf(fid, saveformat_vege, second_low);
                        fclose(fid);
                    end
                    
                end
                
            end
            
        case '500m MCD12Q1 Global Land Cover'
            
            % Global vegetation cover information from "AVHRR_1km_LANDCOVER_1981_1994.GLOBAL"
            [vege_cover, vege_tiffinfo] = geotiffread('.\library\vege\MCD12Q1\MCD12Q1_V51_LC1.2012.tif');
            % Coordinates of origin (edge)
            if strcmp(vege_tiffinfo.ColumnsStartFrom,'north') && strcmp(vege_tiffinfo.RowsStartFrom,'west')
                orgcoord_vege = [max(vege_tiffinfo.Latlim), min(vege_tiffinfo.Lonlim)];
            elseif strcmp(vege_tiffinfo.ColumnsStartFrom,'north') && strcmp(vege_tiffinfo.RowsStartFrom,'east')
                orgcoord_vege = [max(vege_tiffinfo.Latlim), max(vege_tiffinfo.Lonlim)];
            elseif strcmp(vege_tiffinfo.ColumnsStartFrom,'south') && strcmp(vege_tiffinfo.RowsStartFrom,'west')
                orgcoord_vege = [min(vege_tiffinfo.Latlim), min(vege_tiffinfo.Lonlim)];
            elseif strcmp(vege_tiffinfo.ColumnsStartFrom,'south') && strcmp(vege_tiffinfo.RowsStartFrom,'east')
                orgcoord_vege = [min(vege_tiffinfo.Latlim), max(vege_tiffinfo.Lonlim)];
            end
            % Coordinates of starting grid
            strcoord_vege = [orgcoord_vege(1)+0.5*vege_tiffinfo.DeltaLat, orgcoord_vege(2)+0.5*vege_tiffinfo.DeltaLon];
            % grids' Lat&Lon
            gridlat_vege = (strcoord_vege(1):vege_tiffinfo.DeltaLat:strcoord_vege(1)+(vege_tiffinfo.RasterSize(1)-1)*vege_tiffinfo.DeltaLat+0.5*vege_tiffinfo.DeltaLat);
            gridlon_vege = (strcoord_vege(2):vege_tiffinfo.DeltaLon:strcoord_vege(2)+(vege_tiffinfo.RasterSize(2)-1)*vege_tiffinfo.DeltaLon+0.5*vege_tiffinfo.DeltaLon);
            
            grid_vege = struct;
            for igrid = 1:length(grid_lat)
                
                latlim = [grid_lat(igrid)-halfgridsize,grid_lat(igrid)+halfgridsize];
                lonlim = [grid_lon(igrid)-halfgridsize,grid_lon(igrid)+halfgridsize];
                [polylat,polylon] = maptrimp(watershed_shpinfo.Y, watershed_shpinfo.X, latlim, lonlim);
                
                latmat_trim = gridlat_vege(gridlat_vege>(min(polylat)-abs(vege_tiffinfo.DeltaLat)/2) & gridlat_vege<(max(polylat)+abs(vege_tiffinfo.DeltaLat)/2));
                lonmat_trim = gridlon_vege(gridlon_vege>(min(polylon)-abs(vege_tiffinfo.DeltaLon)/2) & gridlon_vege<(max(polylon)+abs(vege_tiffinfo.DeltaLon)/2));
                
                sel_vege  = [];
                sel_vege_area = [];
                for i = 1:length(latmat_trim)
                    
                    for j = 1:length(lonmat_trim)
                        
                        latlim = [latmat_trim(i)-abs(vege_tiffinfo.DeltaLat)/2,latmat_trim(i)+abs(vege_tiffinfo.DeltaLat)/2];
                        lonlim = [lonmat_trim(j)-abs(vege_tiffinfo.DeltaLon)/2,lonmat_trim(j)+abs(vege_tiffinfo.DeltaLon)/2];
                        
                        [polylon2,polylat2] = polybool('intersection',polylon,polylat,[lonlim(1),lonlim(1),lonlim(2),lonlim(2),lonlim(1)],[latlim(1),latlim(2),latlim(2),latlim(1),latlim(1)]);
                        %[polylat2,polylon2] = maptrimp(polylat, polylon, latlim, lonlim);
                        
                        if ~isempty(polylat2)
                            sel_vege  = [sel_vege; vege_cover(gridlat_vege==latmat_trim(i),gridlon_vege==lonmat_trim(j))];
                            sel_vege_area = [sel_vege_area; sum(areaint(polylat2,polylon2))];
                        end
                        
                    end
                    
                end
                
                % exclude land cover types not supported by the vegetation library:
                % water(0), Permanent wetlands(11), Urban and built-up(13), Cropland/Natural vegetation mosaic(14), Snow and Ice(15), Barren or sparsely vegetated(16), Unclassified(254), Fill value(255)
                unique_vege = unique(sel_vege(~(sel_vege==0 | sel_vege==11 | sel_vege==13  | sel_vege==14  | sel_vege==15  | sel_vege==16  | sel_vege==254  | sel_vege==255)));
                vege_fraction = nan(length(unique_vege),2);
                for i = 1:length(unique_vege)
                    vege_fraction(i,1) = unique_vege(i);
                    vege_fraction(i,2) = sum(sel_vege_area(sel_vege==unique_vege(i)))/sum(sel_vege_area);
                end
                vege_fraction(vege_fraction(:,2)==0,:)=[];
                
                vege_fraction_modis = vege_fraction(:,1); % to match modis vege id to the id in the veglib
                vege_fraction_modis(vege_fraction(:,1)==8) = 6;
                vege_fraction_modis(vege_fraction(:,1)==9) = 7;
                vege_fraction_modis(vege_fraction(:,1)==6) = 8;
                vege_fraction_modis(vege_fraction(:,1)==7) = 9;
                vege_fraction_modis(vege_fraction(:,1)==12) = 11;
                
                
                grid_vege(igrid).type = vege_fraction_modis;
                grid_vege(igrid).fraction = vege_fraction(:,2);
                
            end
            
            % root zone info (this is from the Ed Maurer vege file)
            rootzone_type1  =  [0.10 0.05 1.00 0.45 5.00 0.50];
            rootzone_type2  =  [0.10 0.05 1.00 0.45 5.00 0.50];
            rootzone_type3  =  [0.10 0.05 1.00 0.45 5.00 0.50];  % assumed same as type1
            rootzone_type4  =  [0.10 0.05 1.00 0.45 5.00 0.50];
            rootzone_type5  =  [0.10 0.05 1.00 0.45 5.00 0.50];
            rootzone_type6  =  [0.10 0.10 1.00 0.65 1.00 0.25];
            rootzone_type7  =  [0.10 0.10 1.00 0.65 1.00 0.25];
            rootzone_type8  =  [0.10 0.10 1.00 0.65 0.50 0.25];
            rootzone_type9  =  [0.10 0.10 1.00 0.65 0.50 0.25];
            rootzone_type10 =  [0.10 0.10 1.00 0.70 0.50 0.20];
            rootzone_type11 =  [0.10 0.10 0.75 0.60 0.50 0.30];
            
            
            if handles.checkbox_leafareaindex.Value
                
                soilpar_nijssen = load('.\library\vicparfile\Nijssen_2001\vic_params_global_0.5deg\global_soil_param_new');
                cell_id = soilpar_nijssen(:,2);
                cell_lat = soilpar_nijssen(:,3);
                cell_lon = soilpar_nijssen(:,4);
                
                
                for igrid = 1:length(grid_lat)
                    
                    exist_type = grid_vege(igrid).type;
                    
                    euclid_dist = (cell_lat-grid_lat(igrid)).^2+(cell_lon-grid_lon(igrid)).^2;
                    [~,sortind] = sort(euclid_dist);
                    cell_id_sort = cell_id(sortind);
                    
                    grid_lai = nan(length(exist_type),12);
                    for igrid2 = 1:length(grid_lat)
                        
                        cell_id_sel = cell_id_sort(igrid2);
                        
                        fid = fopen('.\library\vicparfile\Nijssen_2001\vic_params_global_0.5deg\global_veg_param_new','r');
                        while ~feof(fid)
                            linestr = fgets(fid);
                            id_vegnum = sscanf(linestr,'%d %d');
                            
                            if ~(id_vegnum(1) == cell_id_sel)
                                
                                for i = 1:id_vegnum(2)
                                    fgets(fid);
                                    %                                     vege_type = sscanf(linestr,'%d %*s %*s %*s %*s %*s');
                                    fgets(fid);
                                    %                                     vege_lai  = sscanf(linestr,'%f %f %f %f %f %f %f %f %f %f %f %f');
                                end
                                
                            else
                                
                                for i = 1:id_vegnum(2)
                                    linestr = fgets(fid);
                                    vege_type = sscanf(linestr,'%d %*s %*s %*s %*s %*s');
                                    linestr = fgets(fid);
                                    vege_lai  = sscanf(linestr,'%f %f %f %f %f %f %f %f %f %f %f %f');
                                    
                                    if ismember(vege_type,exist_type)
                                        if isnan(grid_lai(exist_type==vege_type,1))
                                            grid_lai(exist_type==vege_type,:) = vege_lai';
                                        end
                                    end
                                    
                                end
                                
                                break;
                                
                            end
                            
                        end
                        fclose(fid);
                        
                        if sum(isnan(grid_lai(:))) == 0
                            grid_vege(igrid).lai = grid_lai;
                            break;
                        end
                        
                        
                    end
                    
                    
                    
                end
                
            end
            
            if handles.checkbox_leafareaindex.Value
                
                for igrid = 1:length(grid_lat)
                    
                    fraction   = grid_vege(igrid).fraction;
                    exist_type = grid_vege(igrid).type;
                    lai_type = grid_vege(igrid).lai;
                    
                    num_type = length(fraction); % The second element of the first low in the vege param file
                    
                    if igrid==1
                        fid = fopen(name_vegefile,'w');
                        fprintf(fid, '%4d %1d\n', [igrid num_type]);
                        fclose(fid);
                    else
                        fid = fopen(name_vegefile,'a');
                        fprintf(fid, '%4d %1d\n', [igrid num_type]);
                        fclose(fid);
                    end
                    
                    % elements for second low (vege type, fraction, root zone input)
                    saveformat_vege = '%6d %1.6f %4.2f %4.2f %4.2f %4.2f %4.2f %4.2f\n';
                    saveformat_lai = '%12.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f %1.3f\n';
                    for n = 1:num_type
                        
                        eval(['rootzone_input=rootzone_type',num2str(exist_type(n)),';'])
                        
                        second_low = [exist_type(n) fraction(n) rootzone_input];
                        
                        fid = fopen(name_vegefile,'a');
                        fprintf(fid, saveformat_vege, second_low);
                        fprintf(fid, saveformat_lai, lai_type(n,:));
                        fclose(fid);
                    end
                    
                    
                end
                
            else
                
                for igrid = 1:length(grid_lat)
                    
                    fraction   = grid_vege(igrid).fraction;
                    exist_type = grid_vege(igrid).type;
                    
                    num_type = length(fraction); % The second element of the first low in the vege param file
                    
                    if igrid==1
                        fid = fopen(name_vegefile,'w');
                        fprintf(fid, '%4d %1d\n', [igrid num_type]);
                        fclose(fid);
                    else
                        fid = fopen(name_vegefile,'a');
                        fprintf(fid, '%4d %1d\n', [igrid num_type]);
                        fclose(fid);
                    end
                    
                    % elements for second low (vege type, fraction, root zone input)
                    saveformat_vege = '%6d %1.6f %4.2f %4.2f %4.2f %4.2f %4.2f %4.2f\n';
                    for n = 1:num_type
                        
                        eval(['rootzone_input=rootzone_type',num2str(exist_type(n)),';'])
                        
                        second_low = [exist_type(n) fraction(n) rootzone_input];
                        
                        fid = fopen(name_vegefile,'a');
                        fprintf(fid, saveformat_vege, second_low);
                        fclose(fid);
                    end
                    
                end
                
            end
            
            
    end
    e_time3 = toc;
    set(handles.text_status_genvegefile,'BackgroundColor','r')
    set(handles.text_status_genvegefile,'String',['Gen Vege File (',num2str((e_time3-e_time2)/60,'%1.1f'),'min)'])
    set(handles.text_status_genvegefile,'ForegroundColor','w')
    
    
    % Grid's Rout Parameter
    set(handles.text_status_genroutfile,'ForegroundColor','r')
    set(handles.text_status_genroutfile,'FontAngle','normal')
    pause(0.5)
    
    % FlowLength_tiff raster file
    [Z_flen,flen_tiffinfo] = geotiffread(FlowLength_tiff);
    % Coordinates of origin
    if strcmp(flen_tiffinfo.ColumnsStartFrom,'north') && strcmp(flen_tiffinfo.RowsStartFrom,'west')
        orgcoord_flen = [max(flen_tiffinfo.Latlim), min(flen_tiffinfo.Lonlim)];
    elseif strcmp(flen_tiffinfo.ColumnsStartFrom,'north') && strcmp(flen_tiffinfo.RowsStartFrom,'east')
        orgcoord_flen = [max(flen_tiffinfo.Latlim), max(flen_tiffinfo.Lonlim)];
    elseif strcmp(flen_tiffinfo.ColumnsStartFrom,'south') && strcmp(flen_tiffinfo.RowsStartFrom,'west')
        orgcoord_flen = [min(flen_tiffinfo.Latlim), min(flen_tiffinfo.Lonlim)];
    elseif strcmp(flen_tiffinfo.ColumnsStartFrom,'south') && strcmp(flen_tiffinfo.RowsStartFrom,'east')
        orgcoord_flen = [min(flen_tiffinfo.Latlim), max(flen_tiffinfo.Lonlim)];
    end
    % Coordinates of start flowlen grid
    strcoord_flen = [orgcoord_flen(1)+0.5*flen_tiffinfo.DeltaLat, orgcoord_flen(2)+0.5*flen_tiffinfo.DeltaLon];
    % flowlen grids' Lat&Lon
    gridlat_flen = (strcoord_flen(1):flen_tiffinfo.DeltaLat:strcoord_flen(1)+(flen_tiffinfo.RasterSize(1)-1)*flen_tiffinfo.DeltaLat+0.5*flen_tiffinfo.DeltaLat);
    gridlon_flen = (strcoord_flen(2):flen_tiffinfo.DeltaLon:strcoord_flen(2)+(flen_tiffinfo.RasterSize(2)-1)*flen_tiffinfo.DeltaLon+0.5*flen_tiffinfo.DeltaLon);
    gridlat_flen_mat = repmat(gridlat_flen',1,length(gridlon_flen));
    gridlon_flen_mat = repmat(gridlon_flen,length(gridlat_flen),1);
    
    
    grid_flen = nan(length(grid_lat),1);
    for igrid = 1:length(grid_lat)
        
        latlim = [grid_lat(igrid)-halfgridsize,grid_lat(igrid)+halfgridsize];
        lonlim = [grid_lon(igrid)-halfgridsize,grid_lon(igrid)+halfgridsize];
        
        [polylat,polylon] = maptrimp(watershed_shpinfo.Y, watershed_shpinfo.X, latlim, lonlim);
        sel_Z = Z_flen(inpolygon(gridlon_flen_mat,gridlat_flen_mat,polylon,polylat));
        sel_flen = double(sel_Z);
        sel_flen(sel_flen<-100)=[];
        
        if isempty(sel_flen)
            e_dist = (gridlon_flen_mat-polylon(1)).^2+(gridlat_flen_mat-polylat(1)).^2;
            [~,min_ind] = sort(e_dist(:));
            n = 1;
            for i=1:length(min_ind)
                Z_flen_sel = double(Z_flen(min_ind(n)));
                if Z_flen_sel<-100; Z_flen_sel=nan; end
                if ~isnan(Z_flen_sel)
                    grid_flen(igrid) = deg2km(Z_flen_sel)*1000;
                    break;
                end
                n = n+1;
            end
            
        else
            grid_flen(igrid) = deg2km(min(sel_flen))*1000;
        end
        
    end
    
    vel_rout    = repmat(1.5,size(grid_lat));
    diff_rout   = repmat(800,size(grid_lat));
    K_rout      = repmat(0.5,size(grid_lat));
    N_rout      = repmat(10,size(grid_lat));
    grid_cluster = (1:length(grid_lat))';
    
    savedata_rout = [grid_lat, grid_lon, grid_area, grid_flen, N_rout, K_rout, vel_rout, diff_rout, grid_cluster];
    
    fid = fopen(name_routfile,'w');
    if strcmp(spatialres,'0.0625')
        fprintf(fid, '%2.5f\t%2.5f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n', savedata_rout');
    elseif strcmp(spatialres,'0.125')
        fprintf(fid, '%2.4f\t%2.4f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n', savedata_rout');
    elseif strcmp(spatialres,'0.25')
        fprintf(fid, '%2.3f\t%2.3f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n', savedata_rout');
    elseif strcmp(spatialres,'0.5')
        fprintf(fid, '%2.2f\t%2.2f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n', savedata_rout');
    elseif strcmp(spatialres,'1.0')
        fprintf(fid, '%2.1f\t%2.1f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n', savedata_rout');
    end
    fclose(fid);
    
    e_time4 = toc;
    set(handles.text_status_genroutfile,'BackgroundColor','r')
    set(handles.text_status_genroutfile,'String',['Gen Rout File (',num2str((e_time4-e_time3)/60,'%1.1f'),'min)'])
    set(handles.text_status_genroutfile,'ForegroundColor','w')
    
    
    
    % Elevation Band Parameter File
    if DoYouWantHRUelevBand
        
        set(handles.text_status_genelevfile,'ForegroundColor','r')
        set(handles.text_status_genelevfile,'FontAngle','normal')
        pause(0.5)
        
        grid_band_area_tot = zeros(length(grid_lat),length(elevbandmat));
        grid_band_elev_tot = zeros(length(grid_lat),length(elevbandmat));
        for igrid = 1:length(grid_lat)
            
            latlim = [grid_lat(igrid)-halfgridsize,grid_lat(igrid)+halfgridsize];
            lonlim = [grid_lon(igrid)-halfgridsize,grid_lon(igrid)+halfgridsize];
            
            [polylat,polylon] = maptrimp(watershed_shpinfo.Y, watershed_shpinfo.X, latlim, lonlim);
            sel_Z = Z_dem(inpolygon(gridlon_dem_mat,gridlat_dem_mat,polylon,polylat));
            sel_dem = double(sel_Z);
            sel_dem(sel_dem>10000 | sel_dem<-10000)=[];
            
            if isempty(sel_dem)
                e_dist = (gridlon_dem_mat-polylon(1)).^2+(gridlat_dem_mat-polylat(1)).^2;
                [~,min_ind] = sort(e_dist(:));
                n = 1;
                for i=1:length(min_ind)
                    Z_dem_sel = double(Z_dem(min_ind(n)));
                    if Z_dem_sel>10000 || Z_dem_sel<-10000; Z_dem_sel=nan; end
                    if ~isnan(Z_dem_sel)
%                         grid_elev(igrid) = Z_dem_sel;
                        break;
                    end
                    n = n+1;
                end
                
                grid_band_area = zeros(length(elevbandmat),1);
                grid_band_elev = nan(length(elevbandmat),1);
                for ielev = 1:length(elevbandmat)
                    if Z_dem_sel >= elevbandmat(ielev) && Z_dem_sel < elevbandmat(ielev)+elevband;
                        grid_band_area(ielev) = 1;
                        grid_band_elev(ielev) = Z_dem_sel;
                    end
                end
                grid_band_area_tot(igrid,:) = grid_band_area;
                grid_band_elev_tot(igrid,:) = grid_band_elev;
                
            else                
%                 grid_elev(igrid) = mean(sel_dem);
                grid_band_area = zeros(length(elevbandmat),1);
                grid_band_elev = nan(length(elevbandmat),1);
                for ielev = 1:length(elevbandmat)
                    sel_dem_band = sel_dem(sel_dem >= elevbandmat(ielev) & sel_dem < elevbandmat(ielev)+elevband);
                    band_area = length(sel_dem_band)/length(sel_dem);
                    grid_band_area(ielev) = band_area;
                    grid_band_elev(ielev) = mean(sel_dem_band);
                end
                grid_band_area_tot(igrid,:) = grid_band_area;
                grid_band_elev_tot(igrid,:) = grid_band_elev;
                
            end
            
        end
        
        dummycol = sum(grid_band_area_tot,1)==0;
        grid_band_area_tot(:,dummycol)=[];
        grid_band_elev_tot(:,dummycol)=[];
        
        grid_band_elev_tot(isnan(grid_band_elev_tot))=0;
        
        elevband_content = [(1:length(grid_lat))',grid_band_area_tot,grid_band_elev_tot,grid_band_area_tot];
        
        saveformat1 = '%1.0f\t';
        saveformat2 = [];
        saveformat3 = [];
        for i=1:size(grid_band_area_tot,2)
            saveformat2 = [saveformat2,'%10.6f\t'];
            saveformat3 = [saveformat3,'%6.1f\t'];
        end
        saveformat_elev = [saveformat1,saveformat2,saveformat3,saveformat2(1:end-2),'\n'];
        fid = fopen(name_elevbandfile,'w');
        fprintf(fid, saveformat_elev, elevband_content');
        fclose(fid);
        
        e_time5 = toc;
        set(handles.text_status_genelevfile,'BackgroundColor','r')
        set(handles.text_status_genelevfile,'String',['Gen Elev File (',num2str((e_time5-e_time4)/60,'%1.1f'),'min)'])
        set(handles.text_status_genelevfile,'ForegroundColor','w')  
        
    end
    pause(0.5)
    
    e_time_tot = toc;
    set(handles.text_genfile_etime,'String',['Total Elapsed Time: ',num2str(e_time_tot/60,'%1.1f'),' min'])
    set(handles.text_genfile_etime,'Visible','on')
    
end



%%%%%%%%%%%%%%%%%%%%%%%%%%   Global (Primary)  %%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in radiobutton_primary.
function radiobutton_primary_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1    
    set(handles.uipanel_primary,'visible','on')
    
    set(handles.radiobutton_advanced,'Value',0)
    set(handles.uipanel_advanced,'visible','off')
    
    set(handles.radiobutton_vicoutput,'Value',0)
    set(handles.uipanel_configureVICoutput,'visible','off')
    
elseif get(hObject,'Value') == 0 && handles.radiobutton_advanced.Value == 0 && handles.radiobutton_vicoutput.Value == 0
    set(handles.radiobutton_primary,'Value',1)
end


function pushbutton_simulationpar_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/simpar_description.m')

function pushbutton_precipitationpar_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/rainsnowpar_description.m')

function pushbutton_energybalpar_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/energybalpar_description.m')

function pushbutton_landsurface_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/landsurfacepar_description.m')

function pushbutton_route_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/routingpar_description.m')

function pushbutton_output_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/outputpar_description.m')

function pushbutton_forcing_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/forcingfile_description.m')

function pushbutton_forcetype_help_Callback(hObject, eventdata, handles)
txt_description1 = {...
    underline('Variable',16),' ' ...
    'AIR\_TEMP','ALBEDO','CHANNEL\_IN' ...
    'CATM','CRAINF','CSNOWF','DENSITY' ...
    'FDIR','LONGWAVE','LSRAINF','LSSNOWF'...
    'PREC','PRESSURE','QAIR','RAINF' ...
    'REL\_HUMID','SHORTWAVE','SNOWF','TMAX' ...
    'TMIN','TSKC','VEGCOVER','VP' ...
    'WIND','WIND\_E','WIND\_N','SKIP' ...
    };
txt_description2 = {...
    underline('Description',16),' ' ...
    'Average air temperature',...
    'Surface albedo' ...
    'Incoming channel flow (total volume over the time step)' ...
    'Atmospheric CO2 mixing ratio' ...
    'Convective rainfall' ...
    'Convective snowfall' ...
    'Atmospheric density' ...
    'Fraction of incoming shortwave that is direct' ...
    'Incoming longwave radiation' ...
    'Large-scale rainfall' ...
    'Large-scale snowfall'...
    'Total precipitation (rain and snow)' ...
    'Atmospheric pressure' ...
    'Specific humidity' ...
    'Rainfall (convective and large-scale)' ...
    'Relative humidity' ...
    'Incoming shortwave' ...
    'Snowfall (convective and large-scale)' ...
    'Maximum daily temperature' ...
    'Minimum daily temperature' ...
    'Cloud cover' ...
    'partial veg cover fraction' ...
    'Vapor pressure' ...
    'Wind speed' ...
    'Zonal component of wind speed' ...
    'Meridional component of wind speed' ...
    'Place holder for unused data columns' ...
    };
txt_description3 = {...
    underline('Units',16),' ' ...
    'C (ALMA\_INPUT:K)','fraction','m^3','ppm','mm (ALMA\_INPUT:mm/s)' ...
    'mm (ALMA\_INPUT:mm/s)','kg/m^3','fraction','W/m^2','mm (ALMA\_INPUT:mm/s)' ...
    'mm (ALMA\_INPUT:mm/s)','mm (ALMA\_INPUT:mm/s)','kPa (ALMA\_INPUT:Pa)' ...
    'kg/kg','mm (ALMA\_INPUT:mm/s)','fraction','W/m^2','mm (ALMA\_INPUT:mm/s)' ...
    'C (ALMA\_INPUT:K)','C (ALMA\_INPUT:K)','fraction','fraction' ...
    'kPa (ALMA\_INPUT:Pa)','m/s','m/s','m/s','Non-Data' ...
    };
hFig = figure(...
        'Units', 'normalized', ...
        'outerposition',[0.3 0.25 0.4 0.5],...
        'BusyAction', 'queue','WindowStyle', 'normal','Resize','on', ...
        'CreateFcn','','NumberTitle','off','IntegerHandle','off', ...
        'MenuBar', 'none','Visible','on',...
        'name','FROCE_TYPE Description');
hAx1 = axes('Parent',hFig, 'XLim',[0 1], 'YLim',[0 1], 'XTick',[], 'YTick',[],...
    'Box','on', 'Layer','top','Units','normalized', 'Position',[0 0 1 1]);
text(0.05, 0.5, txt_description1,'Parent',hAx1);
text(0.25, 0.5, txt_description2,'Parent',hAx1);
text(0.7, 0.5, txt_description3,'Parent',hAx1);

function U=underline(S,fns)
if nargin<2
    fns = 10;
end
p='';
for n = 1:length(S)
    p=[p '\_\_'];
end
U =['_{\fontsize{' num2str(fns) '}^{' S '}_{^{' p '}}}'];



function edit_startyear_Callback(hObject, eventdata, handles)
inputnum = str2double(get(hObject,'String'));
if rem(inputnum,floor(inputnum))==0 && inputnum > 0
    set(handles.text_STARTYEAR,'ForegroundColor','k')
else
    set(hObject,'string','')
    set(handles.text_STARTYEAR,'ForegroundColor','r')
end
guidata(hObject, handles);
function edit_startyear_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function edit_startmonth_Callback(hObject, eventdata, handles)
inputnum = str2double(get(hObject,'String'));
if rem(inputnum,floor(inputnum))==0 && inputnum > 0 && inputnum < 13
    set(handles.text_STARTMONTH,'ForegroundColor','k')
else
    set(hObject,'string','')
    set(handles.text_STARTMONTH,'ForegroundColor','r')
end
guidata(hObject, handles);
function edit_startmonth_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function edit_startday_Callback(hObject, eventdata, handles)
inputnum = str2double(get(hObject,'String'));
if rem(inputnum,floor(inputnum))==0 && inputnum > 0 && inputnum < 32
    set(handles.text_STARTDAY,'ForegroundColor','k')
else
    set(hObject,'string','')
    set(handles.text_STARTDAY,'ForegroundColor','r')
end
guidata(hObject, handles);
function edit_startday_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function edit_endyear_Callback(hObject, eventdata, handles)
inputnum = str2double(get(hObject,'String'));
if rem(inputnum,floor(inputnum))==0 && inputnum > 0
    set(handles.text_ENDYEAR,'ForegroundColor','k')
else
    set(hObject,'string','')
    set(handles.text_ENDYEAR,'ForegroundColor','r')
end
guidata(hObject, handles);
function edit_endyear_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function edit_endmonth_Callback(hObject, eventdata, handles)
inputnum = str2double(get(hObject,'String'));
if rem(inputnum,floor(inputnum))==0 && inputnum > 0 && inputnum < 13
    set(handles.text_ENDMONTH,'ForegroundColor','k')
else
    set(hObject,'string','')
    set(handles.text_ENDMONTH,'ForegroundColor','r')
end
guidata(hObject, handles);
function edit_endmonth_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end

function edit_endday_Callback(hObject, eventdata, handles)
inputnum = str2double(get(hObject,'String'));
if rem(inputnum,floor(inputnum))==0 && inputnum > 0 && inputnum < 32
    set(handles.text_ENDDAY,'ForegroundColor','k')
else
    set(hObject,'string','')
    set(handles.text_ENDDAY,'ForegroundColor','r')
end
guidata(hObject, handles);
function edit_endday_CreateFcn(hObject, eventdata, handles)
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


function popupmenu_COMPUTE_TREELINE_Callback(hObject, eventdata, handles)
selopt = get(hObject,'Value');
selopt_str = get(hObject,'String');
if strcmp(deblank(selopt_str(selopt,:)),'veg class id')
    set(handles.edit_VEG_CLASS_ID,'enable','on')
    set(handles.popupmenu_JULY_TAVG_SUPPLIED,'Value',2)
elseif strcmp(deblank(selopt_str(selopt,:)),'FALSE')
    set(handles.edit_VEG_CLASS_ID,'enable','off')
    set(handles.popupmenu_JULY_TAVG_SUPPLIED,'Value',1)
end


function edit_snow_band_Callback(hObject, eventdata, handles)
if round(str2double(get(hObject,'String'))) > 1
    set(hObject,'String',num2str(round(str2double(get(hObject,'String')))))
    set(handles.text_snow_band_file, 'enable','on')
    set(handles.edit_snow_band_file, 'enable','on')
    set(handles.pushbutton_snowbandfile_search, 'enable','on')
else
    set(hObject,'String','1')
    set(handles.text_snow_band_file, 'enable','off')
    set(handles.edit_snow_band_file, 'enable','off')
    set(handles.pushbutton_snowbandfile_search, 'enable','off')
end
guidata(hObject, handles);


function radiobutton_SNOW_BAND_FILE_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.edit_snow_band_file, 'enable','on')
    set(handles.pushbutton_snowbandfile_search, 'enable','on')
else
    set(handles.edit_snow_band_file, 'enable','off')
    set(handles.pushbutton_snowbandfile_search, 'enable','off')
end
guidata(hObject, handles);


function edit_snow_band_file_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_snow_band_file,'FontAngle','normal')
    set(handles.edit_snow_band_file,'ForegroundColor','k')
%     set(handles.text_snow_band_file,'ForegroundColor','k')

    filedir = get(hObject,'String');
    bandfile_content = load(filedir);
    max_bandnum = (size(bandfile_content,2)-1)/3;
    set(handles.edit_snow_band,'String',num2str(max_bandnum))

    
end
if isempty(get(hObject,'String'))
%     set(handles.text_snow_band_file,'ForegroundColor','r')
end


function pushbutton_snowbandfile_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Select Snow Band Parameter File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_snow_band_file,'string',filedir)
    set(handles.edit_snow_band_file,'FontAngle','normal')
    set(handles.edit_snow_band_file,'ForegroundColor','k')

    bandfile_content = load(filedir);
    max_bandnum = (size(bandfile_content,2)-1)/3;
    set(handles.edit_snow_band,'String',num2str(max_bandnum))
    
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

% Select Soil Parameter File
function pushbutton_soilfile_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Select Soil Parameter File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_soilparfile,'string',filedir)
    set(handles.edit_soilparfile,'FontAngle','normal')
    set(handles.edit_soilparfile,'ForegroundColor','k')
    set(handles.text_SOIL,'ForegroundColor','k')
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

function edit_soilparfile_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_soilparfile,'FontAngle','normal')
    set(handles.edit_soilparfile,'ForegroundColor','k')
    set(handles.text_SOIL,'ForegroundColor','k')
end
if isempty(get(hObject,'String'))
    set(handles.text_SOIL,'ForegroundColor','r')
end

% Select Vegetation Parameter File
function pushbutton_vegparamfile_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Select Vegetation Parameter File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_vegeparfile,'string',filedir)
    set(handles.edit_vegeparfile,'FontAngle','normal')
    set(handles.edit_vegeparfile,'ForegroundColor','k')
    set(handles.text_VEGPARAM,'ForegroundColor','k')
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

function edit_vegeparfile_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_vegeparfile,'FontAngle','normal')
    set(handles.edit_vegeparfile,'ForegroundColor','k')
    set(handles.text_VEGPARAM,'ForegroundColor','k')
end
if isempty(get(hObject,'String'))
    set(handles.text_VEGPARAM,'ForegroundColor','r')
end

% Select Vegetation Library Parameter File
function pushbutton_veglibfile_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Select Vegetation Parameter File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_vegelibparfile,'string',filedir)
    set(handles.edit_vegelibparfile,'FontAngle','normal')
    set(handles.edit_vegelibparfile,'ForegroundColor','k')
    set(handles.text_VEGLIB,'ForegroundColor','k')
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

function edit_vegelibparfile_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_vegelibparfile,'FontAngle','normal')
    set(handles.edit_vegelibparfile,'ForegroundColor','k')
    set(handles.text_VEGLIB,'ForegroundColor','k')
end
if isempty(get(hObject,'String'))
    set(handles.text_VEGLIB,'ForegroundColor','r')
end



function popupmenu_LAI_SRC_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    set(handles.popupmenu_VEGPARAM_LAI,'Value',2)
elseif get(hObject,'Value') == 2
    set(handles.popupmenu_VEGPARAM_LAI,'Value',1)
end



function popupmenu_ALB_SRC_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    set(handles.popupmenu_VEGPARAM_ALB,'Value',2)
elseif get(hObject,'Value') == 2
    set(handles.popupmenu_VEGPARAM_ALB,'Value',1)
end


function popupmenu_VEGCOVER_SRC_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    set(handles.popupmenu_VEGPARAM_VEGCOVER,'Value',2)
elseif get(hObject,'Value') == 2
    set(handles.popupmenu_VEGPARAM_VEGCOVER,'Value',1)
end


% Select Routing Parameter File
function pushbutton_routfile_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Select Routing Parameter File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_routparfile,'string',filedir)
    set(handles.edit_routparfile,'FontAngle','normal')
    set(handles.edit_routparfile,'ForegroundColor','k')
    set(handles.text_ROUTE,'ForegroundColor','k')
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

function edit_routparfile_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_routparfile,'FontAngle','normal')
    set(handles.edit_routparfile,'ForegroundColor','k')
    set(handles.text_ROUTE,'ForegroundColor','k')
end
if isempty(get(hObject,'String'))
    set(handles.text_ROUTE,'ForegroundColor','r')
end


% Routing Output Directory
function pushbutton_routoutdir_search_Callback(hObject, eventdata, handles)
filedir = uigetdir(handles.lastvisitdir,'Routing Output Directory');
if ischar(filedir)
    set(handles.edit_routoutdir,'string',filedir)
    set(handles.edit_routoutdir,'FontAngle','normal')
    set(handles.edit_routoutdir,'ForegroundColor','k')
    if ~isempty(get(handles.edit_routoutname,'String'))&&~strcmp(get(handles.edit_routoutname,'FontAngle'),'italic')
        set(handles.text_OUTPUTDIR_NAME,'ForegroundColor','k')
    end
    handles.lastvisitdir = filedir;
end
guidata(hObject,handles);

function edit_routoutdir_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_routoutdir,'FontAngle','normal')
    set(handles.edit_routoutdir,'ForegroundColor','k')
    if ~isempty(get(handles.edit_routoutname,'String'))&&~strcmp(get(handles.edit_routoutname,'FontAngle'),'italic')
        set(handles.text_OUTPUTDIR_NAME,'ForegroundColor','k')
    end
end
if isempty(get(hObject,'String'))
    set(handles.text_OUTPUTDIR_NAME,'ForegroundColor','r')
end

function edit_routoutname_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_routoutname,'FontAngle','normal')
    set(handles.edit_routoutname,'ForegroundColor','k')
    if ~isempty(get(handles.edit_routoutdir,'String'))&&~strcmp(get(handles.edit_routoutdir,'FontAngle'),'italic')
        set(handles.text_OUTPUTDIR_NAME,'ForegroundColor','k')
    end
end
if isempty(get(hObject,'String'))
    set(handles.text_OUTPUTDIR_NAME,'ForegroundColor','r')
end


% VIC Output Directory
function pushbutton_vicoutdir_search_Callback(hObject, eventdata, handles)
filedir = uigetdir(handles.lastvisitdir,'VIC Output Directory');
if ischar(filedir)
    set(handles.edit_resultdir,'string',filedir)
    set(handles.edit_resultdir,'FontAngle','normal')
    set(handles.edit_resultdir,'ForegroundColor','k')
    set(handles.text_RESULT_DIR,'ForegroundColor','k')
    if ~isempty(get(handles.edit_result_prefix,'String'))&&~strcmp(get(handles.edit_result_prefix,'FontAngle'),'italic')
        set(handles.text_RESULT_DIR,'ForegroundColor','k')
    end
    handles.lastvisitdir = filedir;
end
guidata(hObject,handles);

function edit_resultdir_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_resultdir,'FontAngle','normal')
    set(handles.edit_resultdir,'ForegroundColor','k')
    if ~isempty(get(handles.edit_result_prefix,'String'))&&~strcmp(get(handles.edit_result_prefix,'FontAngle'),'italic')
        set(handles.text_RESULT_DIR,'ForegroundColor','k')
    end
end
if isempty(get(hObject,'String'))
    set(handles.text_RESULT_DIR,'ForegroundColor','r')
end


function edit_result_prefix_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_result_prefix,'FontAngle','normal')
    set(handles.edit_result_prefix,'ForegroundColor','k')
    if ~isempty(get(handles.edit_resultdir,'String'))&&~strcmp(get(handles.edit_resultdir,'FontAngle'),'italic')
        set(handles.text_RESULT_DIR,'ForegroundColor','k')
    end
end
if isempty(get(hObject,'String'))
    set(handles.text_RESULT_DIR,'ForegroundColor','r')
end


% Forcing File Directory
function pushbutton_forcingfile_search_Callback(hObject, eventdata, handles)
filedir = uigetdir(handles.lastvisitdir,'Forcing File Directory');
if ischar(filedir)
    set(handles.edit_forcingdir,'string',filedir)
    set(handles.edit_forcingdir,'FontAngle','normal')
    set(handles.edit_forcingdir,'ForegroundColor','k')
    if ~isempty(get(handles.edit_forcingprefix,'String'))&&~strcmp(get(handles.edit_forcingprefix,'FontAngle'),'italic')
        set(handles.text_FORCING_PREFIX,'ForegroundColor','k')
    end
    handles.lastvisitdir = filedir;
end
guidata(hObject,handles);

function edit_forcingdir_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_forcingdir,'FontAngle','normal')
    set(handles.edit_forcingdir,'ForegroundColor','k')
    if ~isempty(get(handles.edit_forcingprefix,'String'))&&~strcmp(get(handles.edit_forcingprefix,'FontAngle'),'italic')
        set(handles.text_FORCING_PREFIX,'ForegroundColor','k')
    end
end
if isempty(get(hObject,'String'))
    set(handles.text_FORCING_PREFIX,'ForegroundColor','r')
end

function edit_forcingprefix_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_forcingprefix,'FontAngle','normal')
    set(handles.edit_forcingprefix,'ForegroundColor','k')
    if ~isempty(get(handles.edit_forcingdir,'String'))&&~strcmp(get(handles.edit_forcingdir,'FontAngle'),'italic')
        set(handles.text_FORCING_PREFIX,'ForegroundColor','k')
    end
end
if isempty(get(hObject,'String'))
    set(handles.text_FORCING_PREFIX,'ForegroundColor','r')
end



function edit_ntype_Callback(hObject, eventdata, handles)
rownum = str2double(get(hObject,'String'));
if rem(rownum,floor(rownum))==0 && rownum >= 4
    set(handles.uitable_vartype,'data',cell(rownum,1))
    set(handles.text_N_TYPES,'ForegroundColor','k')
else
    set(hObject,'string','')
    set(handles.uitable_vartype,'data',cell(4,1))
    set(handles.text_N_TYPES,'ForegroundColor','r')
end
guidata(hObject, handles);



% --- Executes on button press in pushbutton_forcetype_add.
function pushbutton_forcetype_add_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_FORCE_TYPE.Value)
    selrow_ind = handles.seletedrow;
    selvar_ind = handles.listbox_FORCE_TYPE.Value;
    handles.uitable_vartype.Data{selrow_ind} = handles.listbox_FORCE_TYPE.String{selvar_ind};
    
    rownum = str2double(get(handles.edit_ntype,'String'));
    if rem(rownum,floor(rownum))==0 && rownum >= 4
        fillnum = 0;
        for i = 1:rownum
            if ~isempty(handles.uitable_vartype.Data{i}); fillnum = fillnum+1; end
        end
        if fillnum == rownum
            set(handles.text_FORCE_TYPE,'ForegroundColor','k')
        end
    end
    
end

% --- Executes when selected cell(s) is changed in uitable_vartype.
function uitable_vartype_CellSelectionCallback(hObject, eventdata, handles)
if ~isempty(eventdata.Indices)
    handles.seletedrow = eventdata.Indices(1);     
end
guidata(hObject, handles);


% --- Executes when entered data in editable cell(s) in uitable_vartype.
function uitable_vartype_CellEditCallback(hObject, eventdata, handles)
rownum = str2double(get(handles.edit_ntype,'String'));
if rem(rownum,floor(rownum))==0 && rownum >= 4
    fillnum = 0;
    for i = 1:rownum
        if ~isempty(handles.uitable_vartype.Data{i}); fillnum = fillnum+1; end
    end
    if fillnum == rownum
        set(handles.text_FORCE_TYPE,'ForegroundColor','k')
    else
        set(handles.text_FORCE_TYPE,'ForegroundColor','r')
    end
end
guidata(hObject, handles);


function edit_FORCEYEAR_Callback(hObject, eventdata, handles)
inputnum = str2double(get(hObject,'String'));
if rem(inputnum,floor(inputnum))==0 && inputnum > 0
    set(handles.text_FORCEYEAR,'ForegroundColor','k')
else
    set(hObject,'string','')
    set(handles.text_FORCEYEAR,'ForegroundColor','r')
end
guidata(hObject, handles);

function edit_FORCEMONTH_Callback(hObject, eventdata, handles)
inputnum = str2double(get(hObject,'String'));
if rem(inputnum,floor(inputnum))==0 && inputnum > 0 && inputnum < 13
    set(handles.text_FORCEMONTH,'ForegroundColor','k')
else
    set(hObject,'string','')
    set(handles.text_FORCEMONTH,'ForegroundColor','r')
end
guidata(hObject, handles);

function edit_FORCEDAY_Callback(hObject, eventdata, handles)
inputnum = str2double(get(hObject,'String'));
if rem(inputnum,floor(inputnum))==0 && inputnum > 0 && inputnum < 32
    set(handles.text_FORCEDAY,'ForegroundColor','k')
else
    set(hObject,'string','')
    set(handles.text_FORCEDAY,'ForegroundColor','r')
end
guidata(hObject, handles);



%%%%%%%%%%%%%%%%%%%%%%%%%%   Global (Advanced)  %%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in radiobutton_advanced.
function radiobutton_advanced_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1 
    set(handles.uipanel_advanced,'visible','on')
    
    set(handles.radiobutton_primary,'Value',0)
    set(handles.uipanel_primary,'visible','off')
    
    set(handles.radiobutton_vicoutput,'Value',0)
    set(handles.uipanel_configureVICoutput,'visible','off')
    
elseif get(hObject,'Value') == 0 && handles.radiobutton_primary.Value == 0 && handles.radiobutton_vicoutput.Value == 0
    set(handles.radiobutton_advanced,'Value',1)
end

function pushbutton_soiltemp_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/soiltemppar_description.m')

function pushbutton_lakesim_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/lakepar_description.m')

function pushbutton_statefile_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/statepar_description.m')

function pushbutton_meteoforcedisagg_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/meteoforcedisagg_description.m')

function pushbutton_carboncycle_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/carbonpar_description.m')

function pushbutton_turbulentflux_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/turbulentfluxpar_description.m')

function pushbutton_miscell_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/miscellaneouspar_description.m')


% --- Executes on button press in checkbox_LakeSimPar.
function checkbox_SoilTempPar_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    set(handles.uipanel_SoilTempPar,'ForegroundColor','k')
    set(handles.uipanel_SoilTempPar,'ShadowColor',[0.5 0.5 0.5])
    set(handles.text_FROZEN_SOIL,'enable','on')
    set(handles.text_QUICK_FLUX,'enable','on')
    set(handles.text_IMPLICIT,'enable','on')
    set(handles.text_QUICK_SOLVE,'enable','on')
    set(handles.text_NO_FLUX,'enable','on')
    set(handles.text_EXP_TRANS,'enable','on')
    set(handles.text_GRND_FLUX_TYPE,'enable','on')
    set(handles.text_TFALLBACK,'enable','on')
    set(handles.text_SPATIAL_FROST,'enable','on')
    set(handles.popupmenu_FROZEN_SOIL,'enable','on')
    set(handles.popupmenu_QUICK_FLUX,'enable','on')
    set(handles.popupmenu_IMPLICIT,'enable','on')
    set(handles.popupmenu_QUICK_SOLVE,'enable','on')
    set(handles.popupmenu_NO_FLUX,'enable','on')
    set(handles.popupmenu_EXP_TRANS,'enable','on')
    set(handles.popupmenu_GRND_FLUX_TYPE,'enable','on')
    set(handles.popupmenu_TFALLBACK,'enable','on')
    set(handles.popupmenu_SPATIAL_FROST,'enable','on')
    set(handles.pushbutton_soiltemp_help,'enable','on')
    if get(handles.popupmenu_SPATIAL_FROST,'Value')==2 % Value 2 is for TRUE
        set(handles.edit_Nfrost,'enable','on')
    end
elseif get(hObject,'Value') == 0
    set(handles.uipanel_SoilTempPar,'ForegroundColor',[0.5 0.5 0.5])
    set(handles.uipanel_SoilTempPar,'ShadowColor','w')
    set(handles.text_FROZEN_SOIL,'enable','off')
    set(handles.text_QUICK_FLUX,'enable','off')
    set(handles.text_IMPLICIT,'enable','off')
    set(handles.text_QUICK_SOLVE,'enable','off')
    set(handles.text_NO_FLUX,'enable','off')
    set(handles.text_EXP_TRANS,'enable','off')
    set(handles.text_GRND_FLUX_TYPE,'enable','off')
    set(handles.text_TFALLBACK,'enable','off')
    set(handles.text_SPATIAL_FROST,'enable','off')
    set(handles.popupmenu_FROZEN_SOIL,'enable','off')
    set(handles.popupmenu_QUICK_FLUX,'enable','off')
    set(handles.popupmenu_IMPLICIT,'enable','off')
    set(handles.popupmenu_QUICK_SOLVE,'enable','off')
    set(handles.popupmenu_NO_FLUX,'enable','off')
    set(handles.popupmenu_EXP_TRANS,'enable','off')
    set(handles.popupmenu_GRND_FLUX_TYPE,'enable','off')
    set(handles.popupmenu_TFALLBACK,'enable','off')
    set(handles.popupmenu_SPATIAL_FROST,'enable','off')
    set(handles.pushbutton_soiltemp_help,'enable','off')
    set(handles.edit_Nfrost,'enable','off')
end

% --- Executes on button press in checkbox_LakeSimPar.
function checkbox_LakeSimPar_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    set(handles.uipanel_LakeSimPar,'ForegroundColor','k')
    set(handles.uipanel_LakeSimPar,'ShadowColor',[0.5 0.5 0.5])
    set(handles.text_LAKES,'enable','on')
    set(handles.text_LAKE_PROFILE,'enable','on')
    set(handles.text_EQUAL_AREA,'enable','on')
    set(handles.text_RESOLUTION,'enable','on')
    set(handles.edit_lakeparfile,'enable','on')
    set(handles.pushbutton_lakefile_search,'enable','on')
    set(handles.popupmenu_LAKE_PROFILE,'enable','on')
    set(handles.popupmenu_EQUAL_AREA,'enable','on')
    set(handles.edit_RESOLUTION,'enable','on')
    set(handles.pushbutton_lakesim_help,'enable','on')
elseif get(hObject,'Value') == 0
    set(handles.uipanel_LakeSimPar,'ForegroundColor',[0.5 0.5 0.5])
    set(handles.uipanel_LakeSimPar,'ShadowColor','w')
    set(handles.text_LAKES,'enable','off')
    set(handles.text_LAKE_PROFILE,'enable','off')
    set(handles.text_EQUAL_AREA,'enable','off')
    set(handles.text_RESOLUTION,'enable','off')
    set(handles.edit_lakeparfile,'enable','off')
    set(handles.pushbutton_lakefile_search,'enable','off')
    set(handles.popupmenu_LAKE_PROFILE,'enable','off')
    set(handles.popupmenu_EQUAL_AREA,'enable','off')
    set(handles.edit_RESOLUTION,'enable','off')
    set(handles.pushbutton_lakesim_help,'enable','off')
end


% --- Executes on button press in checkbox_StateFilePar.
function checkbox_StateFilePar_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    set(handles.uipanel_StateFilePar,'ForegroundColor','k')
    set(handles.uipanel_StateFilePar,'ShadowColor',[0.5 0.5 0.5])
    set(handles.text_INIT_STATE,'enable','on')
    set(handles.text_STATENAME,'enable','on')
    set(handles.text_STATEYEAR,'enable','on')
    set(handles.text_STATEMONTH,'enable','on')
    set(handles.text_STATEDAY,'enable','on')
    set(handles.text_BINARY_STATE_FILE,'enable','on')
    set(handles.popupmenu_BINARY_STATE_FILE,'enable','on')
    set(handles.edit_STATEYEAR,'enable','on')
    set(handles.edit_InitialStateFile,'enable','on') 
    set(handles.edit_STATEMONTH,'enable','on')
    set(handles.edit_STATEDAY,'enable','on')
    set(handles.edit_statefiledir,'enable','on')
    set(handles.edit_statefiledir_prefix,'enable','on')
    set(handles.pushbutton_inistatefile_search,'enable','on')
    set(handles.pushbutton_statefiledir_search,'enable','on')
    set(handles.pushbutton_statefile_help,'enable','on')
elseif get(hObject,'Value') == 0
    set(handles.uipanel_StateFilePar,'ForegroundColor',[0.5 0.5 0.5])
    set(handles.uipanel_StateFilePar,'ShadowColor','w')
    set(handles.text_INIT_STATE,'enable','off')
    set(handles.text_STATENAME,'enable','off')
    set(handles.text_STATEYEAR,'enable','off')
    set(handles.text_STATEMONTH,'enable','off')
    set(handles.text_STATEDAY,'enable','off')
    set(handles.text_BINARY_STATE_FILE,'enable','off')
    set(handles.popupmenu_BINARY_STATE_FILE,'enable','off')
    set(handles.edit_STATEYEAR,'enable','off')
    set(handles.edit_InitialStateFile,'enable','off') 
    set(handles.edit_STATEMONTH,'enable','off')
    set(handles.edit_STATEDAY,'enable','off')
    set(handles.edit_statefiledir,'enable','off')
    set(handles.edit_statefiledir_prefix,'enable','off')
    set(handles.pushbutton_inistatefile_search,'enable','off')
    set(handles.pushbutton_statefiledir_search,'enable','off')
    set(handles.pushbutton_statefile_help,'enable','off')
end

% --- Executes on button press in checkbox_MeteoForceDisagg.
function checkbox_MeteoForceDisagg_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    set(handles.uipanel_MeteoForceDisagg,'ForegroundColor','k')
    set(handles.uipanel_MeteoForceDisagg,'ShadowColor',[0.5 0.5 0.5])
    set(handles.text_OUTPUT_FORCE,'enable','on')
    set(handles.text_PLAPSE,'enable','on')
    set(handles.text_SW_PREC_THRESH,'enable','on')
    set(handles.text_MTCLIM_SWE_CORR,'enable','on')
    set(handles.text_VP_ITER,'enable','on')
    set(handles.text_VP_INTERP,'enable','on')
    set(handles.text_LW_TYPE,'enable','on')
    set(handles.text_LW_CLOUD,'enable','on')
    set(handles.edit_SW_PREC_THRESH,'enable','on') 
    set(handles.popupmenu_VP_ITER,'enable','on')
    set(handles.popupmenu_OUTPUT_FORCE,'enable','on')
    set(handles.popupmenu_PLAPSE,'enable','on')
    set(handles.popupmenu_MTCLIM_SWE_CORR,'enable','on')
    set(handles.popupmenu_VP_INTERP,'enable','on')
    set(handles.popupmenu_LW_TYPE,'enable','on')
    set(handles.popupmenu_LW_CLOUD,'enable','on')
    set(handles.pushbutton_meteoforcedisagg_help,'enable','on')
elseif get(hObject,'Value') == 0
    set(handles.uipanel_MeteoForceDisagg,'ForegroundColor',[0.5 0.5 0.5])
    set(handles.uipanel_MeteoForceDisagg,'ShadowColor','w')
    set(handles.text_OUTPUT_FORCE,'enable','off')
    set(handles.text_PLAPSE,'enable','off')
    set(handles.text_SW_PREC_THRESH,'enable','off')
    set(handles.text_MTCLIM_SWE_CORR,'enable','off')
    set(handles.text_VP_ITER,'enable','off')
    set(handles.text_VP_INTERP,'enable','off')
    set(handles.text_LW_TYPE,'enable','off')
    set(handles.text_LW_CLOUD,'enable','off')
    set(handles.edit_SW_PREC_THRESH,'enable','off') 
    set(handles.popupmenu_VP_ITER,'enable','off')
    set(handles.popupmenu_OUTPUT_FORCE,'enable','off')
    set(handles.popupmenu_PLAPSE,'enable','off')
    set(handles.popupmenu_MTCLIM_SWE_CORR,'enable','off')
    set(handles.popupmenu_VP_INTERP,'enable','off')
    set(handles.popupmenu_LW_TYPE,'enable','off')
    set(handles.popupmenu_LW_CLOUD,'enable','off')
    set(handles.pushbutton_meteoforcedisagg_help,'enable','off')
end

% --- Executes on button press in checkbox_CarbonCyclePar.
function checkbox_CarbonCyclePar_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    set(handles.uipanel_CarbonCyclePar,'ForegroundColor','k')
    set(handles.uipanel_CarbonCyclePar,'ShadowColor',[0.5 0.5 0.5])
    set(handles.text_CARBON,'enable','on')
    set(handles.text_VEGLIB_PHOTO,'enable','on')
    set(handles.text_RC_MODE,'enable','on')
    set(handles.popupmenu_CARBON,'enable','on')
    set(handles.popupmenu_VEGLIB_PHOTO,'enable','on')
    set(handles.popupmenu_RC_MODE,'enable','on')
    set(handles.pushbutton_carboncycle_help,'enable','on')
elseif get(hObject,'Value') == 0
    set(handles.uipanel_CarbonCyclePar,'ForegroundColor',[0.5 0.5 0.5])
    set(handles.uipanel_CarbonCyclePar,'ShadowColor','w')
    set(handles.text_CARBON,'enable','off')
    set(handles.text_VEGLIB_PHOTO,'enable','off')
    set(handles.text_RC_MODE,'enable','off')
    set(handles.popupmenu_CARBON,'enable','off')
    set(handles.popupmenu_VEGLIB_PHOTO,'enable','off')
    set(handles.popupmenu_RC_MODE,'enable','off')
    set(handles.pushbutton_carboncycle_help,'enable','off')
end

% --- Executes on button press in checkbox_TurbulentFluxPar.
function checkbox_TurbulentFluxPar_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    set(handles.uipanel_TurbulentFluxPar,'ForegroundColor','k')
    set(handles.uipanel_TurbulentFluxPar,'ShadowColor',[0.5 0.5 0.5])
    set(handles.text_MIN_WIND_SPEED,'enable','on')
    set(handles.text_AERO_RESIST_CANSNOW,'enable','on')
    set(handles.edit_MIN_WIND_SPEED,'enable','on')
    set(handles.popupmenu_AERO_RESIST_CANSNOW,'enable','on')
    set(handles.pushbutton_turbulentflux_help,'enable','on')    
elseif get(hObject,'Value') == 0
    set(handles.uipanel_TurbulentFluxPar,'ForegroundColor',[0.5 0.5 0.5])
    set(handles.uipanel_TurbulentFluxPar,'ShadowColor','w')
    set(handles.text_MIN_WIND_SPEED,'enable','off')
    set(handles.text_AERO_RESIST_CANSNOW,'enable','off')
    set(handles.edit_MIN_WIND_SPEED,'enable','off')
    set(handles.popupmenu_AERO_RESIST_CANSNOW,'enable','off')
    set(handles.pushbutton_turbulentflux_help,'enable','off') 
end

% --- Executes on button press in checkbox_Miscellaneous.
function checkbox_Miscellaneous_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    set(handles.uipanel_Miscellaneous,'ForegroundColor','k')
    set(handles.uipanel_Miscellaneous,'ShadowColor',[0.5 0.5 0.5])
    set(handles.text_CONTINUEONERROR,'enable','on')
    set(handles.popupmenu_CONTINUEONERROR,'enable','on')
    set(handles.pushbutton_miscell_help,'enable','on')    
elseif get(hObject,'Value') == 0
    set(handles.uipanel_Miscellaneous,'ForegroundColor',[0.5 0.5 0.5])
    set(handles.uipanel_Miscellaneous,'ShadowColor','w')
    set(handles.text_CONTINUEONERROR,'enable','off')
    set(handles.popupmenu_CONTINUEONERROR,'enable','off')
    set(handles.pushbutton_miscell_help,'enable','off')
end


function popupmenu_FROZEN_SOIL_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1
    set(handles.popupmenu_QUICK_FLUX,'Value',2)
elseif get(hObject,'Value') == 2
    set(handles.popupmenu_QUICK_FLUX,'Value',1)
end



% --- Executes on selection change in popupmenu_SPATIAL_FROST.
function popupmenu_SPATIAL_FROST_Callback(hObject, eventdata, handles)
selopt_str = get(hObject,'String');
if strcmp(deblank(selopt_str(selopt,:)),'TRUE') && strcmp(get(hObject,'Enable'),'on')
    set(handles.edit_Nfrost,'enable','on')
elseif strcmp(deblank(selopt_str(selopt,:)),'FALSE') && strcmp(get(hObject,'Enable'),'on')
    set(handles.edit_Nfrost,'enable','off')
end


function edit_lakeparfile_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_lakeparfile,'FontAngle','normal')
    set(handles.edit_lakeparfile,'ForegroundColor','k')
end


% --- Executes on button press in pushbutton_lakefile_search.
function pushbutton_lakefile_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Select Lake Parameter File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_lakeparfile,'string',filedir)
    set(handles.edit_lakeparfile,'FontAngle','normal')
    set(handles.edit_lakeparfile,'ForegroundColor','k')
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

function edit_InitialStateFile_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_InitialStateFile,'FontAngle','normal')
    set(handles.edit_InitialStateFile,'ForegroundColor','k')
end


% --- Executes on button press in pushbutton_inistatefile_search.
function pushbutton_inistatefile_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Select Initial VIC State File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_InitialStateFile,'string',filedir)
    set(handles.edit_InitialStateFile,'FontAngle','normal')
    set(handles.edit_InitialStateFile,'ForegroundColor','k')
    handles.lastvisitdir = filepath;
end
guidata(hObject,handles);

% --- Executes on button press in pushbutton_statefiledir_search.
function pushbutton_statefiledir_search_Callback(hObject, eventdata, handles)
filedir = uigetdir(handles.lastvisitdir,'VIC Output Directory');
if ischar(filedir)
    set(handles.edit_statefiledir,'string',filedir)
    set(handles.edit_statefiledir,'FontAngle','normal')
    set(handles.edit_statefiledir,'ForegroundColor','k')
    
    handles.lastvisitdir = filedir;
end
guidata(hObject,handles);

function edit_statefiledir_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_statefiledir,'FontAngle','normal')
    set(handles.edit_statefiledir,'ForegroundColor','k')
end


function edit_statefiledir_prefix_Callback(hObject, eventdata, handles)
if ~isempty(get(hObject,'String'))
    set(handles.edit_statefiledir_prefix,'FontAngle','normal')
    set(handles.edit_statefiledir_prefix,'ForegroundColor','k')    
end



%%%%%%%%%%%%%%%%%%%%%%%%%%   VIC Output Config  %%%%%%%%%%%%%%%%%%%%%%%%%%%
% --- Executes on button press in radiobutton_vicoutput.
function radiobutton_vicoutput_Callback(hObject, eventdata, handles)
if get(hObject,'Value') == 1 
    set(handles.uipanel_configureVICoutput,'visible','on')
    
    set(handles.radiobutton_advanced,'Value',0)
    set(handles.uipanel_advanced,'visible','off')
    
    set(handles.radiobutton_primary,'Value',0)
    set(handles.uipanel_primary,'visible','off')
    
elseif get(hObject,'Value') == 0 && handles.radiobutton_primary.Value == 0 && handles.radiobutton_advanced.Value == 0
    set(handles.radiobutton_vicoutput,'Value',1)
end



function pushbutton_configuredone_Callback(hObject, eventdata, handles)
set(handles.uipanel_configureVICoutput,'visible','off')
set(handles.uipanel_primary,'visible','on')
set(handles.uipanel_advanced,'visible','off')
set(handles.radiobutton_primary,'visible','on')
set(handles.radiobutton_advanced,'visible','on')
set(handles.pushbutton_SAVE,'visible','on')


function pushbutton_outvardescrip_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    winopen('./library/help_doc/VIC output variable description.pdf')
end

% --- Executes on button press in pushbutton_clearallselection.
function pushbutton_clearallselection_Callback(hObject, eventdata, handles)
set(handles.checkbox_LAKE_BF_IN,'Value',0)
set(handles.checkbox_LAKE_BF_IN_V,'Value',0)
set(handles.checkbox_LAKE_BF_OUT,'Value',0)
set(handles.checkbox_LAKE_BF_OUT_V,'Value',0)
set(handles.checkbox_LAKE_CHAN_IN,'Value',0)
set(handles.checkbox_LAKE_CHAN_IN_V,'Value',0)
set(handles.checkbox_LAKE_CHAN_OUT,'Value',0)
set(handles.checkbox_LAKE_CHAN_OUT_V,'Value',0)
set(handles.checkbox_LAKE_DSTOR,'Value',0)
set(handles.checkbox_LAKE_DSTOR_V,'Value',0)
set(handles.checkbox_LAKE_DSWE,'Value',0)
set(handles.checkbox_LAKE_DSWE_V,'Value',0)
set(handles.checkbox_LAKE_RO_IN_V,'Value',0)
set(handles.checkbox_LAKE_RO_IN,'Value',0)
set(handles.checkbox_LAKE_RCHRG_V,'Value',0)
set(handles.checkbox_LAKE_RCHRG,'Value',0)
set(handles.checkbox_LAKE_PREC_V,'Value',0)
set(handles.checkbox_LAKE_EVAP_V,'Value',0)
set(handles.checkbox_LAKE_EVAP,'Value',0)
set(handles.checkbox_LAKE_VAPFLX,'Value',0)
set(handles.checkbox_LAKE_VAPFLX_V,'Value',0)
set(handles.checkbox_WATER_ERROR,'Value',0)
set(handles.checkbox_TRANSP_VEG,'Value',0)
set(handles.checkbox_SUB_SURFACE,'Value',0)
set(handles.checkbox_SUB_SNOW,'Value',0)
set(handles.checkbox_SUB_CANOP,'Value',0)
set(handles.checkbox_SNOWF,'Value',0)
set(handles.checkbox_SNOW_MELT,'Value',0)
set(handles.checkbox_RUNOFF,'Value',0)
set(handles.checkbox_REFREEZE,'Value',0)
set(handles.checkbox_RAINF,'Value',0)
set(handles.checkbox_PREC,'Value',0)
set(handles.checkbox_PET_VEGNOCR,'Value',0)
set(handles.checkbox_PET_NATVEG,'Value',0)
set(handles.checkbox_PET_TALL,'Value',0)
set(handles.checkbox_PET_SHORT,'Value',0)
set(handles.checkbox_PET_H2OSURF,'Value',0)
set(handles.checkbox_PET_SATSOIL,'Value',0)
set(handles.checkbox_INFLOW,'Value',0)
set(handles.checkbox_EVAP_CANOP,'Value',0)
set(handles.checkbox_EVAP_BARE,'Value',0)
set(handles.checkbox_EVAP,'Value',0)
set(handles.checkbox_DELSWE,'Value',0)
set(handles.checkbox_DELSURFSTOR,'Value',0)
set(handles.checkbox_DELSOILMOIST,'Value',0)
set(handles.checkbox_DELINTERCEPT,'Value',0)
set(handles.checkbox_BASEFLOW,'Value',0)
set(handles.checkbox_SUB_BLOWING,'Value',0)
set(handles.checkbox_ASAT,'Value',0)
set(handles.checkbox_LAKE_AREA_FRAC,'Value',0)
set(handles.checkbox_LAKE_ICE_HEIGHT,'Value',0)
set(handles.checkbox_LAKE_MOIST,'Value',0)
set(handles.checkbox_LAKE_DEPTH,'Value',0)
set(handles.checkbox_LAKE_SURF_AREA,'Value',0)
set(handles.checkbox_LAKE_SWE,'Value',0)
set(handles.checkbox_LAKE_SWE_V,'Value',0)
set(handles.checkbox_LAKE_ICE,'Value',0)
set(handles.checkbox_LAKE_ICE_FRACT,'Value',0)
set(handles.checkbox_LAKE_VOLUME,'Value',0)
set(handles.checkbox_ROOTMOIST,'Value',0)
set(handles.checkbox_SMFROZFRAC,'Value',0)
set(handles.checkbox_SMLIQFRAC,'Value',0)
set(handles.checkbox_SNOW_CANOPY,'Value',0)
set(handles.checkbox_SNOW_COVER,'Value',0)
set(handles.checkbox_SNOW_DEPTH,'Value',0)
set(handles.checkbox_SOIL_ICE,'Value',0)
set(handles.checkbox_SOIL_LIQ,'Value',0)
set(handles.checkbox_SOIL_MOIST,'Value',0)
set(handles.checkbox_SOIL_WET,'Value',0)
set(handles.checkbox_SURF_FROST_FRAC,'Value',0)
set(handles.checkbox_SWE,'Value',0)
set(handles.checkbox_SURFSTOR,'Value',0)
set(handles.checkbox_ZWT,'Value',0)
set(handles.checkbox_ZWT_LUMPED,'Value',0)
set(handles.checkbox_WDEW,'Value',0)
set(handles.checkbox_IN_LONG,'Value',0)
set(handles.checkbox_GRND_FLUX,'Value',0)
set(handles.checkbox_FUSION,'Value',0)
set(handles.checkbox_ENERGY_ERROR,'Value',0)
set(handles.checkbox_DELTAH,'Value',0)
set(handles.checkbox_DELTACC,'Value',0)
set(handles.checkbox_ADVECTION,'Value',0)
set(handles.checkbox_ADV_SENS,'Value',0)
set(handles.checkbox_LATENT,'Value',0)
set(handles.checkbox_LATENT_SUB,'Value',0)
set(handles.checkbox_MELT_ENERGY,'Value',0)
set(handles.checkbox_NET_LONG,'Value',0)
set(handles.checkbox_NET_SHORT,'Value',0)
set(handles.checkbox_R_NET,'Value',0)
set(handles.checkbox_RFRZ_ENERGY,'Value',0)
set(handles.checkbox_SENSIBLE,'Value',0)
set(handles.checkbox_SNOW_FLUX,'Value',0)
set(handles.checkbox_SNOWT_FBFLAG,'Value',0)
set(handles.checkbox_SNOW_SURF_TEMP,'Value',0)
set(handles.checkbox_SNOW_PACK_TEMP,'Value',0)
set(handles.checkbox_SALBEDO,'Value',0)
set(handles.checkbox_RAD_TEMP,'Value',0)
set(handles.checkbox_LAKE_SURF_TEMP,'Value',0)
set(handles.checkbox_LAKE_ICE_TEMP,'Value',0)
set(handles.checkbox_FDEPTH,'Value',0)
set(handles.checkbox_BARESOILT,'Value',0)
set(handles.checkbox_ALBEDO,'Value',0)
set(handles.checkbox_SOIL_TEMP,'Value',0)
set(handles.checkbox_SOIL_TNODE,'Value',0)
set(handles.checkbox_SOIL_TNODE_WL,'Value',0)
set(handles.checkbox_SOILT_FBFLAG,'Value',0)
set(handles.checkbox_SURF_TEMP,'Value',0)
set(handles.checkbox_SURFT_FBFLAG,'Value',0)
set(handles.checkbox_TCAN_FBFLAG,'Value',0)
set(handles.checkbox_TDEPTH,'Value',0)
set(handles.checkbox_TFOL_FBFLAG,'Value',0)
set(handles.checkbox_VEGT,'Value',0)
set(handles.checkbox_AERO_COND,'Value',0)
set(handles.checkbox_AERO_COND1,'Value',0)
set(handles.checkbox_AERO_COND2,'Value',0)
set(handles.checkbox_AERO_RESIST,'Value',0)
set(handles.checkbox_AERO_RESIST1,'Value',0)
set(handles.checkbox_AERO_RESIST2,'Value',0)
set(handles.checkbox_AIR_TEMP,'Value',0)
set(handles.checkbox_CATM,'Value',0)
set(handles.checkbox_COSZEN,'Value',0)
set(handles.checkbox_DENSITY,'Value',0)
set(handles.checkbox_FDIR,'Value',0)
set(handles.checkbox_LAI,'Value',0)
set(handles.checkbox_WIND,'Value',0)
set(handles.checkbox_VPD,'Value',0)
set(handles.checkbox_VP,'Value',0)
set(handles.checkbox_VEGCOVER,'Value',0)
set(handles.checkbox_TSKC,'Value',0)
set(handles.checkbox_SURF_COND,'Value',0)
set(handles.checkbox_SHORTWAVE,'Value',0)
set(handles.checkbox_REL_HUMID,'Value',0)
set(handles.checkbox_QAIR,'Value',0)
set(handles.checkbox_PRESSURE,'Value',0)
set(handles.checkbox_PAR,'Value',0)
set(handles.checkbox_LONGWAVE,'Value',0)
set(handles.checkbox_CSLOW,'Value',0)
set(handles.checkbox_CINTER,'Value',0)
set(handles.checkbox_CLITTER,'Value',0)
set(handles.checkbox_NEE,'Value',0)
set(handles.checkbox_RHET,'Value',0)
set(handles.checkbox_LITTERFALL,'Value',0)
set(handles.checkbox_NPP,'Value',0)
set(handles.checkbox_RAUT,'Value',0)
set(handles.checkbox_GPP,'Value',0)
set(handles.checkbox_APAR,'Value',0)
set(handles.checkbox_ADV_SENS_BAND,'Value',0)
set(handles.checkbox_ADVECTION_BAND,'Value',0)
set(handles.checkbox_ALBEDO_BAND,'Value',0)
set(handles.checkbox_DELTACC_BAND,'Value',0)
set(handles.checkbox_GRND_FLUX_BAND,'Value',0)
set(handles.checkbox_IN_LONG_BAND,'Value',0)
set(handles.checkbox_LATENT_BAND,'Value',0)
set(handles.checkbox_LATENT_SUB_BAND,'Value',0)
set(handles.checkbox_MELT_ENERGY_BAND,'Value',0)
set(handles.checkbox_NET_LONG_BAND,'Value',0)
set(handles.checkbox_NET_SHORT_BAND,'Value',0)
set(handles.checkbox_SWE_BAND,'Value',0)
set(handles.checkbox_SNOW_SURFT_BAND,'Value',0)
set(handles.checkbox_SNOW_PACKT_BAND,'Value',0)
set(handles.checkbox_SNOW_MELT_BAND,'Value',0)
set(handles.checkbox_SNOW_FLUX_BAND,'Value',0)
set(handles.checkbox_SNOW_DEPTH_BAND,'Value',0)
set(handles.checkbox_SNOW_COVER_BAND,'Value',0)
set(handles.checkbox_SNOW_CANOPY_BAND,'Value',0)
set(handles.checkbox_SENSIBLE_BAND,'Value',0)
set(handles.checkbox_RFRZ_ENERGY_BAND,'Value',0)


function pushbutton_BackToInitial_Callback(hObject, eventdata, handles)
set(handles.checkbox_PREC,'Value',1)
set(handles.checkbox_TRANSP_VEG,'Value',1)
set(handles.checkbox_BASEFLOW,'Value',1)
set(handles.checkbox_EVAP,'Value',1)
set(handles.checkbox_EVAP_BARE,'Value',1)
set(handles.checkbox_EVAP_CANOP,'Value',1)
set(handles.checkbox_RUNOFF,'Value',1)
set(handles.checkbox_SUB_CANOP,'Value',1)
set(handles.checkbox_SUB_SNOW,'Value',1)
set(handles.checkbox_SNOW_CANOPY,'Value',1)
set(handles.checkbox_SNOW_COVER,'Value',1)
set(handles.checkbox_SNOW_DEPTH,'Value',1)
set(handles.checkbox_SOIL_LIQ,'Value',1)
set(handles.checkbox_SWE,'Value',1)
set(handles.checkbox_WDEW,'Value',1)
set(handles.checkbox_AERO_RESIST,'Value',1)
set(handles.checkbox_AIR_TEMP,'Value',1)
set(handles.checkbox_REL_HUMID,'Value',1)
set(handles.checkbox_WIND,'Value',1)
set(handles.checkbox_ALBEDO,'Value',1)
set(handles.checkbox_SURF_TEMP,'Value',1)
set(handles.checkbox_IN_LONG,'Value',1)
set(handles.checkbox_NET_SHORT,'Value',1)
set(handles.checkbox_R_NET,'Value',1)

set(handles.checkbox_LAKE_BF_IN,'Value',0)
set(handles.checkbox_LAKE_BF_IN_V,'Value',0)
set(handles.checkbox_LAKE_BF_OUT,'Value',0)
set(handles.checkbox_LAKE_BF_OUT_V,'Value',0)
set(handles.checkbox_LAKE_CHAN_IN,'Value',0)
set(handles.checkbox_LAKE_CHAN_IN_V,'Value',0)
set(handles.checkbox_LAKE_CHAN_OUT,'Value',0)
set(handles.checkbox_LAKE_CHAN_OUT_V,'Value',0)
set(handles.checkbox_LAKE_DSTOR,'Value',0)
set(handles.checkbox_LAKE_DSTOR_V,'Value',0)
set(handles.checkbox_LAKE_DSWE,'Value',0)
set(handles.checkbox_LAKE_DSWE_V,'Value',0)
set(handles.checkbox_LAKE_RO_IN_V,'Value',0)
set(handles.checkbox_LAKE_RO_IN,'Value',0)
set(handles.checkbox_LAKE_RCHRG_V,'Value',0)
set(handles.checkbox_LAKE_RCHRG,'Value',0)
set(handles.checkbox_LAKE_PREC_V,'Value',0)
set(handles.checkbox_LAKE_EVAP_V,'Value',0)
set(handles.checkbox_LAKE_EVAP,'Value',0)
set(handles.checkbox_LAKE_VAPFLX,'Value',0)
set(handles.checkbox_LAKE_VAPFLX_V,'Value',0)
set(handles.checkbox_WATER_ERROR,'Value',0)
% set(handles.checkbox_TRANSP_VEG,'Value',0)
set(handles.checkbox_SUB_SURFACE,'Value',0)
% set(handles.checkbox_SUB_SNOW,'Value',0)
% set(handles.checkbox_SUB_CANOP,'Value',0)
set(handles.checkbox_SNOWF,'Value',0)
set(handles.checkbox_SNOW_MELT,'Value',0)
% set(handles.checkbox_RUNOFF,'Value',0)
set(handles.checkbox_REFREEZE,'Value',0)
set(handles.checkbox_RAINF,'Value',0)
% set(handles.checkbox_PREC,'Value',0)
set(handles.checkbox_PET_VEGNOCR,'Value',0)
set(handles.checkbox_PET_NATVEG,'Value',0)
set(handles.checkbox_PET_TALL,'Value',0)
set(handles.checkbox_PET_SHORT,'Value',0)
set(handles.checkbox_PET_H2OSURF,'Value',0)
set(handles.checkbox_PET_SATSOIL,'Value',0)
set(handles.checkbox_INFLOW,'Value',0)
% set(handles.checkbox_EVAP_CANOP,'Value',0)
% set(handles.checkbox_EVAP_BARE,'Value',0)
% set(handles.checkbox_EVAP,'Value',0)
set(handles.checkbox_DELSWE,'Value',0)
set(handles.checkbox_DELSURFSTOR,'Value',0)
set(handles.checkbox_DELSOILMOIST,'Value',0)
set(handles.checkbox_DELINTERCEPT,'Value',0)
% set(handles.checkbox_BASEFLOW,'Value',0)
set(handles.checkbox_SUB_BLOWING,'Value',0)
set(handles.checkbox_ASAT,'Value',0)
set(handles.checkbox_LAKE_AREA_FRAC,'Value',0)
set(handles.checkbox_LAKE_ICE_HEIGHT,'Value',0)
set(handles.checkbox_LAKE_MOIST,'Value',0)
set(handles.checkbox_LAKE_DEPTH,'Value',0)
set(handles.checkbox_LAKE_SURF_AREA,'Value',0)
set(handles.checkbox_LAKE_SWE,'Value',0)
set(handles.checkbox_LAKE_SWE_V,'Value',0)
set(handles.checkbox_LAKE_ICE,'Value',0)
set(handles.checkbox_LAKE_ICE_FRACT,'Value',0)
set(handles.checkbox_LAKE_VOLUME,'Value',0)
set(handles.checkbox_ROOTMOIST,'Value',0)
set(handles.checkbox_SMFROZFRAC,'Value',0)
set(handles.checkbox_SMLIQFRAC,'Value',0)
% set(handles.checkbox_SNOW_CANOPY,'Value',0)
% set(handles.checkbox_SNOW_COVER,'Value',0)
% set(handles.checkbox_SNOW_DEPTH,'Value',0)
set(handles.checkbox_SOIL_ICE,'Value',0)
% set(handles.checkbox_SOIL_LIQ,'Value',0)
set(handles.checkbox_SOIL_MOIST,'Value',0)
set(handles.checkbox_SOIL_WET,'Value',0)
set(handles.checkbox_SURF_FROST_FRAC,'Value',0)
% set(handles.checkbox_SWE,'Value',0)
set(handles.checkbox_SURFSTOR,'Value',0)
set(handles.checkbox_ZWT,'Value',0)
set(handles.checkbox_ZWT_LUMPED,'Value',0)
% set(handles.checkbox_WDEW,'Value',0)
% set(handles.checkbox_IN_LONG,'Value',0)
set(handles.checkbox_GRND_FLUX,'Value',0)
set(handles.checkbox_FUSION,'Value',0)
set(handles.checkbox_ENERGY_ERROR,'Value',0)
set(handles.checkbox_DELTAH,'Value',0)
set(handles.checkbox_DELTACC,'Value',0)
set(handles.checkbox_ADVECTION,'Value',0)
set(handles.checkbox_ADV_SENS,'Value',0)
set(handles.checkbox_LATENT,'Value',0)
set(handles.checkbox_LATENT_SUB,'Value',0)
set(handles.checkbox_MELT_ENERGY,'Value',0)
set(handles.checkbox_NET_LONG,'Value',0)
% set(handles.checkbox_NET_SHORT,'Value',0)
% set(handles.checkbox_R_NET,'Value',0)
set(handles.checkbox_RFRZ_ENERGY,'Value',0)
set(handles.checkbox_SENSIBLE,'Value',0)
set(handles.checkbox_SNOW_FLUX,'Value',0)
set(handles.checkbox_SNOWT_FBFLAG,'Value',0)
set(handles.checkbox_SNOW_SURF_TEMP,'Value',0)
set(handles.checkbox_SNOW_PACK_TEMP,'Value',0)
set(handles.checkbox_SALBEDO,'Value',0)
set(handles.checkbox_RAD_TEMP,'Value',0)
set(handles.checkbox_LAKE_SURF_TEMP,'Value',0)
set(handles.checkbox_LAKE_ICE_TEMP,'Value',0)
set(handles.checkbox_FDEPTH,'Value',0)
set(handles.checkbox_BARESOILT,'Value',0)
% set(handles.checkbox_ALBEDO,'Value',0)
set(handles.checkbox_SOIL_TEMP,'Value',0)
set(handles.checkbox_SOIL_TNODE,'Value',0)
set(handles.checkbox_SOIL_TNODE_WL,'Value',0)
set(handles.checkbox_SOILT_FBFLAG,'Value',0)
% set(handles.checkbox_SURF_TEMP,'Value',0)
set(handles.checkbox_SURFT_FBFLAG,'Value',0)
set(handles.checkbox_TCAN_FBFLAG,'Value',0)
set(handles.checkbox_TDEPTH,'Value',0)
set(handles.checkbox_TFOL_FBFLAG,'Value',0)
set(handles.checkbox_VEGT,'Value',0)
set(handles.checkbox_AERO_COND,'Value',0)
set(handles.checkbox_AERO_COND1,'Value',0)
set(handles.checkbox_AERO_COND2,'Value',0)
% set(handles.checkbox_AERO_RESIST,'Value',0)
set(handles.checkbox_AERO_RESIST1,'Value',0)
set(handles.checkbox_AERO_RESIST2,'Value',0)
% set(handles.checkbox_AIR_TEMP,'Value',0)
set(handles.checkbox_CATM,'Value',0)
set(handles.checkbox_COSZEN,'Value',0)
set(handles.checkbox_DENSITY,'Value',0)
set(handles.checkbox_FDIR,'Value',0)
set(handles.checkbox_LAI,'Value',0)
% set(handles.checkbox_WIND,'Value',0)
set(handles.checkbox_VPD,'Value',0)
set(handles.checkbox_VP,'Value',0)
set(handles.checkbox_VEGCOVER,'Value',0)
set(handles.checkbox_TSKC,'Value',0)
set(handles.checkbox_SURF_COND,'Value',0)
set(handles.checkbox_SHORTWAVE,'Value',0)
% set(handles.checkbox_REL_HUMID,'Value',0)
set(handles.checkbox_QAIR,'Value',0)
set(handles.checkbox_PRESSURE,'Value',0)
set(handles.checkbox_PAR,'Value',0)
set(handles.checkbox_LONGWAVE,'Value',0)
set(handles.checkbox_CSLOW,'Value',0)
set(handles.checkbox_CINTER,'Value',0)
set(handles.checkbox_CLITTER,'Value',0)
set(handles.checkbox_NEE,'Value',0)
set(handles.checkbox_RHET,'Value',0)
set(handles.checkbox_LITTERFALL,'Value',0)
set(handles.checkbox_NPP,'Value',0)
set(handles.checkbox_RAUT,'Value',0)
set(handles.checkbox_GPP,'Value',0)
set(handles.checkbox_APAR,'Value',0)
set(handles.checkbox_ADV_SENS_BAND,'Value',0)
set(handles.checkbox_ADVECTION_BAND,'Value',0)
set(handles.checkbox_ALBEDO_BAND,'Value',0)
set(handles.checkbox_DELTACC_BAND,'Value',0)
set(handles.checkbox_GRND_FLUX_BAND,'Value',0)
set(handles.checkbox_IN_LONG_BAND,'Value',0)
set(handles.checkbox_LATENT_BAND,'Value',0)
set(handles.checkbox_LATENT_SUB_BAND,'Value',0)
set(handles.checkbox_MELT_ENERGY_BAND,'Value',0)
set(handles.checkbox_NET_LONG_BAND,'Value',0)
set(handles.checkbox_NET_SHORT_BAND,'Value',0)
set(handles.checkbox_SWE_BAND,'Value',0)
set(handles.checkbox_SNOW_SURFT_BAND,'Value',0)
set(handles.checkbox_SNOW_PACKT_BAND,'Value',0)
set(handles.checkbox_SNOW_MELT_BAND,'Value',0)
set(handles.checkbox_SNOW_FLUX_BAND,'Value',0)
set(handles.checkbox_SNOW_DEPTH_BAND,'Value',0)
set(handles.checkbox_SNOW_COVER_BAND,'Value',0)
set(handles.checkbox_SNOW_CANOPY_BAND,'Value',0)
set(handles.checkbox_SENSIBLE_BAND,'Value',0)
set(handles.checkbox_RFRZ_ENERGY_BAND,'Value',0)

guidata(hObject, handles);


function n = count_nvars(handles)
n = get(handles.checkbox_LAKE_BF_IN,'Value')+...
get(handles.checkbox_LAKE_BF_IN_V,'Value')+...
get(handles.checkbox_LAKE_BF_OUT,'Value')+...
get(handles.checkbox_LAKE_BF_OUT_V,'Value')+...
get(handles.checkbox_LAKE_CHAN_IN,'Value')+...
get(handles.checkbox_LAKE_CHAN_IN_V,'Value')+...
get(handles.checkbox_LAKE_CHAN_OUT,'Value')+...
get(handles.checkbox_LAKE_CHAN_OUT_V,'Value')+...
get(handles.checkbox_LAKE_DSTOR,'Value')+...
get(handles.checkbox_LAKE_DSTOR_V,'Value')+...
get(handles.checkbox_LAKE_DSWE,'Value')+...
get(handles.checkbox_LAKE_DSWE_V,'Value')+...
get(handles.checkbox_LAKE_RO_IN_V,'Value')+...
get(handles.checkbox_LAKE_RO_IN,'Value')+...
get(handles.checkbox_LAKE_RCHRG_V,'Value')+...
get(handles.checkbox_LAKE_RCHRG,'Value')+...
get(handles.checkbox_LAKE_PREC_V,'Value')+...
get(handles.checkbox_LAKE_EVAP_V,'Value')+...
get(handles.checkbox_LAKE_EVAP,'Value')+...
get(handles.checkbox_LAKE_VAPFLX,'Value')+...
get(handles.checkbox_LAKE_VAPFLX_V,'Value')+...
get(handles.checkbox_WATER_ERROR,'Value')+...
get(handles.checkbox_TRANSP_VEG,'Value')+...
get(handles.checkbox_SUB_SURFACE,'Value')+...
get(handles.checkbox_SUB_SNOW,'Value')+...
get(handles.checkbox_SUB_CANOP,'Value')+...
get(handles.checkbox_SNOWF,'Value')+...
get(handles.checkbox_SNOW_MELT,'Value')+...
get(handles.checkbox_RUNOFF,'Value')+...
get(handles.checkbox_REFREEZE,'Value')+...
get(handles.checkbox_RAINF,'Value')+...
get(handles.checkbox_PREC,'Value')+...
get(handles.checkbox_PET_VEGNOCR,'Value')+...
get(handles.checkbox_PET_NATVEG,'Value')+...
get(handles.checkbox_PET_TALL,'Value')+...
get(handles.checkbox_PET_SHORT,'Value')+...
get(handles.checkbox_PET_H2OSURF,'Value')+...
get(handles.checkbox_PET_SATSOIL,'Value')+...
get(handles.checkbox_INFLOW,'Value')+...
get(handles.checkbox_EVAP_CANOP,'Value')+...
get(handles.checkbox_EVAP_BARE,'Value')+...
get(handles.checkbox_EVAP,'Value')+...
get(handles.checkbox_DELSWE,'Value')+...
get(handles.checkbox_DELSURFSTOR,'Value')+...
get(handles.checkbox_DELSOILMOIST,'Value')+...
get(handles.checkbox_DELINTERCEPT,'Value')+...
get(handles.checkbox_BASEFLOW,'Value')+...
get(handles.checkbox_SUB_BLOWING,'Value')+...
get(handles.checkbox_ASAT,'Value')+...
get(handles.checkbox_LAKE_AREA_FRAC,'Value')+...
get(handles.checkbox_LAKE_ICE_HEIGHT,'Value')+...
get(handles.checkbox_LAKE_MOIST,'Value')+...
get(handles.checkbox_LAKE_DEPTH,'Value')+...
get(handles.checkbox_LAKE_SURF_AREA,'Value')+...
get(handles.checkbox_LAKE_SWE,'Value')+...
get(handles.checkbox_LAKE_SWE_V,'Value')+...
get(handles.checkbox_LAKE_ICE,'Value')+...
get(handles.checkbox_LAKE_ICE_FRACT,'Value')+...
get(handles.checkbox_LAKE_VOLUME,'Value')+...
get(handles.checkbox_ROOTMOIST,'Value')+...
get(handles.checkbox_SMFROZFRAC,'Value')+...
get(handles.checkbox_SMLIQFRAC,'Value')+...
get(handles.checkbox_SNOW_CANOPY,'Value')+...
get(handles.checkbox_SNOW_COVER,'Value')+...
get(handles.checkbox_SNOW_DEPTH,'Value')+...
get(handles.checkbox_SOIL_ICE,'Value')+...
get(handles.checkbox_SOIL_LIQ,'Value')+...
get(handles.checkbox_SOIL_MOIST,'Value')+...
get(handles.checkbox_SOIL_WET,'Value')+...
get(handles.checkbox_SURF_FROST_FRAC,'Value')+...
get(handles.checkbox_SWE,'Value')+...
get(handles.checkbox_SURFSTOR,'Value')+...
get(handles.checkbox_ZWT,'Value')+...
get(handles.checkbox_ZWT_LUMPED,'Value')+...
get(handles.checkbox_WDEW,'Value')+...
get(handles.checkbox_IN_LONG,'Value')+...
get(handles.checkbox_GRND_FLUX,'Value')+...
get(handles.checkbox_FUSION,'Value')+...
get(handles.checkbox_ENERGY_ERROR,'Value')+...
get(handles.checkbox_DELTAH,'Value')+...
get(handles.checkbox_DELTACC,'Value')+...
get(handles.checkbox_ADVECTION,'Value')+...
get(handles.checkbox_ADV_SENS,'Value')+...
get(handles.checkbox_LATENT,'Value')+...
get(handles.checkbox_LATENT_SUB,'Value')+...
get(handles.checkbox_MELT_ENERGY,'Value')+...
get(handles.checkbox_NET_LONG,'Value')+...
get(handles.checkbox_NET_SHORT,'Value')+...
get(handles.checkbox_R_NET,'Value')+...
get(handles.checkbox_RFRZ_ENERGY,'Value')+...
get(handles.checkbox_SENSIBLE,'Value')+...
get(handles.checkbox_SNOW_FLUX,'Value')+...
get(handles.checkbox_SNOWT_FBFLAG,'Value')+...
get(handles.checkbox_SNOW_SURF_TEMP,'Value')+...
get(handles.checkbox_SNOW_PACK_TEMP,'Value')+...
get(handles.checkbox_SALBEDO,'Value')+...
get(handles.checkbox_RAD_TEMP,'Value')+...
get(handles.checkbox_LAKE_SURF_TEMP,'Value')+...
get(handles.checkbox_LAKE_ICE_TEMP,'Value')+...
get(handles.checkbox_FDEPTH,'Value')+...
get(handles.checkbox_BARESOILT,'Value')+...
get(handles.checkbox_ALBEDO,'Value')+...
get(handles.checkbox_SOIL_TEMP,'Value')+...
get(handles.checkbox_SOIL_TNODE,'Value')+...
get(handles.checkbox_SOIL_TNODE_WL,'Value')+...
get(handles.checkbox_SOILT_FBFLAG,'Value')+...
get(handles.checkbox_SURF_TEMP,'Value')+...
get(handles.checkbox_SURFT_FBFLAG,'Value')+...
get(handles.checkbox_TCAN_FBFLAG,'Value')+...
get(handles.checkbox_TDEPTH,'Value')+...
get(handles.checkbox_TFOL_FBFLAG,'Value')+...
get(handles.checkbox_VEGT,'Value')+...
get(handles.checkbox_AERO_COND,'Value')+...
get(handles.checkbox_AERO_COND1,'Value')+...
get(handles.checkbox_AERO_COND2,'Value')+...
get(handles.checkbox_AERO_RESIST,'Value')+...
get(handles.checkbox_AERO_RESIST1,'Value')+...
get(handles.checkbox_AERO_RESIST2,'Value')+...
get(handles.checkbox_AIR_TEMP,'Value')+...
get(handles.checkbox_CATM,'Value')+...
get(handles.checkbox_COSZEN,'Value')+...
get(handles.checkbox_DENSITY,'Value')+...
get(handles.checkbox_FDIR,'Value')+...
get(handles.checkbox_LAI,'Value')+...
get(handles.checkbox_WIND,'Value')+...
get(handles.checkbox_VPD,'Value')+...
get(handles.checkbox_VP,'Value')+...
get(handles.checkbox_VEGCOVER,'Value')+...
get(handles.checkbox_TSKC,'Value')+...
get(handles.checkbox_SURF_COND,'Value')+...
get(handles.checkbox_SHORTWAVE,'Value')+...
get(handles.checkbox_REL_HUMID,'Value')+...
get(handles.checkbox_QAIR,'Value')+...
get(handles.checkbox_PRESSURE,'Value')+...
get(handles.checkbox_PAR,'Value')+...
get(handles.checkbox_LONGWAVE,'Value')+...
get(handles.checkbox_CSLOW,'Value')+...
get(handles.checkbox_CINTER,'Value')+...
get(handles.checkbox_CLITTER,'Value')+...
get(handles.checkbox_NEE,'Value')+...
get(handles.checkbox_RHET,'Value')+...
get(handles.checkbox_LITTERFALL,'Value')+...
get(handles.checkbox_NPP,'Value')+...
get(handles.checkbox_RAUT,'Value')+...
get(handles.checkbox_GPP,'Value')+...
get(handles.checkbox_APAR,'Value');

function n = count_nvars_band(handles)
n = ...
get(handles.checkbox_ADV_SENS_BAND,'Value')+...
get(handles.checkbox_ADVECTION_BAND,'Value')+...
get(handles.checkbox_ALBEDO_BAND,'Value')+...
get(handles.checkbox_DELTACC_BAND,'Value')+...
get(handles.checkbox_GRND_FLUX_BAND,'Value')+...
get(handles.checkbox_IN_LONG_BAND,'Value')+...
get(handles.checkbox_LATENT_BAND,'Value')+...
get(handles.checkbox_LATENT_SUB_BAND,'Value')+...
get(handles.checkbox_MELT_ENERGY_BAND,'Value')+...
get(handles.checkbox_NET_LONG_BAND,'Value')+...
get(handles.checkbox_NET_SHORT_BAND,'Value')+...
get(handles.checkbox_SWE_BAND,'Value')+...
get(handles.checkbox_SNOW_SURFT_BAND,'Value')+...
get(handles.checkbox_SNOW_PACKT_BAND,'Value')+...
get(handles.checkbox_SNOW_MELT_BAND,'Value')+...
get(handles.checkbox_SNOW_FLUX_BAND,'Value')+...
get(handles.checkbox_SNOW_DEPTH_BAND,'Value')+...
get(handles.checkbox_SNOW_COVER_BAND,'Value')+...
get(handles.checkbox_SNOW_CANOPY_BAND,'Value')+...
get(handles.checkbox_SENSIBLE_BAND,'Value')+...
get(handles.checkbox_RFRZ_ENERGY_BAND,'Value');


function selvars_list = select_vars(handles)
selvars_list = cell(0,1);
n = 1;
if get(handles.checkbox_PREC,'Value'); selvars_list{n} = get(handles.checkbox_PREC,'String'); n=n+1; end
if get(handles.checkbox_EVAP,'Value'); selvars_list{n} = get(handles.checkbox_EVAP,'String'); n=n+1; end
if get(handles.checkbox_RUNOFF,'Value'); selvars_list{n} = get(handles.checkbox_RUNOFF,'String'); n=n+1; end
if get(handles.checkbox_BASEFLOW,'Value'); selvars_list{n} = get(handles.checkbox_BASEFLOW,'String'); n=n+1; end
if get(handles.checkbox_WDEW,'Value'); selvars_list{n} = get(handles.checkbox_WDEW,'String'); n=n+1; end
if get(handles.checkbox_SOIL_LIQ,'Value'); selvars_list{n} = get(handles.checkbox_SOIL_LIQ,'String'); n=n+1; end
if get(handles.checkbox_NET_SHORT,'Value'); selvars_list{n} = get(handles.checkbox_NET_SHORT,'String'); n=n+1; end
if get(handles.checkbox_R_NET,'Value'); selvars_list{n} = get(handles.checkbox_R_NET,'String'); n=n+1; end
if get(handles.checkbox_EVAP_CANOP,'Value'); selvars_list{n} = get(handles.checkbox_EVAP_CANOP,'String'); n=n+1; end
if get(handles.checkbox_TRANSP_VEG,'Value'); selvars_list{n} = get(handles.checkbox_TRANSP_VEG,'String'); n=n+1; end
if get(handles.checkbox_EVAP_BARE,'Value'); selvars_list{n} = get(handles.checkbox_EVAP_BARE,'String'); n=n+1; end
if get(handles.checkbox_SUB_CANOP,'Value'); selvars_list{n} = get(handles.checkbox_SUB_CANOP,'String'); n=n+1; end
if get(handles.checkbox_SUB_SNOW,'Value'); selvars_list{n} = get(handles.checkbox_SUB_SNOW,'String'); n=n+1; end
if get(handles.checkbox_AERO_RESIST,'Value'); selvars_list{n} = get(handles.checkbox_AERO_RESIST,'String'); n=n+1; end
if get(handles.checkbox_SURF_TEMP,'Value'); selvars_list{n} = get(handles.checkbox_SURF_TEMP,'String'); n=n+1; end
if get(handles.checkbox_ALBEDO,'Value'); selvars_list{n} = get(handles.checkbox_ALBEDO,'String'); n=n+1; end
if get(handles.checkbox_REL_HUMID,'Value'); selvars_list{n} = get(handles.checkbox_REL_HUMID,'String'); n=n+1; end
if get(handles.checkbox_IN_LONG,'Value'); selvars_list{n} = get(handles.checkbox_IN_LONG,'String'); n=n+1; end
if get(handles.checkbox_AIR_TEMP,'Value'); selvars_list{n} = get(handles.checkbox_AIR_TEMP,'String'); n=n+1; end
if get(handles.checkbox_WIND,'Value'); selvars_list{n} = get(handles.checkbox_WIND,'String'); n=n+1; end

if get(handles.checkbox_SWE,'Value'); selvars_list{n} = get(handles.checkbox_SWE,'String'); n=n+1; end
if get(handles.checkbox_SNOW_DEPTH,'Value'); selvars_list{n} = get(handles.checkbox_SNOW_DEPTH,'String'); n=n+1; end
if get(handles.checkbox_SNOW_CANOPY,'Value'); selvars_list{n} = get(handles.checkbox_SNOW_CANOPY,'String'); n=n+1; end
if get(handles.checkbox_SNOW_COVER,'Value'); selvars_list{n} = get(handles.checkbox_SNOW_COVER,'String'); n=n+1; end

if get(handles.checkbox_LAKE_BF_IN,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_LAKE_BF_IN_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN_V,'String'); n=n+1; end
if get(handles.checkbox_LAKE_BF_OUT,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_OUT,'String'); n=n+1; end
if get(handles.checkbox_LAKE_BF_OUT_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_OUT_V,'String'); n=n+1; end
if get(handles.checkbox_LAKE_CHAN_IN,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_CHAN_IN,'String'); n=n+1; end
if get(handles.checkbox_LAKE_CHAN_IN_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_CHAN_IN_V,'String'); n=n+1; end
if get(handles.checkbox_LAKE_CHAN_OUT,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_CHAN_OUT,'String'); n=n+1; end
if get(handles.checkbox_LAKE_CHAN_OUT_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_CHAN_OUT_V,'String'); n=n+1; end
if get(handles.checkbox_LAKE_DSTOR,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_DSTOR,'String'); n=n+1; end
if get(handles.checkbox_LAKE_DSTOR_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_DSTOR_V,'String'); n=n+1; end
if get(handles.checkbox_LAKE_DSWE,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_DSWE,'String'); n=n+1; end
if get(handles.checkbox_LAKE_DSWE_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_DSWE_V,'String'); n=n+1; end
if get(handles.checkbox_LAKE_RO_IN_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_RO_IN_V,'String'); n=n+1; end
if get(handles.checkbox_LAKE_RO_IN,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_RO_IN,'String'); n=n+1; end
if get(handles.checkbox_LAKE_RCHRG_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_RCHRG_V,'String'); n=n+1; end
if get(handles.checkbox_LAKE_RCHRG,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_RCHRG,'String'); n=n+1; end
if get(handles.checkbox_LAKE_PREC_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_PREC_V,'String'); n=n+1; end
if get(handles.checkbox_LAKE_EVAP_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_EVAP_V,'String'); n=n+1; end
if get(handles.checkbox_LAKE_EVAP,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_EVAP,'String'); n=n+1; end
if get(handles.checkbox_LAKE_VAPFLX,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_VAPFLX,'String'); n=n+1; end
if get(handles.checkbox_LAKE_VAPFLX_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_VAPFLX_V,'String'); n=n+1; end
if get(handles.checkbox_WATER_ERROR,'Value'); selvars_list{n} = get(handles.checkbox_WATER_ERROR,'String'); n=n+1; end
if get(handles.checkbox_SUB_SURFACE,'Value'); selvars_list{n} = get(handles.checkbox_SUB_SURFACE,'String'); n=n+1; end
if get(handles.checkbox_SNOWF,'Value'); selvars_list{n} = get(handles.checkbox_SNOWF,'String'); n=n+1; end
if get(handles.checkbox_SNOW_MELT,'Value'); selvars_list{n} = get(handles.checkbox_SNOW_MELT,'String'); n=n+1; end
if get(handles.checkbox_REFREEZE,'Value'); selvars_list{n} = get(handles.checkbox_REFREEZE,'String'); n=n+1; end
if get(handles.checkbox_RAINF,'Value'); selvars_list{n} = get(handles.checkbox_RAINF,'String'); n=n+1; end
if get(handles.checkbox_PET_VEGNOCR,'Value'); selvars_list{n} = get(handles.checkbox_PET_VEGNOCR,'String'); n=n+1; end
if get(handles.checkbox_PET_NATVEG,'Value'); selvars_list{n} = get(handles.checkbox_PET_NATVEG,'String'); n=n+1; end
if get(handles.checkbox_PET_TALL,'Value'); selvars_list{n} = get(handles.checkbox_PET_TALL,'String'); n=n+1; end
if get(handles.checkbox_PET_SHORT,'Value'); selvars_list{n} = get(handles.checkbox_PET_SHORT,'String'); n=n+1; end
if get(handles.checkbox_PET_H2OSURF,'Value'); selvars_list{n} = get(handles.checkbox_PET_H2OSURF,'String'); n=n+1; end
if get(handles.checkbox_PET_SATSOIL,'Value'); selvars_list{n} = get(handles.checkbox_PET_SATSOIL,'String'); n=n+1; end
if get(handles.checkbox_INFLOW,'Value'); selvars_list{n} = get(handles.checkbox_INFLOW,'String'); n=n+1; end
if get(handles.checkbox_DELSWE,'Value'); selvars_list{n} = get(handles.checkbox_DELSWE,'String'); n=n+1; end
if get(handles.checkbox_DELSURFSTOR,'Value'); selvars_list{n} = get(handles.checkbox_DELSURFSTOR,'String'); n=n+1; end
if get(handles.checkbox_DELSOILMOIST,'Value'); selvars_list{n} = get(handles.checkbox_DELSOILMOIST,'String'); n=n+1; end
if get(handles.checkbox_DELINTERCEPT,'Value'); selvars_list{n} = get(handles.checkbox_DELINTERCEPT,'String'); n=n+1; end
if get(handles.checkbox_SUB_BLOWING,'Value'); selvars_list{n} = get(handles.checkbox_SUB_BLOWING,'String'); n=n+1; end
if get(handles.checkbox_ASAT,'Value'); selvars_list{n} = get(handles.checkbox_ASAT,'String'); n=n+1; end
if get(handles.checkbox_LAKE_AREA_FRAC,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_AREA_FRAC,'String'); n=n+1; end
if get(handles.checkbox_LAKE_ICE_HEIGHT,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_ICE_HEIGHT,'String'); n=n+1; end
if get(handles.checkbox_LAKE_MOIST,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_MOIST,'String'); n=n+1; end
if get(handles.checkbox_LAKE_DEPTH,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_DEPTH,'String'); n=n+1; end
if get(handles.checkbox_LAKE_SURF_AREA,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_SURF_AREA,'String'); n=n+1; end
if get(handles.checkbox_LAKE_SWE,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_SWE,'String'); n=n+1; end
if get(handles.checkbox_LAKE_SWE_V,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_SWE_V,'String'); n=n+1; end
if get(handles.checkbox_LAKE_ICE,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_ICE,'String'); n=n+1; end
if get(handles.checkbox_LAKE_ICE_FRACT,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_ICE_FRACT,'String'); n=n+1; end
if get(handles.checkbox_LAKE_VOLUME,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_VOLUME,'String'); n=n+1; end
if get(handles.checkbox_ROOTMOIST,'Value'); selvars_list{n} = get(handles.checkbox_ROOTMOIST,'String'); n=n+1; end
if get(handles.checkbox_SMFROZFRAC,'Value'); selvars_list{n} = get(handles.checkbox_SMFROZFRAC,'String'); n=n+1; end
if get(handles.checkbox_SMLIQFRAC,'Value'); selvars_list{n} = get(handles.checkbox_SMLIQFRAC,'String'); n=n+1; end
if get(handles.checkbox_SOIL_ICE,'Value'); selvars_list{n} = get(handles.checkbox_SOIL_ICE,'String'); n=n+1; end
if get(handles.checkbox_SOIL_MOIST,'Value'); selvars_list{n} = get(handles.checkbox_SOIL_MOIST,'String'); n=n+1; end
if get(handles.checkbox_SOIL_WET,'Value'); selvars_list{n} = get(handles.checkbox_SOIL_WET,'String'); n=n+1; end
if get(handles.checkbox_SURF_FROST_FRAC,'Value'); selvars_list{n} = get(handles.checkbox_SURF_FROST_FRAC,'String'); n=n+1; end
if get(handles.checkbox_SURFSTOR,'Value'); selvars_list{n} = get(handles.checkbox_SURFSTOR,'String'); n=n+1; end
if get(handles.checkbox_ZWT,'Value'); selvars_list{n} = get(handles.checkbox_ZWT,'String'); n=n+1; end
if get(handles.checkbox_ZWT_LUMPED,'Value'); selvars_list{n} = get(handles.checkbox_ZWT_LUMPED,'String'); n=n+1; end
if get(handles.checkbox_GRND_FLUX,'Value'); selvars_list{n} = get(handles.checkbox_GRND_FLUX,'String'); n=n+1; end
if get(handles.checkbox_FUSION,'Value'); selvars_list{n} = get(handles.checkbox_FUSION,'String'); n=n+1; end
if get(handles.checkbox_ENERGY_ERROR,'Value'); selvars_list{n} = get(handles.checkbox_ENERGY_ERROR,'String'); n=n+1; end
if get(handles.checkbox_DELTAH,'Value'); selvars_list{n} = get(handles.checkbox_DELTAH,'String'); n=n+1; end
if get(handles.checkbox_DELTACC,'Value'); selvars_list{n} = get(handles.checkbox_DELTACC,'String'); n=n+1; end
if get(handles.checkbox_ADVECTION,'Value'); selvars_list{n} = get(handles.checkbox_ADVECTION,'String'); n=n+1; end
if get(handles.checkbox_ADV_SENS,'Value'); selvars_list{n} = get(handles.checkbox_ADV_SENS,'String'); n=n+1; end
if get(handles.checkbox_LATENT,'Value'); selvars_list{n} = get(handles.checkbox_LATENT,'String'); n=n+1; end
if get(handles.checkbox_LATENT_SUB,'Value'); selvars_list{n} = get(handles.checkbox_LATENT_SUB,'String'); n=n+1; end
if get(handles.checkbox_MELT_ENERGY,'Value'); selvars_list{n} = get(handles.checkbox_MELT_ENERGY,'String'); n=n+1; end
if get(handles.checkbox_NET_LONG,'Value'); selvars_list{n} = get(handles.checkbox_NET_LONG,'String'); n=n+1; end
if get(handles.checkbox_RFRZ_ENERGY,'Value'); selvars_list{n} = get(handles.checkbox_RFRZ_ENERGY,'String'); n=n+1; end
if get(handles.checkbox_SENSIBLE,'Value'); selvars_list{n} = get(handles.checkbox_SENSIBLE,'String'); n=n+1; end
if get(handles.checkbox_SNOW_FLUX,'Value'); selvars_list{n} = get(handles.checkbox_SNOW_FLUX,'String'); n=n+1; end
if get(handles.checkbox_SNOWT_FBFLAG,'Value'); selvars_list{n} = get(handles.checkbox_SNOWT_FBFLAG,'String'); n=n+1; end
if get(handles.checkbox_SNOW_SURF_TEMP,'Value'); selvars_list{n} = get(handles.checkbox_SNOW_SURF_TEMP,'String'); n=n+1; end
if get(handles.checkbox_SNOW_PACK_TEMP,'Value'); selvars_list{n} = get(handles.checkbox_SNOW_PACK_TEMP,'String'); n=n+1; end
if get(handles.checkbox_SALBEDO,'Value'); selvars_list{n} = get(handles.checkbox_SALBEDO,'String'); n=n+1; end
if get(handles.checkbox_RAD_TEMP,'Value'); selvars_list{n} = get(handles.checkbox_RAD_TEMP,'String'); n=n+1; end
if get(handles.checkbox_LAKE_SURF_TEMP,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_SURF_TEMP,'String'); n=n+1; end
if get(handles.checkbox_LAKE_ICE_TEMP,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_ICE_TEMP,'String'); n=n+1; end
if get(handles.checkbox_FDEPTH,'Value'); selvars_list{n} = get(handles.checkbox_FDEPTH,'String'); n=n+1; end
if get(handles.checkbox_BARESOILT,'Value'); selvars_list{n} = get(handles.checkbox_BARESOILT,'String'); n=n+1; end
if get(handles.checkbox_SOIL_TEMP,'Value'); selvars_list{n} = get(handles.checkbox_SOIL_TEMP,'String'); n=n+1; end
if get(handles.checkbox_SOIL_TNODE,'Value'); selvars_list{n} = get(handles.checkbox_SOIL_TNODE,'String'); n=n+1; end
if get(handles.checkbox_SOIL_TNODE_WL,'Value'); selvars_list{n} = get(handles.checkbox_SOIL_TNODE_WL,'String'); n=n+1; end
if get(handles.checkbox_SOILT_FBFLAG,'Value'); selvars_list{n} = get(handles.checkbox_SOILT_FBFLAG,'String'); n=n+1; end
if get(handles.checkbox_SURFT_FBFLAG,'Value'); selvars_list{n} = get(handles.checkbox_SURFT_FBFLAG,'String'); n=n+1; end
if get(handles.checkbox_TCAN_FBFLAG,'Value'); selvars_list{n} = get(handles.checkbox_TCAN_FBFLAG,'String'); n=n+1; end
if get(handles.checkbox_TDEPTH,'Value'); selvars_list{n} = get(handles.checkbox_TDEPTH,'String'); n=n+1; end
if get(handles.checkbox_TFOL_FBFLAG,'Value'); selvars_list{n} = get(handles.checkbox_TFOL_FBFLAG,'String'); n=n+1; end
if get(handles.checkbox_VEGT,'Value'); selvars_list{n} = get(handles.checkbox_VEGT,'String'); n=n+1; end
if get(handles.checkbox_AERO_COND,'Value'); selvars_list{n} = get(handles.checkbox_AERO_COND,'String'); n=n+1; end
if get(handles.checkbox_AERO_COND1,'Value'); selvars_list{n} = get(handles.checkbox_AERO_COND1,'String'); n=n+1; end
if get(handles.checkbox_AERO_COND2,'Value'); selvars_list{n} = get(handles.checkbox_AERO_COND2,'String'); n=n+1; end
if get(handles.checkbox_AERO_RESIST1,'Value'); selvars_list{n} = get(handles.checkbox_AERO_RESIST1,'String'); n=n+1; end
if get(handles.checkbox_AERO_RESIST2,'Value'); selvars_list{n} = get(handles.checkbox_AERO_RESIST2,'String'); n=n+1; end
if get(handles.checkbox_CATM,'Value'); selvars_list{n} = get(handles.checkbox_CATM,'String'); n=n+1; end
if get(handles.checkbox_COSZEN,'Value'); selvars_list{n} = get(handles.checkbox_COSZEN,'String'); n=n+1; end
if get(handles.checkbox_DENSITY,'Value'); selvars_list{n} = get(handles.checkbox_DENSITY,'String'); n=n+1; end
if get(handles.checkbox_FDIR,'Value'); selvars_list{n} = get(handles.checkbox_FDIR,'String'); n=n+1; end
if get(handles.checkbox_LAI,'Value'); selvars_list{n} = get(handles.checkbox_LAI,'String'); n=n+1; end
if get(handles.checkbox_VPD,'Value'); selvars_list{n} = get(handles.checkbox_VPD,'String'); n=n+1; end
if get(handles.checkbox_VP,'Value'); selvars_list{n} = get(handles.checkbox_VP,'String'); n=n+1; end
if get(handles.checkbox_VEGCOVER,'Value'); selvars_list{n} = get(handles.checkbox_VEGCOVER,'String'); n=n+1; end
if get(handles.checkbox_TSKC,'Value'); selvars_list{n} = get(handles.checkbox_TSKC,'String'); n=n+1; end
if get(handles.checkbox_SURF_COND,'Value'); selvars_list{n} = get(handles.checkbox_SURF_COND,'String'); n=n+1; end
if get(handles.checkbox_SHORTWAVE,'Value'); selvars_list{n} = get(handles.checkbox_SHORTWAVE,'String'); n=n+1; end
if get(handles.checkbox_QAIR,'Value'); selvars_list{n} = get(handles.checkbox_QAIR,'String'); n=n+1; end
if get(handles.checkbox_PRESSURE,'Value'); selvars_list{n} = get(handles.checkbox_PRESSURE,'String'); n=n+1; end
if get(handles.checkbox_PAR,'Value'); selvars_list{n} = get(handles.checkbox_PAR,'String'); n=n+1; end
if get(handles.checkbox_LONGWAVE,'Value'); selvars_list{n} = get(handles.checkbox_LONGWAVE,'String'); n=n+1; end
if get(handles.checkbox_CSLOW,'Value'); selvars_list{n} = get(handles.checkbox_CSLOW,'String'); n=n+1; end
if get(handles.checkbox_CINTER,'Value'); selvars_list{n} = get(handles.checkbox_CINTER,'String'); n=n+1; end
if get(handles.checkbox_CLITTER,'Value'); selvars_list{n} = get(handles.checkbox_CLITTER,'String'); n=n+1; end
if get(handles.checkbox_NEE,'Value'); selvars_list{n} = get(handles.checkbox_NEE,'String'); n=n+1; end
if get(handles.checkbox_RHET,'Value'); selvars_list{n} = get(handles.checkbox_RHET,'String'); n=n+1; end
if get(handles.checkbox_LITTERFALL,'Value'); selvars_list{n} = get(handles.checkbox_LITTERFALL,'String'); n=n+1; end
if get(handles.checkbox_NPP,'Value'); selvars_list{n} = get(handles.checkbox_NPP,'String'); n=n+1; end
if get(handles.checkbox_RAUT,'Value'); selvars_list{n} = get(handles.checkbox_RAUT,'String'); n=n+1; end
if get(handles.checkbox_GPP,'Value'); selvars_list{n} = get(handles.checkbox_GPP,'String'); n=n+1; end
if get(handles.checkbox_APAR,'Value'); selvars_list{n} = get(handles.checkbox_APAR,'String'); n=n+1; end


function selvars_list = select_vars_band(handles)
selvars_list = cell(0,1);
n = 1;
if get(handles.checkbox_ADV_SENS_BAND,'Value'); selvars_list{n} = get(handles.checkbox_ADV_SENS_BAND,'String'); n=n+1; end
if get(handles.checkbox_ADVECTION_BAND,'Value'); selvars_list{n} = get(handles.checkbox_ADVECTION_BAND,'String'); n=n+1; end
if get(handles.checkbox_ALBEDO_BAND,'Value'); selvars_list{n} = get(handles.checkbox_ALBEDO_BAND,'String'); n=n+1; end
if get(handles.checkbox_DELTACC_BAND,'Value'); selvars_list{n} = get(handles.checkbox_DELTACC_BAND,'String'); n=n+1; end
if get(handles.checkbox_GRND_FLUX_BAND,'Value'); selvars_list{n} = get(handles.checkbox_GRND_FLUX_BAND,'String'); n=n+1; end
if get(handles.checkbox_IN_LONG_BAND,'Value'); selvars_list{n} = get(handles.checkbox_IN_LONG_BAND,'String'); n=n+1; end
if get(handles.checkbox_LATENT_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LATENT_BAND,'String'); n=n+1; end
if get(handles.checkbox_LATENT_SUB_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_MELT_ENERGY_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_NET_LONG_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_NET_SHORT_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_SWE_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_SNOW_SURFT_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_SNOW_PACKT_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_SNOW_MELT_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_SNOW_FLUX_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_SNOW_DEPTH_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_SNOW_COVER_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_SNOW_CANOPY_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_SENSIBLE_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end
if get(handles.checkbox_RFRZ_ENERGY_BAND,'Value'); selvars_list{n} = get(handles.checkbox_LAKE_BF_IN,'String'); n=n+1; end




%%%%%%%%%%%%%%%%%%%%%%%%%%%%   VIC Global SAVE  %%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in pushbutton_SAVE.
function pushbutton_SAVE_Callback(hObject, eventdata, handles)

[savefile,savepath] = uiputfile([handles.lastvisitdir,'\*'],'Save file name');
if ~(savepath == 0)

handles.lastvisitdir =  savepath;   
    
fid = fopen([savepath,'\',savefile],'w');

open_statement = {
'#########################################################################'
'#                     VIC Global Parameters - v4.2'
'#'
'#                       Generated by VIC-ASSIST'
'#'
'#########################################################################'
};
for i = 1:size(open_statement,1)
    fprintf(fid,'%s\n',open_statement{i});
end

header_SimulationPar = {
' '    
'#########################################################################'
'#                       Simulation Parameters'
'#########################################################################'
};
for i = 1:size(header_SimulationPar,1)
    fprintf(fid,'%s\n',header_SimulationPar{i});
end
fprintf(fid,'NLAYER         %s\n',get(handles.edit_nlayer,'String'));
fprintf(fid,'NODES          %s\n',get(handles.edit_nodes,'String'));
fprintf(fid,'TIME_STEP      %s\n',get(handles.edit_time_step,'String'));
fprintf(fid,'SNOW_STEP      %s\n',get(handles.edit_snow_step,'String'));
fprintf(fid,'STARTYEAR      %s\n',get(handles.edit_startyear,'String'));
fprintf(fid,'STARTMONTH     %s\n',get(handles.edit_startmonth,'String'));
fprintf(fid,'STARTDAY       %s\n',get(handles.edit_startday,'String'));
fprintf(fid,'STARTHOUR      %s\n',get(handles.edit_starthour,'String'));
fprintf(fid,'ENDYEAR        %s\n',get(handles.edit_endyear,'String'));
fprintf(fid,'ENDMONTH       %s\n',get(handles.edit_endmonth,'String'));
fprintf(fid,'ENDDAY         %s\n',get(handles.edit_endday,'String'));


header_EnergyBalPar = {
' '    
'#########################################################################'
'#                         Energy Balance Parameters'
'#########################################################################'
};
for i = 1:size(header_EnergyBalPar,1)
    fprintf(fid,'%s\n',header_EnergyBalPar{i});
end
FULL_ENERGY_str = get(handles.popupmenu_FULL_ENERGY,'String');
CLOSE_ENERGY_str = get(handles.popupmenu_CLOSE_ENERGY,'String');
fprintf(fid,'FULL_ENERGY           %s\n',FULL_ENERGY_str(get(handles.popupmenu_FULL_ENERGY,'Value'),:));
fprintf(fid,'CLOSE_ENERGY          %s\n',CLOSE_ENERGY_str(get(handles.popupmenu_CLOSE_ENERGY,'Value'),:));


if get(handles.checkbox_SoilTempPar,'Value')
    
header_SoilTempPar = {
' '    
'#########################################################################'
'#                         Soil Temperature Parameters'
'#########################################################################'
};
for i = 1:size(header_SoilTempPar,1)
    fprintf(fid,'%s\n',header_SoilTempPar{i});
end
FROZEN_SOIL_str = get(handles.popupmenu_FROZEN_SOIL,'String');
FROZEN_SOIL_val = get(handles.popupmenu_FROZEN_SOIL,'Value');
fprintf(fid,'FROZEN_SOIL           %s\n',FROZEN_SOIL_str(FROZEN_SOIL_val,:));

if strcmp(deblank(FROZEN_SOIL_str(FROZEN_SOIL_val,:)),'TRUE') && get(handles.checkbox_SoilTempPar,'Value')
    QUICK_FLUX_str = get(handles.popupmenu_QUICK_FLUX,'String');
    QUICK_FLUX_val = get(handles.popupmenu_QUICK_FLUX,'Value');
    IMPLICIT_str = get(handles.popupmenu_IMPLICIT,'String');
    IMPLICIT_val = get(handles.popupmenu_IMPLICIT,'Value');
    QUICK_SOLVE_str = get(handles.popupmenu_QUICK_SOLVE,'String');
    QUICK_SOLVE_val = get(handles.popupmenu_QUICK_SOLVE,'Value');
    NO_FLUX_str = get(handles.popupmenu_NO_FLUX,'String');
    NO_FLUX_val = get(handles.popupmenu_NO_FLUX,'Value');
    EXP_TRANS_str = get(handles.popupmenu_EXP_TRANS,'String');
    EXP_TRANS_val = get(handles.popupmenu_EXP_TRANS,'Value');
    GRND_FLUX_TYPE_str = get(handles.popupmenu_GRND_FLUX_TYPE,'String');
    GRND_FLUX_TYPE_val = get(handles.popupmenu_GRND_FLUX_TYPE,'Value');
    TFALLBACK_str = get(handles.popupmenu_TFALLBACK,'String');
    TFALLBACK_val = get(handles.popupmenu_TFALLBACK,'Value');
    SPATIAL_FROST_str = get(handles.popupmenu_SPATIAL_FROST,'String');
    SPATIAL_FROST_val = get(handles.popupmenu_SPATIAL_FROST,'Value');
    
    fprintf(fid,'QUICK_FLUX            %s\n',QUICK_FLUX_str(QUICK_FLUX_val,:));
    fprintf(fid,'IMPLICIT              %s\n',IMPLICIT_str(IMPLICIT_val,:));
    fprintf(fid,'QUICK_SOLVE           %s\n',QUICK_SOLVE_str(QUICK_SOLVE_val,:));
    fprintf(fid,'NO_FLUX               %s\n',NO_FLUX_str(NO_FLUX_val,:));
    fprintf(fid,'EXP_TRANS             %s\n',EXP_TRANS_str(EXP_TRANS_val,:));
    fprintf(fid,'GRND_FLUX_TYPE        %s\n',GRND_FLUX_TYPE_str(GRND_FLUX_TYPE_val,:));
    fprintf(fid,'TFALLBACK             %s\n',TFALLBACK_str(TFALLBACK_val,:));
 
    if strcmp(deblank(SPATIAL_FROST_str(SPATIAL_FROST_val,:)),'TRUE')
        fprintf(fid,'SPATIAL_FROST         %s    %s\n',SPATIAL_FROST_str(SPATIAL_FROST_val,:),get(handles.edit_Nfrost,'String'));
    else
        fprintf(fid,'SPATIAL_FROST         %s\n',SPATIAL_FROST_str(SPATIAL_FROST_val,:));
    end
end

elseif get(handles.checkbox_SoilTempPar,'Value') == 0
  
header_SoilTempPar = {
' '    
'#########################################################################'
'#                         Soil Temperature Parameters'
'#########################################################################'
};
for i = 1:size(header_SoilTempPar,1)
    fprintf(fid,'%s\n',header_SoilTempPar{i});
end
fprintf(fid,'FROZEN_SOIL           FALSE\n');    
fprintf(fid,'QUICK_FLUX            TRUE\n');

end

header_PrecipPar = {
' '    
'#########################################################################'
'#                 Precipitation (Rain and Snow) Parameters'
'#########################################################################'
};
for i = 1:size(header_PrecipPar,1)
    fprintf(fid,'%s\n',header_PrecipPar{i});
end

SNOW_DENSITY_str = get(handles.popupmenu_SNOW_DENSITY,'String');
SNOW_DENSITY_val = get(handles.popupmenu_SNOW_DENSITY,'Value');
BLOWING_str = get(handles.popupmenu_BLOWING,'String');
BLOWING_val = get(handles.popupmenu_BLOWING,'Value');
COMPUTE_TREELINE_str = get(handles.popupmenu_COMPUTE_TREELINE,'String');
COMPUTE_TREELINE_val = get(handles.popupmenu_COMPUTE_TREELINE,'Value');
CORRPREC_str = get(handles.popupmenu_CORRPREC,'String');
CORRPREC_val = get(handles.popupmenu_CORRPREC,'Value');
SPATIAL_SNOW_str = get(handles.popupmenu_SPATIAL_SNOW,'String');
SPATIAL_SNOW_val = get(handles.popupmenu_SPATIAL_SNOW,'Value');

fprintf(fid,'MAX_SNOW_TEMP         %s\n',get(handles.edit_MAX_SNOW_TEMP,'String'));
fprintf(fid,'MIN_RAIN_TEMP         %s\n',get(handles.edit_MIN_RAIN_TEMP,'String'));

fprintf(fid,'SNOW_DENSITY          %s\n',SNOW_DENSITY_str(SNOW_DENSITY_val,:));
fprintf(fid,'BLOWING               %s\n',BLOWING_str(BLOWING_val,:));
if strcmp(deblank(COMPUTE_TREELINE_str(COMPUTE_TREELINE_val,:)),'FALSE')
    fprintf(fid,'COMPUTE_TREELINE      %s\n',COMPUTE_TREELINE_str(COMPUTE_TREELINE_val,:));
else
    fprintf(fid,'COMPUTE_TREELINE      %s\n',get(handles.edit_VEG_CLASS_ID,'String'));
end
fprintf(fid,'CORRPREC              %s\n',CORRPREC_str(CORRPREC_val,:));
fprintf(fid,'SPATIAL_SNOW          %s\n',SPATIAL_SNOW_str(SPATIAL_SNOW_val,:));

SNOW_BAND_str = get(handles.edit_snow_band,'String');
if str2double(SNOW_BAND_str) == 1
    fprintf(fid,'SNOW_BAND             %s\n',SNOW_BAND_str);
else
    fprintf(fid,'SNOW_BAND             %s     %s\n',SNOW_BAND_str,strrep(get(handles.edit_snow_band_file,'String'),'\','/'));
end


header_ForcingPar = {
' '    
'#########################################################################'
'#                    Forcing Files and Parameters'
'#########################################################################'
};
for i = 1:size(header_ForcingPar,1)
    fprintf(fid,'%s\n',header_ForcingPar{i});
end
fprintf(fid,'FORCING1              %s/%s\n',strrep(get(handles.edit_forcingdir,'String'),'\','/'),get(handles.edit_forcingprefix,'String'));

FORCE_FORMAT_str = get(handles.popupmenu_FORCE_FORMAT,'String');
FORCE_FORMAT_val = get(handles.popupmenu_FORCE_FORMAT,'Value');
FORCE_ENDIAN_str = get(handles.popupmenu_FORCE_ENDIAN,'String');
FORCE_ENDIAN_val = get(handles.popupmenu_FORCE_ENDIAN,'Value');
fprintf(fid,'FORCE_FORMAT          %s\n',FORCE_FORMAT_str(FORCE_FORMAT_val,:));
fprintf(fid,'FORCE_ENDIAN          %s\n',FORCE_ENDIAN_str(FORCE_ENDIAN_val,:));
ntype_str = get(handles.edit_ntype,'String');
fprintf(fid,'N_TYPES               %s\n',ntype_str);
ntype_val = str2double(ntype_str);
table_data = get(handles.uitable_vartype,'Data');
if ~isempty(ntype_str)
    for i=1:ntype_val
        fprintf(fid,'FORCE_TYPE            %s\n',table_data{i,1});
    end
else
    for i=1:4
        fprintf(fid,'FORCE_TYPE            %s\n',' '); 
    end
end
fprintf(fid,'FORCE_DT              %s\n',get(handles.edit_FORCE_DT,'String'));
fprintf(fid,'FORCEYEAR             %s\n',get(handles.edit_FORCEYEAR,'String'));
fprintf(fid,'FORCEMONTH            %s\n',get(handles.edit_FORCEMONTH,'String'));
fprintf(fid,'FORCEDAY              %s\n',get(handles.edit_FORCEDAY,'String'));
fprintf(fid,'FORCEHOUR             %s\n',get(handles.edit_FORCEHOUR,'String'));
fprintf(fid,'GRID_DECIMAL          %s\n',get(handles.edit_GRID_DECIMAL,'String'));
fprintf(fid,'WIND_H                %s\n',get(handles.edit_WIND_H,'String'));
fprintf(fid,'MEASURE_H             %s\n',get(handles.edit_MEASURE_H,'String'));
ALMA_INPUT_str = get(handles.popupmenu_ALMA_INPUT,'String');
ALMA_INPUT_val = get(handles.popupmenu_ALMA_INPUT,'Value');
fprintf(fid,'ALMA_INPUT            %s\n',ALMA_INPUT_str(ALMA_INPUT_val,:));

header_LandSurfacePar = {
' '    
'#########################################################################'
'#                  Land Surface Files and Parameters'
'#########################################################################'
};
for i = 1:size(header_LandSurfacePar,1)
    fprintf(fid,'%s\n',header_LandSurfacePar{i});
end
fprintf(fid,'SOIL                  %s\n',strrep(get(handles.edit_soilparfile,'String'),'\','/'));
fprintf(fid,'VEGLIB                %s\n',strrep(get(handles.edit_vegelibparfile,'String'),'\','/'));
fprintf(fid,'VEGPARAM              %s\n',strrep(get(handles.edit_vegeparfile,'String'),'\','/'));

BASEFLOW_str = get(handles.popupmenu_BASEFLOW,'String');
BASEFLOW_val = get(handles.popupmenu_BASEFLOW,'Value');
VEGLIB_VEGCOVER_str = get(handles.popupmenu_VEGLIB_VEGCOVER,'String');
VEGLIB_VEGCOVER_val = get(handles.popupmenu_VEGLIB_VEGCOVER,'Value');
VEGPARAM_LAI_str = get(handles.popupmenu_VEGPARAM_LAI,'String');
VEGPARAM_LAI_val = get(handles.popupmenu_VEGPARAM_LAI,'Value');
VEGPARAM_ALB_str = get(handles.popupmenu_VEGPARAM_ALB,'String');
VEGPARAM_ALB_val = get(handles.popupmenu_VEGPARAM_ALB,'Value');
VEGPARAM_VEGCOVER_str = get(handles.popupmenu_VEGPARAM_VEGCOVER,'String');
VEGPARAM_VEGCOVER_val = get(handles.popupmenu_VEGPARAM_VEGCOVER,'Value');
LAI_SRC_str = get(handles.popupmenu_LAI_SRC,'String');
LAI_SRC_val = get(handles.popupmenu_LAI_SRC,'Value');
ALB_SRC_str = get(handles.popupmenu_ALB_SRC,'String');
ALB_SRC_val = get(handles.popupmenu_ALB_SRC,'Value');
VEGCOVER_SRC_str = get(handles.popupmenu_VEGCOVER_SRC,'String');
VEGCOVER_SRC_val = get(handles.popupmenu_VEGCOVER_SRC,'Value');
JULY_TAVG_SUPPLIED_str = get(handles.popupmenu_JULY_TAVG_SUPPLIED,'String');
JULY_TAVG_SUPPLIED_val = get(handles.popupmenu_JULY_TAVG_SUPPLIED,'Value');
ORGANIC_FRACT_str = get(handles.popupmenu_ORGANIC_FRACT,'String');
ORGANIC_FRACT_val = get(handles.popupmenu_ORGANIC_FRACT,'Value');

fprintf(fid,'BASEFLOW              %s\n',BASEFLOW_str(BASEFLOW_val,:));
fprintf(fid,'VEGLIB_VEGCOVER       %s\n',VEGLIB_VEGCOVER_str(VEGLIB_VEGCOVER_val,:));
fprintf(fid,'VEGPARAM_LAI          %s\n',VEGPARAM_LAI_str(VEGPARAM_LAI_val,:));
fprintf(fid,'VEGPARAM_ALB          %s\n',VEGPARAM_ALB_str(VEGPARAM_ALB_val,:));
fprintf(fid,'VEGPARAM_VEGCOVER     %s\n',VEGPARAM_VEGCOVER_str(VEGPARAM_VEGCOVER_val,:));
fprintf(fid,'LAI_SRC               %s\n',LAI_SRC_str(LAI_SRC_val,:));
fprintf(fid,'ALB_SRC               %s\n',ALB_SRC_str(ALB_SRC_val,:));
fprintf(fid,'VEGCOVER_SRC          %s\n',VEGCOVER_SRC_str(VEGCOVER_SRC_val,:));
fprintf(fid,'JULY_TAVG_SUPPLIED    %s\n',JULY_TAVG_SUPPLIED_str(JULY_TAVG_SUPPLIED_val,:));
fprintf(fid,'ORGANIC_FRACT         %s\n',ORGANIC_FRACT_str(ORGANIC_FRACT_val,:));
fprintf(fid,'ROOT_ZONES            %s\n',get(handles.edit_ROOT_ZONES,'String'));


header_RoutingPar = {
' '    
'#########################################################################'
'#                     Routing Files and Parameters'
'#########################################################################'
};
for i = 1:size(header_RoutingPar,1)
    fprintf(fid,'%s\n',header_RoutingPar{i});
end
fprintf(fid,'ROUTE                 %s\n',strrep(get(handles.edit_routparfile,'String'),'\','/'));
fprintf(fid,'ROUTE_OUTFILE         %s/%s\n',strrep(get(handles.edit_routoutdir,'String'),'\','/'),get(handles.edit_routoutname,'String'));



if get(handles.checkbox_StateFilePar,'Value')
    
header_StateFilePar = {
' '    
'#########################################################################'
'#                       State Files and Parameters'
'#########################################################################'
};
for i = 1:size(header_StateFilePar,1)
    fprintf(fid,'%s\n',header_StateFilePar{i});
end
fprintf(fid,'INIT_STATE            %s\n',get(handles.edit_InitialStateFile,'String'));
fprintf(fid,'STATENAME             %s/%s\n',strrep(get(handles.edit_statefiledir,'String'),'\','/'),get(handles.edit_statefiledir_prefix,'String'));
fprintf(fid,'STATEYEAR             %s\n',get(handles.edit_STATEYEAR,'String'));
fprintf(fid,'STATEMONTH            %s\n',get(handles.edit_STATEMONTH,'String'));
fprintf(fid,'STATEDAY              %s\n',get(handles.edit_STATEDAY,'String'));

BINARY_STATE_FILE_str = get(handles.popupmenu_BINARY_STATE_FILE,'String');
BINARY_STATE_FILE_val = get(handles.popupmenu_BINARY_STATE_FILE,'Value');
fprintf(fid,'BINARY_STATE_FILE     %s\n',BINARY_STATE_FILE_str(BINARY_STATE_FILE_val,:));

end

if get(handles.checkbox_LakeSimPar,'Value')
    
header_LakeSimPar = {
' '    
'#########################################################################'
'#                       Lake Simulation Parameters'
'#########################################################################'
};
for i = 1:size(header_LakeSimPar,1)
    fprintf(fid,'%s\n',header_LakeSimPar{i});
end
fprintf(fid,'LAKES                 %s\n',get(handles.edit_lakeparfile,'String'));

LAKE_PROFILE_str = get(handles.popupmenu_LAKE_PROFILE,'String');
LAKE_PROFILE_val = get(handles.popupmenu_LAKE_PROFILE,'Value');
fprintf(fid,'LAKE_PROFILE          %s\n',LAKE_PROFILE_str(LAKE_PROFILE_val,:));

EQUAL_AREA_str = get(handles.popupmenu_EQUAL_AREA,'String');
EQUAL_AREA_val = get(handles.popupmenu_EQUAL_AREA,'Value');
fprintf(fid,'EQUAL_AREA            %s\n',EQUAL_AREA_str(EQUAL_AREA_val,:));

fprintf(fid,'RESOLUTION            %s\n',get(handles.edit_RESOLUTION,'String'));

end

if get(handles.checkbox_MeteoForceDisagg,'Value')
    
header_MeteoForceDisaggPar = {
' '    
'#########################################################################'
'#             Meteorological Forcing Disaggregation Parameters'
'#########################################################################'
};
for i = 1:size(header_MeteoForceDisaggPar,1)
    fprintf(fid,'%s\n',header_MeteoForceDisaggPar{i});
end

OUTPUT_FORCE_str = get(handles.popupmenu_OUTPUT_FORCE,'String');
OUTPUT_FORCE_val = get(handles.popupmenu_OUTPUT_FORCE,'Value');
PLAPSE_str = get(handles.popupmenu_PLAPSE,'String');
PLAPSE_val = get(handles.popupmenu_PLAPSE,'Value');
MTCLIM_SWE_CORR_str = get(handles.popupmenu_MTCLIM_SWE_CORR,'String');
MTCLIM_SWE_CORR_val = get(handles.popupmenu_MTCLIM_SWE_CORR,'Value');
VP_ITER_str = get(handles.popupmenu_VP_ITER,'String');
VP_ITER_val = get(handles.popupmenu_VP_ITER,'Value');
VP_INTERP_str = get(handles.popupmenu_VP_INTERP,'String');
VP_INTERP_val = get(handles.popupmenu_VP_INTERP,'Value');
LW_TYPE_str = get(handles.popupmenu_LW_TYPE,'String');
LW_TYPE_val = get(handles.popupmenu_LW_TYPE,'Value');
LW_CLOUD_str = get(handles.popupmenu_LW_CLOUD,'String');
LW_CLOUD_val = get(handles.popupmenu_LW_CLOUD,'Value');

fprintf(fid,'OUTPUT_FORCE          %s\n',OUTPUT_FORCE_str(OUTPUT_FORCE_val,:));
fprintf(fid,'PLAPSE                %s\n',PLAPSE_str(PLAPSE_val,:));
fprintf(fid,'MTCLIM_SWE_CORR       %s\n',MTCLIM_SWE_CORR_str(MTCLIM_SWE_CORR_val,:));
fprintf(fid,'VP_ITER               %s\n',VP_ITER_str(VP_ITER_val,:));
fprintf(fid,'VP_INTERP             %s\n',VP_INTERP_str(VP_INTERP_val,:));
fprintf(fid,'LW_TYPE               %s\n',LW_TYPE_str(LW_TYPE_val,:));
fprintf(fid,'LW_CLOUD              %s\n',LW_CLOUD_str(LW_CLOUD_val,:));

fprintf(fid,'SW_PREC_THRESH        %s\n',get(handles.edit_SW_PREC_THRESH,'String'));

end


if get(handles.checkbox_TurbulentFluxPar,'Value')
    
header_TurbulentFluxPar = {
' '    
'#########################################################################'
'#                      Turbulent Flux Parameters'
'#########################################################################'
};
for i = 1:size(header_TurbulentFluxPar,1)
    fprintf(fid,'%s\n',header_TurbulentFluxPar{i});
end
fprintf(fid,'MIN_WIND_SPEED        %s\n',get(handles.edit_MIN_WIND_SPEED,'String'));

AERO_RESIST_CANSNOW_str = get(handles.popupmenu_AERO_RESIST_CANSNOW,'String');
AERO_RESIST_CANSNOW_val = get(handles.popupmenu_AERO_RESIST_CANSNOW,'Value');
fprintf(fid,'AERO_RESIST_CANSNOW   %s\n',AERO_RESIST_CANSNOW_str(AERO_RESIST_CANSNOW_val,:));

end

if get(handles.checkbox_CarbonCyclePar,'Value')
    
header_CarbonCyclePar = {
' '    
'#########################################################################'
'#                        Carbon Cycle Parameters'
'#########################################################################'
};
for i = 1:size(header_CarbonCyclePar,1)
    fprintf(fid,'%s\n',header_CarbonCyclePar{i});
end
CARBON_str = get(handles.popupmenu_CARBON,'String');
CARBON_val = get(handles.popupmenu_CARBON,'Value');
VEGLIB_PHOTO_str = get(handles.popupmenu_VEGLIB_PHOTO,'String');
VEGLIB_PHOTO_val = get(handles.popupmenu_VEGLIB_PHOTO,'Value');
RC_MODE_str = get(handles.popupmenu_RC_MODE,'String');
RC_MODE_val = get(handles.popupmenu_RC_MODE,'Value');

fprintf(fid,'CARBON                %s\n',CARBON_str(CARBON_val,:));
fprintf(fid,'VEGLIB_PHOTO          %s\n',VEGLIB_PHOTO_str(VEGLIB_PHOTO_val,:));
fprintf(fid,'RC_MODE               %s\n',RC_MODE_str(RC_MODE_val,:));

end

if get(handles.checkbox_Miscellaneous,'Value')
    
header_MiscellaneousPar = {
' '    
'#########################################################################'
'#                   Miscellaneous Simulation Parameters'
'#########################################################################'
};
for i = 1:size(header_MiscellaneousPar,1)
    fprintf(fid,'%s\n',header_MiscellaneousPar{i});
end
CONTINUEONERROR_str = get(handles.popupmenu_CONTINUEONERROR,'String');
CONTINUEONERROR_val = get(handles.popupmenu_CONTINUEONERROR,'Value');

fprintf(fid,'CONTINUEONERROR       %s\n',CONTINUEONERROR_str(CONTINUEONERROR_val,:));

end


header_OutputContent = {
' '    
'#########################################################################'
'#                          Output File Contents'
'#########################################################################'
};
for i = 1:size(header_OutputContent,1)
    fprintf(fid,'%s\n',header_OutputContent{i});
end
nvars = count_nvars(handles);
nvars_band = count_nvars_band(handles);
selvars = select_vars(handles);

n_outfiles = 1;
if nvars_band >= 1
    n_outfiles = n_outfiles + 1;
end
    
outfile_prefix = deblank(get(handles.edit_result_prefix,'String'));

fprintf(fid,'N_OUTFILES     %s\n',num2str(n_outfiles));
fprintf(fid,'\n');
fprintf(fid,'OUTFILE        %s     %s\n',outfile_prefix,num2str(nvars));
for i = 1:nvars
    fprintf(fid,'OUTVAR         OUT_%s\n',selvars{i});    
end

if nvars_band >= 1
    fprintf(fid,'\n');
    fprintf(fid,'OUTFILE        %s     %s\n','band',num2str(nvars_band));
    selvars_band = select_vars_band(handles);
    for i = 1:nvars_band
        fprintf(fid,'OUTVAR         OUT_%s\n',selvars_band{i});
    end
end


header_OutputPar = {
' '    
'#########################################################################'
'#                     Output Files and Parameters'
'#########################################################################'
};
for i = 1:size(header_OutputPar,1)
    fprintf(fid,'%s\n',header_OutputPar{i});
end
fprintf(fid,'RESULT_DIR            %s\n',strrep(get(handles.edit_resultdir,'String'),'\','/'));
fprintf(fid,'OUT_STEP              %s\n',get(handles.edit_OUT_STEP,'String'));
fprintf(fid,'SKIPYEAR              %s\n',get(handles.edit_SKIPYEAR,'String'));

COMPRESS_str = get(handles.popupmenu_COMPRESS,'String');
COMPRESS_val = get(handles.popupmenu_COMPRESS,'Value');
BINARY_OUTPUT_str = get(handles.popupmenu_BINARY_OUTPUT,'String');
BINARY_OUTPUT_val = get(handles.popupmenu_BINARY_OUTPUT,'Value');
ALMA_OUTPUT_str = get(handles.popupmenu_ALMA_OUTPUT,'String');
ALMA_OUTPUT_val = get(handles.popupmenu_ALMA_OUTPUT,'Value');
MOISTFRACT_str = get(handles.popupmenu_MOISTFRACT,'String');
MOISTFRACT_val = get(handles.popupmenu_MOISTFRACT,'Value');
PRT_HEADER_str = get(handles.popupmenu_PRT_HEADER,'String');
PRT_HEADER_val = get(handles.popupmenu_PRT_HEADER,'Value');
PRT_SNOW_BAND_str = get(handles.popupmenu_PRT_SNOW_BAND,'String');
PRT_SNOW_BAND_val = get(handles.popupmenu_PRT_SNOW_BAND,'Value');

fprintf(fid,'COMPRESS              %s\n',COMPRESS_str(COMPRESS_val,:));
fprintf(fid,'BINARY_OUTPUT         %s\n',BINARY_OUTPUT_str(BINARY_OUTPUT_val,:));
fprintf(fid,'ALMA_OUTPUT           %s\n',ALMA_OUTPUT_str(ALMA_OUTPUT_val,:));
fprintf(fid,'MOISTFRACT            %s\n',MOISTFRACT_str(MOISTFRACT_val,:));
fprintf(fid,'PRT_HEADER            %s\n',PRT_HEADER_str(PRT_HEADER_val,:));
fprintf(fid,'PRT_SNOW_BAND         %s\n',PRT_SNOW_BAND_str(PRT_SNOW_BAND_val,:));


fclose(fid);

end
guidata(hObject,handles);


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   Run VIC   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in pushbutton_VICglobalconfigfile_search.
function pushbutton_VICglobalconfigfile_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Select VIC Global Configuration File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_VICglobalconfigfile,'string',filedir)
    set(handles.popupmenu_RunMode,'Value',1)
    set(handles.text_vicrun,'Visible','off')
    set(handles.pushbutton_RunVIC,'Enable','off')
    
    handles.lastvisitdir = filepath;

    s_yr=[];s_mon=[];s_day=[];e_yr=[];e_mon=[];e_day=[];
    
    fileID = fopen(filedir,'r');
    while ~feof(fileID)
        paraminfo = fgets(fileID);
        comment_char = strfind(paraminfo,'#');
        if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
        
        if ~isempty(paraminfo)
            linecontent = textscan(paraminfo,'%s');
            if ~isempty(linecontent{1})
                if strcmp(linecontent{1}{1},'SOIL')
                    soilparfile = linecontent{1}{2};
%                     break;
                elseif strcmp(linecontent{1}{1},'ROUTE')
                    routparfile = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'STARTYEAR')
                    s_yr = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'STARTMONTH')
                    s_mon = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'STARTDAY')
                    s_day = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDYEAR')
                    e_yr = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDMONTH')
                    e_mon = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDDAY')
                    e_day = linecontent{1}{2};
                end
            end
            
        end
    end
    fclose(fileID);
    
    set(handles.text_vicsimper_syr,'String',s_yr)
    set(handles.text_vicsimper_smon,'String',s_mon)
    set(handles.text_vicsimper_sday,'String',s_day)
    set(handles.text_vicsimper_eyr,'String',e_yr)
    set(handles.text_vicsimper_emon,'String',e_mon)
    set(handles.text_vicsimper_eday,'String',e_day)
    
    yrmat = (str2double(s_yr):str2double(e_yr));
    yr_cell = cell(length(yrmat),1);
    for i = 1:str2double(e_yr)-str2double(s_yr)+1
        yr_cell{i} = num2str(yrmat(i));
    end
    set(handles.popupmenu_firstper_syr,'String',yr_cell,'Value',1)
    set(handles.popupmenu_firstper_eyr,'String',yr_cell,'Value',length(yrmat))
    set(handles.popupmenu_secondper_syr,'String',yr_cell,'Value',1)
    set(handles.popupmenu_secondper_eyr,'String',yr_cell,'Value',length(yrmat))
    
    set(handles.popupmenu_firstper_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(s_mon))
    set(handles.popupmenu_firstper_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(e_mon))
    set(handles.popupmenu_secondper_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(s_mon))
    set(handles.popupmenu_secondper_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(e_mon))
    
    day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};

    smon_numday = eomday(yrmat(1),str2double(s_mon));
    emon_numday = eomday(yrmat(end),str2double(e_mon));
    set(handles.popupmenu_firstper_sday,'String',day_cell(1:smon_numday),'Value',str2double(s_day))
    set(handles.popupmenu_firstper_eday,'String',day_cell(1:emon_numday),'Value',str2double(e_day))
    set(handles.popupmenu_secondper_sday,'String',day_cell(1:smon_numday),'Value',str2double(s_day))
    set(handles.popupmenu_secondper_eday,'String',day_cell(1:emon_numday),'Value',str2double(e_day))
   
    
    soildata = load(soilparfile);
    
    n = 0;
    poly_lat_all = [];
    poly_lon_all = [];
    for i=1:size(soildata,1)
        n = n+1;
        if soildata(i,1) == 1
            
            if ~rem(soildata(i,3),0.5) && ~rem(soildata(i,3),0.25) && ~rem(soildata(i,3),0.125) && ~rem(soildata(i,3),0.0625)  && ~rem(soildata(i,3),0.03125) 
                halfgridsize = .5;
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(i,3),0.25) && ~rem(soildata(i,3),0.125) && ~rem(soildata(i,3),0.0625)  && ~rem(soildata(i,3),0.03125) 
                halfgridsize = .25;
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(i,3),0.125) && ~rem(soildata(i,3),0.0625)  && ~rem(soildata(i,3),0.03125) 
                halfgridsize = .125;
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(i,3),0.0625)  && ~rem(soildata(i,3),0.03125) 
                halfgridsize = .0625;
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(i,3),0.03125) 
                halfgridsize = .03125;
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            else
                halfgridsize = .00001;
                poly_lat = soildata(i,3);
                poly_lon = soildata(i,4);
            end
            
%             poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
%             poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            
            poly_lat_all = [poly_lat_all,poly_lat];
            poly_lon_all = [poly_lon_all,poly_lon];
            
        end
        
    end
    
    if halfgridsize == .00001
        plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ko','Markersize',5);
    else
        plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'k');
    end
    xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
    ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
    
    if (nanmax(poly_lon_all)-nanmin(poly_lon_all)) >= (nanmax(poly_lat_all)-nanmin(poly_lat_all))
        axisrange = (nanmax(poly_lon_all)-nanmin(poly_lon_all));
        lat_uniq  = unique(poly_lat_all);
        set(handles.axes_VICgrid,'xlim',[nanmin(poly_lon_all)-halfgridsize*2,nanmax(poly_lon_all)+halfgridsize*2],'ylim',[nanmean(lat_uniq)-axisrange/2-halfgridsize*2,nanmean(lat_uniq)+axisrange/2+halfgridsize*2])
    else
        axisrange = (nanmax(poly_lat_all)-nanmin(poly_lat_all));
        lon_uniq  = unique(poly_lon_all);
        set(handles.axes_VICgrid,'xlim',[nanmean(lon_uniq)-axisrange/2-halfgridsize*2,nanmean(lon_uniq)+axisrange/2+halfgridsize*2],'ylim',[nanmin(poly_lat_all)-halfgridsize*2,nanmax(poly_lat_all)+halfgridsize*2])
    end
    
    handles.activegridnum = n;
    
    
    routdata = load(routparfile);
    handles.activegridnum_rout = size(routdata,1);
    
    v = ver;
    has_fsolve = any(strcmp(cellstr(char(v.Name)), 'Parallel Computing Toolbox'));
    
    if has_fsolve
        set(handles.popupmenu_RunMode,'String',{'Select';'Normal';'Fast';'Parallel'})
    else
        set(handles.popupmenu_RunMode,'String',{'Select';'Normal';'Fast';'Parallel (No License)'})
    end
    set(handles.popupmenu_RunMode,'Enable','on')
    
    set(handles.text_vicrunfinish,'Visible','off')
    set(handles.text_vicrun,'Visible','on','String',[num2str(handles.activegridnum),' active grid cells selected. Select Run Mode.'])
    
    handles.has_fsolve = has_fsolve;
end
guidata(hObject, handles);


function edit_VICglobalconfigfile_Callback(hObject, eventdata, handles)

filedir = strtrim(get(hObject,'String'));
if exist(filedir,'file') == 2
    set(handles.edit_VICglobalconfigfile,'string',filedir)
    set(handles.popupmenu_RunMode,'Value',1)
    set(handles.text_vicrun,'Visible','off')
    set(handles.pushbutton_RunVIC,'Enable','off')
    

    s_yr=[];s_mon=[];s_day=[];e_yr=[];e_mon=[];e_day=[];
    
    fileID = fopen(filedir,'r');
    while ~feof(fileID)
        paraminfo = fgets(fileID);
        comment_char = strfind(paraminfo,'#');
        if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
        
        if ~isempty(paraminfo)
            linecontent = textscan(paraminfo,'%s');
            if ~isempty(linecontent{1})
                if strcmp(linecontent{1}{1},'SOIL')
                    soilparfile = linecontent{1}{2};
%                     break;
                elseif strcmp(linecontent{1}{1},'STARTYEAR')
                    s_yr = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'STARTMONTH')
                    s_mon = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'STARTDAY')
                    s_day = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDYEAR')
                    e_yr = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDMONTH')
                    e_mon = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDDAY')
                    e_day = linecontent{1}{2};
                end
            end
            
        end
    end
    fclose(fileID);
    
    set(handles.text_vicsimper_syr,'String',s_yr)
    set(handles.text_vicsimper_smon,'String',s_mon)
    set(handles.text_vicsimper_sday,'String',s_day)
    set(handles.text_vicsimper_eyr,'String',e_yr)
    set(handles.text_vicsimper_emon,'String',e_mon)
    set(handles.text_vicsimper_eday,'String',e_day)
    
    yrmat = (str2double(s_yr):str2double(e_yr));
    yr_cell = cell(length(yrmat),1);
    for i = 1:str2double(e_yr)-str2double(s_yr)+1
        yr_cell{i} = num2str(yrmat(i));
    end
    set(handles.popupmenu_firstper_syr,'String',yr_cell,'Value',1)
    set(handles.popupmenu_firstper_eyr,'String',yr_cell,'Value',length(yrmat))
    set(handles.popupmenu_secondper_syr,'String',yr_cell,'Value',1)
    set(handles.popupmenu_secondper_eyr,'String',yr_cell,'Value',length(yrmat))
    
    set(handles.popupmenu_firstper_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(s_mon))
    set(handles.popupmenu_firstper_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(e_mon))
    set(handles.popupmenu_secondper_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(s_mon))
    set(handles.popupmenu_secondper_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(e_mon))
    
    day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};

    smon_numday = eomday(yrmat(1),str2double(s_mon));
    emon_numday = eomday(yrmat(end),str2double(e_mon));
    set(handles.popupmenu_firstper_sday,'String',day_cell(1:smon_numday),'Value',str2double(s_day))
    set(handles.popupmenu_firstper_eday,'String',day_cell(1:emon_numday),'Value',str2double(e_day))
    set(handles.popupmenu_secondper_sday,'String',day_cell(1:smon_numday),'Value',str2double(s_day))
    set(handles.popupmenu_secondper_eday,'String',day_cell(1:emon_numday),'Value',str2double(e_day))
   
    
    soildata = load(soilparfile);
    
    n = 0;
    poly_lat_all = [];
    poly_lon_all = [];
    for i=1:size(soildata,1)
        
        if soildata(i,1) == 1
            n = n+1;
            if ~rem(soildata(i,3),0.5) && ~rem(soildata(i,3),0.25) && ~rem(soildata(i,3),0.125) && ~rem(soildata(i,3),0.0625)  && ~rem(soildata(i,3),0.03125) 
                halfgridsize = .5;
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(i,3),0.25) && ~rem(soildata(i,3),0.125) && ~rem(soildata(i,3),0.0625)  && ~rem(soildata(i,3),0.03125) 
                halfgridsize = .25;
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(i,3),0.125) && ~rem(soildata(i,3),0.0625)  && ~rem(soildata(i,3),0.03125) 
                halfgridsize = .125;
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(i,3),0.0625)  && ~rem(soildata(i,3),0.03125) 
                halfgridsize = .0625;
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(i,3),0.03125) 
                halfgridsize = .03125;
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            else
                halfgridsize = .00001;
                poly_lat = soildata(i,3);
                poly_lon = soildata(i,4);
            end
            
%             poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
%             poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
 
            poly_lat_all = [poly_lat_all,poly_lat];
            poly_lon_all = [poly_lon_all,poly_lon];
            
        end
        
    end

    if halfgridsize == .00001
        plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ko','Markersize',5);
    else
        plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'k');
    end
    xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
    ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
    
    if (nanmax(poly_lon_all)-nanmin(poly_lon_all)) >= (nanmax(poly_lat_all)-nanmin(poly_lat_all))
        axisrange = (nanmax(poly_lon_all)-nanmin(poly_lon_all));
        lat_uniq  = unique(poly_lat_all);
        set(handles.axes_VICgrid,'xlim',[nanmin(poly_lon_all)-halfgridsize*2,nanmax(poly_lon_all)+halfgridsize*2],'ylim',[nanmean(lat_uniq)-axisrange/2-halfgridsize*2,nanmean(lat_uniq)+axisrange/2+halfgridsize*2])
    else
        axisrange = (nanmax(poly_lat_all)-nanmin(poly_lat_all));
        lon_uniq  = unique(poly_lon_all);
        set(handles.axes_VICgrid,'xlim',[nanmean(lon_uniq)-axisrange/2-halfgridsize*2,nanmean(lon_uniq)+axisrange/2+halfgridsize*2],'ylim',[nanmin(poly_lat_all)-halfgridsize*2,nanmax(poly_lat_all)+halfgridsize*2])
    end
    
    handles.activegridnum = n;
    
    v = ver;
    has_fsolve = any(strcmp(cellstr(char(v.Name)), 'Parallel Computing Toolbox'));
    
    if has_fsolve
        set(handles.popupmenu_RunMode,'String',{'Select';'Normal';'Fast';'Parallel'})
    else
        set(handles.popupmenu_RunMode,'String',{'Select';'Normal';'Fast';'Parallel (No License)'})
    end
    set(handles.popupmenu_RunMode,'Enable','on')
    
    set(handles.text_vicrunfinish,'Visible','off')
    set(handles.text_vicrun,'Visible','on','String',[num2str(handles.activegridnum),' active grid cells selected. Select Run Mode.'])
    
    handles.has_fsolve = has_fsolve;
    
else
    
    set(handles.edit_VICglobalconfigfile,'string',[])
    set(handles.popupmenu_RunMode,'Value',1,'Enable','off')
    set(handles.text_vicrun,'Visible','off')
    set(handles.pushbutton_RunVIC,'Enable','off')
    cla(handles.axes_VICgrid)
    
    set(handles.text_vicsimper_syr,'String','yyyy')
    set(handles.text_vicsimper_smon,'String','mm')
    set(handles.text_vicsimper_sday,'String','dd')
    set(handles.text_vicsimper_eyr,'String','yyyy')
    set(handles.text_vicsimper_emon,'String','mm')
    set(handles.text_vicsimper_eday,'String','dd')
    
end
guidata(hObject, handles);



% --- Executes on selection change in popupmenu_RunMode.
function popupmenu_RunMode_Callback(hObject, eventdata, handles)
has_fsolve = handles.has_fsolve;

if get(hObject,'Value') ~= 1 && ~(~has_fsolve && get(hObject,'Value') == 4)
    set(handles.pushbutton_RunVIC,'Enable','on')
    set(handles.text_vicrunfinish,'Visible','off')
    set(handles.text_vicrun,'Visible','on','String',[num2str(handles.activegridnum),' active grid cells selected. Ready to run VIC.'])
else
    set(handles.pushbutton_RunVIC,'Enable','off')
    set(handles.text_vicrunfinish,'Visible','off')
    set(handles.text_vicrun,'Visible','on','String',[num2str(handles.activegridnum),' active grid cells selected. Select Run Mode.'])
end



% --- Executes on button press in pushbutton_RunVIC.
function pushbutton_RunVIC_Callback(hObject, eventdata, handles)

set(handles.popupmenu_Metrics_select,'Value',1,'Enable','off')
set(handles.pushbutton_undock_fig,'Enable','off')
set(handles.edit_Metrics_calculation,'String',[],'Enable','off')
set(handles.edit_Metrics_calculation_val,'String',[],'Enable','off')
if get(handles.checkbox_StreamPlot_sim,'Value') || get(handles.checkbox_StreamPlot_obs,'Value')
    set(handles.simflowplot_calper_h,'Visible','off')
end
set(handles.checkbox_StreamPlot_sim,'Value',0)
set(handles.checkbox_StreamPlot_obs,'Value',0)


if handles.radiobutton_bothVICROUTING.Value
    Is_VIC_Run = 1;
    Is_ROUTING_Run = 1;
elseif handles.radiobutton_VIConly.Value
    Is_VIC_Run = 1;
    Is_ROUTING_Run = 0;    
elseif handles.radiobutton_ROUTINGonly.Value
    Is_VIC_Run = 0;
    Is_ROUTING_Run = 1;
end

OUT_VIC = {};
fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
while ~feof(fileID)
    paraminfo = fgetl(fileID);
    comment_char = strfind(paraminfo,'#');
    if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
    
    if ~isempty(paraminfo)
        linecontent = textscan(paraminfo,'%s');
        if ~isempty(linecontent{1})
            if strcmp(linecontent{1}{1},'SOIL')
                soilparfile = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'ROUTE')
                routparfile = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                routoutfile = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'RESULT_DIR')
                vicoutfolder = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'OUTFILE')
                vicoutfile = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'OUT_STEP')
                out_step = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'TIME_STEP')
                time_step = str2double(linecontent{1}{2});
            elseif strcmp(linecontent{1}{1},'OUTVAR')
                OUT_VIC = [OUT_VIC,linecontent{1}{2}];
            elseif strcmp(linecontent{1}{1},'STARTYEAR')
                STARTYEAR = [OUT_VIC,linecontent{1}{2}];
            elseif strcmp(linecontent{1}{1},'STARTMONTH')
                STARTMONTH = [OUT_VIC,linecontent{1}{2}];
            elseif strcmp(linecontent{1}{1},'STARTDAY')
                STARTDAY = [OUT_VIC,linecontent{1}{2}];
            elseif strcmp(linecontent{1}{1},'ENDYEAR')
                ENDYEAR = [OUT_VIC,linecontent{1}{2}];
            elseif strcmp(linecontent{1}{1},'ENDMONTH')
                ENDMONTH = [OUT_VIC,linecontent{1}{2}];
            elseif strcmp(linecontent{1}{1},'ENDDAY')
                ENDDAY = [OUT_VIC,linecontent{1}{2}];
            elseif strcmp(linecontent{1}{1},'GRID_DECIMAL')
                grid_decimal = linecontent{1}{2};
            end
        end
        
    end
end
fclose(fileID);
routpar_all = load(routparfile);
routpar_all = flipud(sortrows(routpar_all,4));
[~,where_runoff] = ismember('OUT_RUNOFF',OUT_VIC);
[~,where_baseflow] = ismember('OUT_BASEFLOW',OUT_VIC);
totarea = sum(routpar_all(:,3));
outlet_flowlen = routpar_all(end,4);


set(handles.text_vicsimper_syr,'String',STARTYEAR)
set(handles.text_vicsimper_smon,'String',STARTMONTH)
set(handles.text_vicsimper_sday,'String',STARTDAY)
set(handles.text_vicsimper_eyr,'String',ENDYEAR)
set(handles.text_vicsimper_emon,'String',ENDMONTH)
set(handles.text_vicsimper_eday,'String',ENDDAY)

yrmat = (str2double(STARTYEAR):str2double(ENDYEAR));
yr_cell = cell(length(yrmat),1);
for i = 1:str2double(ENDYEAR)-str2double(STARTYEAR)+1
    yr_cell{i} = num2str(yrmat(i));
end
set(handles.popupmenu_firstper_syr,'String',yr_cell,'Value',1)
set(handles.popupmenu_firstper_eyr,'String',yr_cell,'Value',length(yrmat))
set(handles.popupmenu_secondper_syr,'String',yr_cell,'Value',1)
set(handles.popupmenu_secondper_eyr,'String',yr_cell,'Value',length(yrmat))

set(handles.popupmenu_firstper_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(STARTMONTH))
set(handles.popupmenu_firstper_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(ENDMONTH))
set(handles.popupmenu_secondper_smon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(STARTMONTH))
set(handles.popupmenu_secondper_emon,'String',{'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12'},'Value',str2double(ENDMONTH))

day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};

smon_numday = eomday(yrmat(1),str2double(STARTMONTH));
emon_numday = eomday(yrmat(end),str2double(ENDMONTH));
set(handles.popupmenu_firstper_sday,'String',day_cell(1:smon_numday),'Value',str2double(STARTDAY))
set(handles.popupmenu_firstper_eday,'String',day_cell(1:emon_numday),'Value',str2double(ENDDAY))
set(handles.popupmenu_secondper_sday,'String',day_cell(1:smon_numday),'Value',str2double(STARTDAY))
set(handles.popupmenu_secondper_eday,'String',day_cell(1:emon_numday),'Value',str2double(ENDDAY))

set(handles.radiobutton_simplot_firstperiod,'Enable','off')
set(handles.popupmenu_firstper_syr,'Enable','off')
set(handles.popupmenu_firstper_smon,'Enable','off')
set(handles.popupmenu_firstper_sday,'Enable','off')
set(handles.popupmenu_firstper_eyr,'Enable','off')
set(handles.popupmenu_firstper_emon,'Enable','off')
set(handles.popupmenu_firstper_eday,'Enable','off')

set(handles.radiobutton_simplot_secondperiod,'Enable','off')
set(handles.popupmenu_secondper_syr,'Enable','off')
set(handles.popupmenu_secondper_smon,'Enable','off')
set(handles.popupmenu_secondper_sday,'Enable','off')
set(handles.popupmenu_secondper_eyr,'Enable','off')
set(handles.popupmenu_secondper_emon,'Enable','off')
set(handles.popupmenu_secondper_eday,'Enable','off')


syr = str2double(STARTYEAR); smon = str2double(STARTMONTH); sday = str2double(STARTDAY);
eyr = str2double(ENDYEAR); emon = str2double(ENDMONTH); eday = str2double(ENDDAY);
numsimday = datenum([eyr,emon,eday])-datenum([syr,smon,sday])+1;
sim_datemat = datevec(datenum([syr,smon,sday]):datenum([eyr,emon,eday]));
% yrmat = (syr:eyr);
% yrmat_str = cell(length(yrmat),1);
% for i=1:length(yrmat)
%     yrmat_str{i} = num2str(yrmat(i));
% end

if Is_ROUTING_Run
    if where_runoff == 0
        error('There''s no VIC output for runoff! Routing cannot be run...')
    end
    if where_baseflow == 0
        error('There''s no VIC output for baseflow! Routing cannot be run...')
    end
end

out_step = str2double(out_step);
if out_step == 0
    out_step = time_step;
end

if out_step < 24
    where_runoff = where_runoff + 4;
    where_baseflow = where_baseflow + 4;
else
    where_runoff = where_runoff + 3;
    where_baseflow = where_baseflow + 3;
end


soildata = load(soilparfile);
coord_format = ['%1.',grid_decimal,'f'];
% if ~rem(soildata(1,3),0.5) && ~rem(soildata(1,3),0.25) && ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
%     halfgridsize = .5; %coord_format = '%1.1f';
% elseif ~rem(soildata(1,3),0.25) && ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
%     halfgridsize = .25; %coord_format = '%1.2f';
% elseif ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
%     halfgridsize = .125; %coord_format = '%1.3f';
% elseif ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
%     halfgridsize = .0625; %coord_format = '%1.4f';
% elseif ~rem(soildata(1,3),0.03125)
%     halfgridsize = .03125; %coord_format = '%1.5f';
% else
%     halfgridsize = .00001;
% end

poly_lat_all = [];
poly_lon_all = [];
for i=1:size(soildata,1)
    
    if soildata(i,1) == 1
        
        if ~rem(soildata(1,3),0.5) && ~rem(soildata(1,3),0.25) && ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
            halfgridsize = .5; %coord_format = '%1.1f';
            poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
            poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
        elseif ~rem(soildata(1,3),0.25) && ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
            halfgridsize = .25; %coord_format = '%1.2f';
            poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
            poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
        elseif ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
            halfgridsize = .125; %coord_format = '%1.3f';
            poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
            poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
        elseif ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
            halfgridsize = .0625; %coord_format = '%1.4f';
            poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
            poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
        elseif ~rem(soildata(1,3),0.03125)
            halfgridsize = .03125; %coord_format = '%1.5f';
            poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
            poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
        else
            halfgridsize = .00001;
            poly_lat = soildata(i,3);
            poly_lon = soildata(i,4);
        end
        
%         poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
%         poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
        
        poly_lat_all = [poly_lat_all,poly_lat];
        poly_lon_all = [poly_lon_all,poly_lon];
        
    end
    
end
xlim_org = get(handles.axes_VICgrid,'xlim');
ylim_org = get(handles.axes_VICgrid,'ylim');
if halfgridsize == .00001
    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'o','markersize',5,'markeredgecolor',[0.75,0.75,0.75] ); 
else
    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color',[0.75,0.75,0.75] ); 
end
xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
set(handles.axes_VICgrid,'xlim',xlim_org);
set(handles.axes_VICgrid,'ylim',ylim_org);

contents_runmode = cellstr(get(handles.popupmenu_RunMode,'String')); 
sel_runmode = contents_runmode{get(handles.popupmenu_RunMode,'Value')}; 


VIC_ver_contents = cellstr(get(handles.popupmenu_vic_version,'String'));
VIC_ver_selected = VIC_ver_contents{get(handles.popupmenu_vic_version,'Value')};
if strcmp(VIC_ver_selected,'VIC-4.2.b')
    wherevicfile = handles.WhereIsVIC_4_2_b;
    IsVIC5 = 0;
elseif strcmp(VIC_ver_selected,'VIC-4.2.c')
    wherevicfile = handles.WhereIsVIC_4_2_c;
    IsVIC5 = 0;
elseif strcmp(VIC_ver_selected,'VIC-4.2.d')
    wherevicfile = handles.WhereIsVIC_4_2_d;
    IsVIC5 = 0;
elseif strcmp(VIC_ver_selected,'VIC-5.0.1')
    wherevicfile = handles.WhereIsVIC_5_0_1;
    IsVIC5 = 1;
end

command_part1 = handles.WhereIsCygwin;
whereglobalfile = get(handles.edit_VICglobalconfigfile,'String');
command_part1 = strrep(command_part1,'\','/');
whereglobalfile = strrep(whereglobalfile,'\','/');
% wherevicfile = handles.WhereIsVIC;
wherevicfile = strrep(wherevicfile,'\','/');

switch sel_runmode
                  
    case 'Normal'
        
        set(handles.text_vicrunfinish,'Visible','off')
        stime = tic;
        
        if Is_VIC_Run
            
            set(handles.text_vicrun,'Visible','on','String',['Running VIC for ',num2str(handles.activegridnum),' grid cells ...'])
            
            copyfile(soilparfile,[soilparfile,'_COPY'])
                       
            fileID = fopen([soilparfile,'_COPY'],'r');
            while ~feof(fileID)
                
                gridsoilpar = fgetl(fileID);
                fileID2 = fopen(soilparfile,'w');
                fprintf(fileID2,'%s\n',gridsoilpar);
                fclose(fileID2);
                
                %     [status,cmdout] = system([command_part1,'\Cygwin\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'''']);
                if IsVIC5
                    system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vic_classic.exe -g ',whereglobalfile,'''']);
                else
                    system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'''']);
                end
                
                soildata = load(soilparfile);
                if halfgridsize == .00001
                    poly_lat = soildata(3);
                    poly_lon = soildata(4);
                else
                    poly_lat = [soildata(3)+halfgridsize, soildata(3)+halfgridsize, soildata(3)-halfgridsize,soildata(3)-halfgridsize, soildata(3)+halfgridsize, NaN];
                    poly_lon = [soildata(4)-halfgridsize, soildata(4)+halfgridsize, soildata(4)+halfgridsize,soildata(4)-halfgridsize, soildata(4)-halfgridsize, NaN];
                end
                handles.finish_grid_lat = [handles.finish_grid_lat,poly_lat];
                handles.finish_grid_lon = [handles.finish_grid_lon,poly_lon];
                
                if halfgridsize == .00001
                    h = plot(handles.axes_VICgrid,poly_lon_all, poly_lat_all,'wo',handles.finish_grid_lon, handles.finish_grid_lat,'ro');
                else
                    h = plot(handles.axes_VICgrid,poly_lon_all, poly_lat_all,'w',handles.finish_grid_lon, handles.finish_grid_lat,'r');
                end                
                h(1).Color = [0.75 0.75 0.75];
                xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                set(handles.axes_VICgrid,'xlim',xlim_org);
                set(handles.axes_VICgrid,'ylim',ylim_org);
            end
            fclose(fileID);
            elapse_t1 = toc(stime);
            
        end
        
        
        if Is_ROUTING_Run
            
            if ~Is_VIC_Run
                if halfgridsize == .00001
                    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'o','markersize',5,'markeredgecolor','r');
                else
                    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color','r' );
                end
                xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                set(handles.axes_VICgrid,'xlim',xlim_org);
                set(handles.axes_VICgrid,'ylim',ylim_org);
            end
            
            pause(1)
            set(handles.text_vicrun,'Visible','on','String',['Running Routing for ',num2str(handles.activegridnum),' grid cells ...'])
            FLOW_tot = zeros(numsimday,1);
            FLOW_base = zeros(numsimday,1);
            for n = 1:size(routpar_all,1)
                grid_vicout = load([vicoutfolder,'/',vicoutfile,'_',num2str(routpar_all(n,1),coord_format),'_',num2str(routpar_all(n,2),coord_format)]);
                if out_step < 24
                    inflow_direct = grpstats(grid_vicout(:,where_runoff),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                    inflow_base = grpstats(grid_vicout(:,where_baseflow),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                else
                    inflow_direct = grid_vicout(:,where_runoff);
                    inflow_base = grid_vicout(:,where_baseflow);
                end
                
                flowlen = routpar_all(n,4);
                route_par = [routpar_all(n,5),routpar_all(n,6),routpar_all(n,7),routpar_all(n,8)];
                if n == size(routpar_all,1)
                    isOutlet = 1;
                else
                    isOutlet = 0;
                end
                [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
                FLOW_tot = FLOW_tot + runoff*routpar_all(n,3)/sum(routpar_all(:,3));
                FLOW_base = FLOW_base + baseflow*routpar_all(n,3)/sum(routpar_all(:,3));
                
                handles.finish_grid_lat_rout = [handles.finish_grid_lat_rout,routpar_all(n,1)];
                handles.finish_grid_lon_rout = [handles.finish_grid_lon_rout,routpar_all(n,2)];
                
                if n == size(routpar_all,1)
                    if halfgridsize == .00001
                        h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                    else
                        h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                    end
                    set(h(2),'MarkerFaceColor','b','Markersize',3)
                    set(h(3),'MarkerFaceColor','b','Markersize',5)
                else
                    if halfgridsize == .00001
                        h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                    else
                        h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                    end
                    set(h(2),'MarkerFaceColor','b','Markersize',3)
                end
                xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                set(handles.axes_VICgrid,'xlim',xlim_org);
                set(handles.axes_VICgrid,'ylim',ylim_org);
                pause(0.1)
                
            end
            elapse_t2 = toc(stime);
            
        end
        
        set(handles.text_vicrun,'Visible','off')
        
        if Is_VIC_Run && Is_ROUTING_Run
            set(handles.text_vicrunfinish,'String',['Finished (',num2str(handles.activegridnum),' cells). Run Time - VIC:',num2str(elapse_t1,'%1.0f'),'s, Route:',num2str(elapse_t2-elapse_t1,'%1.0f'),'s'])
        end
        if Is_VIC_Run && ~Is_ROUTING_Run
            set(handles.text_vicrunfinish,'String',['Finished (',num2str(handles.activegridnum),' cells). Run Time - VIC:',num2str(elapse_t1,'%1.0f'),'s, Route:--'])
        end
        if ~Is_VIC_Run && Is_ROUTING_Run
            set(handles.text_vicrunfinish,'String',['Finished (',num2str(handles.activegridnum),' cells). Run Time - VIC:--, Route:',num2str(elapse_t2,'%1.0f'),'s'])
        end
        set(handles.text_vicrunfinish,'Visible','on')
        
        if Is_VIC_Run
            copyfile([soilparfile,'_COPY'],soilparfile)
            fclose('all');
            delete([soilparfile,'_COPY'])
        end
        
        handles.finish_grid_lat = [];
        handles.finish_grid_lon = [];
        handles.finish_grid_lat_rout = [];
        handles.finish_grid_lon_rout = [];
        
        
    case 'Fast'
        
        set(handles.text_vicrunfinish,'Visible','off')
        stime = tic;
        
        if Is_VIC_Run
            
            set(handles.text_vicrun,'Visible','on','String',['Running VIC for ',num2str(handles.activegridnum),' grid cells ...'])
            
            % [status,cmdout] = system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,''''])
            if IsVIC5
                system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vic_classic.exe -g ',whereglobalfile,'''']);
            else
                system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'''']);
            end
            if halfgridsize == .00001
                plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'o','markersize',5,'markeredgecolor','r');
            else
                plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color','r' );
            end
            xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
            ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
            set(handles.axes_VICgrid,'xlim',xlim_org);
            set(handles.axes_VICgrid,'ylim',ylim_org);
            elapse_t1 = toc(stime);
        end
        
        if Is_ROUTING_Run
            
            if ~Is_VIC_Run
                if halfgridsize == .00001
                    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'o','markersize',5,'markeredgecolor','r');
                else
                    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color','r' );
                end
                xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                set(handles.axes_VICgrid,'xlim',xlim_org);
                set(handles.axes_VICgrid,'ylim',ylim_org);
            end
            
            pause(1)
            set(handles.text_vicrun,'Visible','on','String',['Running Routing for ',num2str(handles.activegridnum),' grid cells ...'])
            FLOW_tot = zeros(numsimday,1);
            FLOW_base = zeros(numsimday,1);
            for n = 1:size(routpar_all,1)
                grid_vicout = load([vicoutfolder,'/',vicoutfile,'_',num2str(routpar_all(n,1),coord_format),'_',num2str(routpar_all(n,2),coord_format)]);
                if out_step < 24
                    inflow_direct = grpstats(grid_vicout(:,where_runoff),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                    inflow_base = grpstats(grid_vicout(:,where_baseflow),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                else
                    inflow_direct = grid_vicout(:,where_runoff);
                    inflow_base = grid_vicout(:,where_baseflow);
                end
                
                flowlen = routpar_all(n,4);
                route_par = [routpar_all(n,5),routpar_all(n,6),routpar_all(n,7),routpar_all(n,8)];
                if n == size(routpar_all,1)
                    isOutlet = 1;
                else
                    isOutlet = 0;
                end
                [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
                FLOW_tot = FLOW_tot + runoff*routpar_all(n,3)/sum(routpar_all(:,3));
                FLOW_base = FLOW_base + baseflow*routpar_all(n,3)/sum(routpar_all(:,3));
                
                handles.finish_grid_lat_rout = [handles.finish_grid_lat_rout,routpar_all(n,1)];
                handles.finish_grid_lon_rout = [handles.finish_grid_lon_rout,routpar_all(n,2)];
                
                if n == size(routpar_all,1)
                    if size(routpar_all,1)>1
                        if halfgridsize == .00001
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                        else
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                        end
                        set(h(2),'MarkerFaceColor','b','Markersize',3)
                        set(h(3),'MarkerFaceColor','b','Markersize',5)
                    else
                        if halfgridsize == .00001
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                        else
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                        end
                        set(h(2),'MarkerFaceColor','b','Markersize',5)
                    end
                else
                    if halfgridsize == .00001
                        h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                    else
                        h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                    end
                    set(h(2),'MarkerFaceColor','b','Markersize',3)
                end
                xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                set(handles.axes_VICgrid,'xlim',xlim_org);
                set(handles.axes_VICgrid,'ylim',ylim_org);
                pause(0.05)
            end
            elapse_t2 = toc(stime);
        end
        
        set(handles.text_vicrun,'Visible','off')
        if Is_VIC_Run && Is_ROUTING_Run
            set(handles.text_vicrunfinish,'String',['Finished (',num2str(handles.activegridnum),' cells). Run Time - VIC:',num2str(elapse_t1,'%1.0f'),'s, Route:',num2str(elapse_t2-elapse_t1,'%1.0f'),'s'])
        end
        if Is_VIC_Run && ~Is_ROUTING_Run
            set(handles.text_vicrunfinish,'String',['Finished (',num2str(handles.activegridnum),' cells). Run Time - VIC:',num2str(elapse_t1,'%1.0f'),'s, Route:--'])
        end
        if ~Is_VIC_Run && Is_ROUTING_Run
            set(handles.text_vicrunfinish,'String',['Finished (',num2str(handles.activegridnum),' cells). Run Time - VIC:--, Route:',num2str(elapse_t2,'%1.0f'),'s'])
        end
        set(handles.text_vicrunfinish,'Visible','on')
        
        handles.finish_grid_lat_rout = [];
        handles.finish_grid_lon_rout = [];
        
      
    case 'Parallel'
        
        set(handles.text_vicrunfinish,'Visible','off')        
%         pause(1)
        
        poolobj     = gcp;
        splitnum    = poolobj.NumWorkers;
        gridnum     = handles.activegridnum;
        gridnum_rout = handles.activegridnum_rout;
        
        jobnum_worker = repmat(floor(gridnum/splitnum),1,splitnum);
        for i = 1:mod(gridnum,splitnum)
            jobnum_worker(i) = jobnum_worker(i)+1;
        end
        
        jobnum_worker_rout = repmat(floor(gridnum_rout/splitnum),1,splitnum);
        for i = 1:mod(gridnum_rout,splitnum)
            jobnum_worker_rout(i) = jobnum_worker_rout(i)+1;
        end
        
        for i = 1:splitnum
            fileID = fopen(whereglobalfile,'r');
            fileID2 = fopen([whereglobalfile,'_POOL',num2str(i)],'w');
            while ~feof(fileID)
                linecontent = fgetl(fileID);
                linecontent_new1 = strrep(linecontent,soilparfile,[soilparfile,'_POOL',num2str(i)]);
                linecontent_new2 = strrep(linecontent,routparfile,[routparfile,'_POOL',num2str(i)]);
                if length(linecontent)>=4 && strcmp(linecontent(1:4),'SOIL')
                    fprintf(fileID2,'%s\n',linecontent_new1);
                elseif length(linecontent)>=5 && strcmp(linecontent(1:5),'ROUTE')
                    fprintf(fileID2,'%s\n',linecontent_new2);
                else
                    fprintf(fileID2,'%s\n',linecontent);
                end
            end
            fclose(fileID);
            fclose(fileID2);
        end
        

        if Is_VIC_Run
            n = 1;
            fileID1 = fopen(soilparfile,'r');
            C = textscan(fileID1,'%s','delimiter','\n');
            soil_content = C{1};

            for i = 1:splitnum
                fileID3 = fopen([soilparfile,'_POOL',num2str(i)],'w');   
                for j = 1:jobnum_worker(i)
                    fprintf(fileID3,'%s\n',soil_content{n});
                    n = n+1;
                end
                fclose(fileID3);
            end
            fclose(fileID1);
            
        end
        
        if Is_ROUTING_Run
            n = 1;
            fileID2 = fopen(routparfile,'r');
            C = textscan(fileID2,'%s','delimiter','\n');
            rout_content = C{1};
            for i = 1:splitnum 
                fileID4 = fopen([routparfile,'_POOL',num2str(i)],'w');
                for j = 1:jobnum_worker_rout(i)
                    fprintf(fileID4,'%s\n',rout_content{n});
                    n = n+1;
                end
                fclose(fileID4);
            end
            fclose(fileID2);
        end
        
        
        stime = tic;
        
        if Is_VIC_Run
            
            set(handles.text_vicrun,'Visible','on','String',['Running VIC for ',num2str(handles.activegridnum),' grid cells ...'])
            pause(1)
            parfor i = 1:splitnum
                if IsVIC5
                    system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vic_classic.exe -g ',whereglobalfile,'_POOL',num2str(i),'''']);
                else
                    system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'_POOL',num2str(i),'''']);
                end
            end
            if halfgridsize == .00001
                plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'o','markersize',5,'markeredgecolor','r');
            else
                plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color','r' );
            end 
            xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
            ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
            set(handles.axes_VICgrid,'xlim',xlim_org);
            set(handles.axes_VICgrid,'ylim',ylim_org);
            elapse_t1 = toc(stime);
        end
        
        
        if Is_ROUTING_Run
            
            if ~Is_VIC_Run
                if halfgridsize == .00001
                    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro','markersize',5);
                else
                    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color','r' );
                end
                xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                set(handles.axes_VICgrid,'xlim',xlim_org);
                set(handles.axes_VICgrid,'ylim',ylim_org);
            end
            
            set(handles.text_vicrun,'Visible','on','String',['Running Routing for ',num2str(handles.activegridnum),' grid cells ...'])
            pause(1)
            
            FLOW_tot = zeros(numsimday,splitnum);
            FLOW_base = zeros(numsimday,splitnum);
            parfor i = 1:splitnum
                
                routpar_part = load([routparfile,'_POOL',num2str(i)]);
                
                FLOW_tot_part = zeros(numsimday,1);
                FLOW_base_part = zeros(numsimday,1);
                for n = 1:size(routpar_part,1)
                    grid_vicout = load([vicoutfolder,'/',vicoutfile,'_',num2str(routpar_part(n,1),coord_format),'_',num2str(routpar_part(n,2),coord_format)]);
                    if out_step < 24
                        inflow_direct = grpstats(grid_vicout(:,where_runoff),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                        inflow_base = grpstats(grid_vicout(:,where_baseflow),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                    else
                        inflow_direct = grid_vicout(:,where_runoff);
                        inflow_base = grid_vicout(:,where_baseflow);
                    end
                    
                    flowlen = routpar_part(n,4);
                    route_par = [routpar_part(n,5),routpar_part(n,6),routpar_part(n,7),routpar_part(n,8)];
                    if flowlen == outlet_flowlen
                        isOutlet = 1;
                    else
                        isOutlet = 0;
                    end
                    [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
                    FLOW_tot_part = FLOW_tot_part + runoff*routpar_part(n,3)/totarea;
                    FLOW_base_part = FLOW_base_part + baseflow*routpar_part(n,3)/totarea;
                    
                end
                FLOW_tot(:,i)  = FLOW_tot_part;
                FLOW_base(:,i) = FLOW_base_part;
                
            end
            FLOW_tot  = sum(FLOW_tot,2);
            FLOW_base = sum(FLOW_base,2);
            
            
            for n = 1:size(routpar_all,1)
                
                handles.finish_grid_lat_rout = [handles.finish_grid_lat_rout,routpar_all(n,1)];
                handles.finish_grid_lon_rout = [handles.finish_grid_lon_rout,routpar_all(n,2)];
                
                if n == size(routpar_all,1)
                    if halfgridsize == .00001
                        h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                    else
                        h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                    end
                    set(h(2),'MarkerFaceColor','b','Markersize',3)
                    set(h(3),'MarkerFaceColor','b','Markersize',5)
                else
                    if halfgridsize == .00001
                        h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                    else
                        h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                    end
                    set(h(2),'MarkerFaceColor','b','Markersize',3)
                end
                xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                set(handles.axes_VICgrid,'xlim',xlim_org);
                set(handles.axes_VICgrid,'ylim',ylim_org);
                
            end
            elapse_t2 = toc(stime);
        end
        
        set(handles.text_vicrun,'Visible','off')
        if Is_VIC_Run && Is_ROUTING_Run
            set(handles.text_vicrunfinish,'String',['Finished (',num2str(handles.activegridnum),' cells). Run Time - VIC:',num2str(elapse_t1,'%1.0f'),'s, Route:',num2str(elapse_t2-elapse_t1,'%1.0f'),'s'])
        end
        if Is_VIC_Run && ~Is_ROUTING_Run
            set(handles.text_vicrunfinish,'String',['Finished (',num2str(handles.activegridnum),' cells). Run Time - VIC:',num2str(elapse_t1,'%1.0f'),'s, Route:--'])
        end
        if ~Is_VIC_Run && Is_ROUTING_Run
            set(handles.text_vicrunfinish,'String',['Finished (',num2str(handles.activegridnum),' cells). Run Time - VIC:--, Route:',num2str(elapse_t2,'%1.0f'),'s'])
        end
        set(handles.text_vicrunfinish,'Visible','on')
        
        handles.finish_grid_lat_rout = [];
        handles.finish_grid_lon_rout = [];
          
        delete([whereglobalfile,'_POOL*']);
        delete([soilparfile,'_POOL*']);
        delete([routparfile,'_POOL*']);
%         delete(poolobj)
        
end

if Is_ROUTING_Run
    savedata = [sim_datemat(:,1:3),FLOW_tot];
    fid = fopen(routoutfile,'w');
    fprintf(fid,'%d\t%d\t%d\t%1.8f\n',savedata');
    fclose(fid);
end

set(handles.checkbox_StreamPlot_sim,'Enable','on')

set(handles.radiobutton_simplot_firstperiod,'Enable','inactive')
set(handles.popupmenu_firstper_syr,'Enable','on')
set(handles.popupmenu_firstper_smon,'Enable','on')
set(handles.popupmenu_firstper_sday,'Enable','on')
set(handles.popupmenu_firstper_eyr,'Enable','on')
set(handles.popupmenu_firstper_emon,'Enable','on')
set(handles.popupmenu_firstper_eday,'Enable','on')

set(handles.radiobutton_simplot_secondperiod,'Enable','on')
set(handles.popupmenu_secondper_syr,'Enable','on')
set(handles.popupmenu_secondper_smon,'Enable','on')
set(handles.popupmenu_secondper_sday,'Enable','on')
set(handles.popupmenu_secondper_eyr,'Enable','on')
set(handles.popupmenu_secondper_emon,'Enable','on')
set(handles.popupmenu_secondper_eday,'Enable','on')

guidata(hObject, handles);


% --- Executes on selection change in popupmenu_ObsFlow_timestep.
function popupmenu_ObsFlow_timestep_Callback(hObject, eventdata, handles)

contents = cellstr(get(hObject,'String'));
if strcmp(contents{get(hObject,'Value')},'Select')
    set(handles.edit_ObsFlowFile,'String',[])
    set(handles.edit_ObsFlowFile,'Enable','off')
    set(handles.pushbutton_ObsFlowFile_search,'Enable','off')
    set(handles.checkbox_StreamPlot_obs,'Value',0)
    set(handles.checkbox_StreamPlot_obs,'Enable','off')
    
    set(handles.popupmenu_Metrics_select,'Value',1)
    set(handles.popupmenu_Metrics_select,'Enable','off')
    set(handles.pushbutton_undock_fig,'Enable','off')
    set(handles.edit_Metrics_calculation,'Enable','off')
    set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'Enable','off')
    set(handles.edit_Metrics_calculation_val,'String',[])
else
    set(handles.edit_ObsFlowFile,'String',[])
    set(handles.edit_ObsFlowFile,'Enable','on')
    set(handles.pushbutton_ObsFlowFile_search,'Enable','on')
    set(handles.checkbox_StreamPlot_obs,'Value',0)
    set(handles.checkbox_StreamPlot_obs,'Enable','off')
    
    set(handles.popupmenu_Metrics_select,'Value',1)
    set(handles.popupmenu_Metrics_select,'Enable','off')
    set(handles.pushbutton_undock_fig,'Enable','off')
    set(handles.edit_Metrics_calculation,'Enable','off')
    set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'Enable','off')
    set(handles.edit_Metrics_calculation_val,'String',[])
end


if get(handles.checkbox_StreamPlot_sim,'Value')
    fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
    while ~feof(fileID)
        paraminfo = fgetl(fileID);
        comment_char = strfind(paraminfo,'#');
        if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
        
        if ~isempty(paraminfo)
            linecontent = textscan(paraminfo,'%s');
            if ~isempty(linecontent{1})
                if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                    routoutfile = linecontent{1}{2};
                    break;
                end
            end
            
        end
    end
    fclose(fileID);
    simflow = load(routoutfile);
    
    syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
    smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
    sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
    eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
    emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
    eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
    
    sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
    eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
    simflow_calper = simflow(sind_calper:eind_calper,end);
    datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
    
    syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
    smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
    sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
    eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
    emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
    eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
    
    sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
    eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
    simflow_valper = simflow(sind_valper:eind_valper,end);
    datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
    
    content = handles.popupmenu_StreamPlot_timestep.String;
    if strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Daily')
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Monthly')
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    end
    
    %     else
    %         set(handles.simflowplot_calper_h,'Visible','off')
end




% --- Executes on button press in pushbutton_ObsFlowFile_search.
function pushbutton_ObsFlowFile_search_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Select Streamflow Observation File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_ObsFlowFile,'string',filedir)
    contents = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));
    if strcmp(contents{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Daily')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    contents2 = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
    if strcmp(contents{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && strcmp(contents2{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    if strcmp(contents{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Daily')
        handles.Is_ObsFlow_Daily = 1;
    else
        handles.Is_ObsFlow_Daily = 0;
    end
    handles.lastvisitdir = filepath;
end
guidata(hObject, handles);


function edit_ObsFlowFile_Callback(hObject, eventdata, handles)

filedir = strtrim(get(hObject,'String'));
if exist(filedir,'file') == 2
    
    set(handles.edit_ObsFlowFile,'string',filedir)
    contents = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));
    if strcmp(contents{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Daily')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    contents2 = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
    if strcmp(contents{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && strcmp(contents2{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    if strcmp(contents{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Daily')
        handles.Is_ObsFlow_Daily = 1;
    else
        handles.Is_ObsFlow_Daily = 0;
    end
    
else
    
    set(handles.edit_ObsFlowFile,'string',[])
    set(handles.checkbox_StreamPlot_obs,'Enable','off')

end
guidata(hObject, handles);


% --- Executes on selection change in popupmenu_StreamPlot_timestep.
function popupmenu_StreamPlot_timestep_Callback(hObject, eventdata, handles)
contents = cellstr(get(hObject,'String'));
if strcmp(contents{get(hObject,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
%         datemat_day = simflow(:,1:3);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
%         datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
%         datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
%         datemat_day = simflow(:,1:3);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
%         datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
%         datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(hObject,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
guidata(hObject, handles);





% --- Executes on selection change in popupmenu_firstper_syr.
function popupmenu_firstper_syr_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(hObject,'String'));
selyr    = str2double(contents_yr{get(hObject,'Value')});
contents_mon = cellstr(get(handles.popupmenu_firstper_smon,'String'));
selmon   = str2double(contents_mon{get(handles.popupmenu_firstper_smon,'Value')});
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_firstper_sday.Value,eomday(selyr,selmon));
set(handles.popupmenu_firstper_sday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end

if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end

guidata(hObject, handles);



% --- Executes on selection change in popupmenu_firstper_smon.
function popupmenu_firstper_smon_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(handles.popupmenu_firstper_syr,'String'));
selyr    = str2double(contents_yr{get(handles.popupmenu_firstper_syr,'Value')});
contents_mon = cellstr(get(hObject,'String'));
selmon   = str2double(contents_mon{get(hObject,'Value')});
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_firstper_sday.Value,eomday(selyr,selmon));
set(handles.popupmenu_firstper_sday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end
guidata(hObject, handles);

% --- Executes on selection change in popupmenu_firstper_sday.
function popupmenu_firstper_sday_Callback(hObject, eventdata, handles)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end
guidata(hObject, handles);


% --- Executes on selection change in popupmenu_firstper_eyr.
function popupmenu_firstper_eyr_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(hObject,'String'));
selyr    = str2double(contents_yr{get(hObject,'Value')});
contents_mon = cellstr(get(handles.popupmenu_firstper_emon,'String'));
selmon   = str2double(contents_mon{get(handles.popupmenu_firstper_emon,'Value')});
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_firstper_eday.Value,eomday(selyr,selmon));
set(handles.popupmenu_firstper_eday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end
guidata(hObject, handles);


% --- Executes on selection change in popupmenu_firstper_emon.
function popupmenu_firstper_emon_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(handles.popupmenu_firstper_eyr,'String'));
selyr    = str2double(contents_yr{get(handles.popupmenu_firstper_eyr,'Value')});
contents_mon = cellstr(get(hObject,'String'));
selmon   = str2double(contents_mon{get(hObject,'Value')});
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_firstper_eday.Value,eomday(selyr,selmon));
set(handles.popupmenu_firstper_eday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end
guidata(hObject, handles);


% --- Executes on selection change in popupmenu_firstper_eday.
function popupmenu_firstper_eday_Callback(hObject, eventdata, handles)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end
guidata(hObject, handles);

% --- Executes on selection change in popupmenu_secondper_syr.
function popupmenu_secondper_syr_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(hObject,'String'));
selyr    = str2double(contents_yr{get(hObject,'Value')});
contents_mon = cellstr(get(handles.popupmenu_secondper_smon,'String'));
selmon   = str2double(contents_mon{get(handles.popupmenu_secondper_smon,'Value')});
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_secondper_sday.Value,eomday(selyr,selmon));
set(handles.popupmenu_secondper_sday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end
guidata(hObject, handles);


% --- Executes on selection change in popupmenu_secondper_smon.
function popupmenu_secondper_smon_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(handles.popupmenu_secondper_syr,'String'));
selyr    = str2double(contents_yr{get(handles.popupmenu_secondper_syr,'Value')});
contents_mon = cellstr(get(hObject,'String'));
selmon   = str2double(contents_mon{get(hObject,'Value')});
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_secondper_sday.Value,eomday(selyr,selmon));
set(handles.popupmenu_secondper_sday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end
guidata(hObject, handles);


% --- Executes on selection change in popupmenu_secondper_sday.
function popupmenu_secondper_sday_Callback(hObject, eventdata, handles)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end
guidata(hObject, handles);


% --- Executes on selection change in popupmenu_secondper_eyr.
function popupmenu_secondper_eyr_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(hObject,'String'));
selyr    = str2double(contents_yr{get(hObject,'Value')});
contents_mon = cellstr(get(handles.popupmenu_secondper_emon,'String'));
selmon   = str2double(contents_mon{get(handles.popupmenu_secondper_emon,'Value')});
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_secondper_eday.Value,eomday(selyr,selmon));
set(handles.popupmenu_secondper_eday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end
guidata(hObject, handles);



% --- Executes on selection change in popupmenu_secondper_emon.
function popupmenu_secondper_emon_Callback(hObject, eventdata, handles)
contents_yr = cellstr(get(handles.popupmenu_secondper_eyr,'String'));
selyr    = str2double(contents_yr{get(handles.popupmenu_secondper_eyr,'Value')});
contents_mon = cellstr(get(hObject,'String'));
selmon   = str2double(contents_mon{get(hObject,'Value')});
day_cell = {'01';'02';'03';'04';'05';'06';'07';'08';'09';'10';'11';'12';'13';'14';'15';'16';'17';'18';'19';'20';'21';'22';'23';'24';'25';'26';'27';'28';'29';'30';'31'};
valid_numday = min(handles.popupmenu_secondper_eday.Value,eomday(selyr,selmon));
set(handles.popupmenu_secondper_eday,'String',day_cell(1:eomday(selyr,selmon)),'Value',valid_numday)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end
guidata(hObject, handles);


% --- Executes on selection change in popupmenu_secondper_eday.
function popupmenu_secondper_eday_Callback(hObject, eventdata, handles)

contents = cellstr(get(handles.popupmenu_StreamPlot_timestep,'String'));
if strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Daily')
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Daily')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
       
        if handles.Is_ObsFlow_Daily

            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        else
            
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.popupmenu_Metrics_select,'Enable','off')
            set(handles.pushbutton_undock_fig,'Enable','off')
            set(handles.edit_Metrics_calculation,'Enable','off')
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'Enable','off')
            set(handles.edit_Metrics_calculation_val,'String',[])
            

            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
            
        end
        
    elseif handles.checkbox_StreamPlot_sim.Value && ~handles.checkbox_StreamPlot_obs.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        
        x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
        if handles.radiobutton_simplot_secondperiod.Value
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
        end        
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value && ~handles.checkbox_StreamPlot_sim.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
        else
            set(handles.simflowplot_calper_h,'Visible','off')
        end        
        
    end

    if strcmp(get(handles.checkbox_StreamPlot_obs,'Enable'),'on')
        if ~handles.Is_ObsFlow_Daily
            set(handles.checkbox_StreamPlot_obs,'Value',0,'Enable','off')
        end
    end
    
    handles.StreamPlot_timestep_old = 'Daily';
           
elseif strcmp(contents{get(handles.popupmenu_StreamPlot_timestep,'Value')},'Monthly') 
    
    contents2 = cellstr(get(handles.popupmenu_ObsFlow_timestep,'String'));

    if strcmp(contents2{get(handles.popupmenu_ObsFlow_timestep,'Value')},'Monthly') && exist(get(handles.edit_ObsFlowFile,'String'),'file')
        set(handles.checkbox_StreamPlot_obs,'Enable','on')
    end
    
    if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end

            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            x_obs = obsflow(:,1:2);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;

          
    elseif handles.checkbox_StreamPlot_sim.Value
        
        if ~strcmp(handles.StreamPlot_timestep_old,'Monthly')
            set(handles.popupmenu_Metrics_select,'Value',1)
            set(handles.edit_Metrics_calculation,'String',[])
            set(handles.edit_Metrics_calculation_val,'String',[])
        end
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);

        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
        
        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
        
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
        x = nan(size(uniqrow,1),1);
        for i = 1:size(uniqrow,1)
            x(i) = datenum([uniqrow(i,:),1]);
        end
        simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
        
        if handles.radiobutton_simplot_secondperiod.Value
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
        else
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
        end
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        if handles.radiobutton_simplot_secondperiod.Value            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
        else
            xlim(handles.axes_VICsimflow,[x(1),x(end)])
        end
        
        handles.simflowplot_calper_h = h;
        
    elseif handles.checkbox_StreamPlot_obs.Value
        
        if handles.Is_ObsFlow_Daily
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_mon_obs = obsflow(:,1:2);
            x_obs = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
            end
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = obsflow;
        end
        
        h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
        xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
        ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
        datetick(handles.axes_VICsimflow,'x')
        xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
        
        handles.simflowplot_calper_h = h;
        
    end
    
    handles.StreamPlot_timestep_old = 'Monthly';
    
end
if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
	set(handles.popupmenu_Metrics_select,'Value',1)
	set(handles.edit_Metrics_calculation,'String',[])
    set(handles.edit_Metrics_calculation_val,'String',[])
end
guidata(hObject, handles);



% --- Executes on button press in radiobutton_simplot_firstperiod.
function radiobutton_simplot_firstperiod_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton_simplot_firstperiod (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton_simplot_firstperiod


% --- Executes on button press in radiobutton_simplot_secondperiod.
function radiobutton_simplot_secondperiod_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    if get(handles.checkbox_StreamPlot_sim,'Value') && get(handles.checkbox_StreamPlot_obs,'Value')
        set(handles.edit_Metrics_calculation_val,'Enable','inactive')
        set(handles.edit_Metrics_calculation,'String',[])
        set(handles.popupmenu_Metrics_select,'Value',1)
    end
else
    set(handles.edit_Metrics_calculation_val,'Enable','off','String',[])
end

fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
while ~feof(fileID)
    paraminfo = fgetl(fileID);
    comment_char = strfind(paraminfo,'#');
    if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
    
    if ~isempty(paraminfo)
        linecontent = textscan(paraminfo,'%s');
        if ~isempty(linecontent{1})
            if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                routoutfile = linecontent{1}{2};
                break;
            end
        end
        
    end
end
fclose(fileID);
simflow = load(routoutfile);

syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});

sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
simflow_calper = simflow(sind_calper:eind_calper,end);
datemat_day_calper = simflow(sind_calper:eind_calper,1:3);

syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});

sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
simflow_valper = simflow(sind_valper:eind_valper,end);
datemat_day_valper = simflow(sind_valper:eind_valper,1:3);

if get(hObject,'Value')

    content = handles.popupmenu_StreamPlot_timestep.String;
    if strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Daily')
        if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
            
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));

            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r');
                                                
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            
            handles.simflowplot_calper_h = h;
            
        elseif handles.checkbox_StreamPlot_sim.Value
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
           
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
                                                          
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            
            handles.simflowplot_calper_h = h;
            
        elseif handles.checkbox_StreamPlot_sim.Value
            
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));       

            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
                                                
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            
            handles.simflowplot_calper_h = h;
            
        end
        
    elseif strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Monthly')
        
        if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
            
            if handles.Is_ObsFlow_Daily
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_day_obs = obsflow(:,1:3);
                datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
                
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
                end
                
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end

            else
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_mon_obs = obsflow(:,1:2);
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = obsflow;
        
            end
            
            uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
            x = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
            
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
            
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')

            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])

            handles.simflowplot_calper_h = h;
            
        elseif handles.checkbox_StreamPlot_sim.Value
            
            uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
            x = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
            
            uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
            x_val = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x_val(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
            
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
              
            xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            
            handles.simflowplot_calper_h = h;
            
        elseif handles.checkbox_StreamPlot_obs.Value
            
            if handles.Is_ObsFlow_Daily
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_day_obs = obsflow(:,1:3);
                datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
                
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
                end
                
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end

            else
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_mon_obs = obsflow(:,1:2);
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = obsflow;
        
            end
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
            
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')

            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])

            handles.simflowplot_calper_h = h;
            
        end
        
    end
       
else
     
    content = handles.popupmenu_StreamPlot_timestep.String;
    if strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Daily')
        if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
            
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));

            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
                                    
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')

            xlim(handles.axes_VICsimflow,[x(1),x(end)])

            handles.simflowplot_calper_h = h;
        elseif handles.checkbox_StreamPlot_sim.Value
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
 
            h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
                                              
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')

            xlim(handles.axes_VICsimflow,[x(1),x(end)])


            handles.simflowplot_calper_h = h;
            
        elseif handles.checkbox_StreamPlot_obs.Value
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));                 

            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
                                    
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')

            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])

            handles.simflowplot_calper_h = h;
        end
    elseif strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Monthly')
        
        if handles.checkbox_StreamPlot_obs.Value && handles.checkbox_StreamPlot_sim.Value
            
            if handles.Is_ObsFlow_Daily
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_day_obs = obsflow(:,1:3);
                datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
                
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
                end
                
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end

            else
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_mon_obs = obsflow(:,1:2);
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = obsflow;
        
            end
            
            uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
            x = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
            
 
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');

            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')

            xlim(handles.axes_VICsimflow,[x(1),x(end)])

            handles.simflowplot_calper_h = h;
            
        elseif handles.checkbox_StreamPlot_sim.Value
            uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
            x = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
            

            h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');

            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')

            xlim(handles.axes_VICsimflow,[x(1),x(end)])

            handles.simflowplot_calper_h = h;
            
        elseif handles.checkbox_StreamPlot_obs.Value
            
            if handles.Is_ObsFlow_Daily
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_day_obs = obsflow(:,1:3);
                datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
                
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
                end
                
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end

            else
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_mon_obs = obsflow(:,1:2);
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = obsflow;
        
            end
 
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');

            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')

            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])

            handles.simflowplot_calper_h = h;    
        end
        
    end
    
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_StreamPlot_sim.
function checkbox_StreamPlot_sim_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    
    fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
    while ~feof(fileID)
        paraminfo = fgetl(fileID);
        comment_char = strfind(paraminfo,'#');
        if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
        
        if ~isempty(paraminfo)
            linecontent = textscan(paraminfo,'%s');
            if ~isempty(linecontent{1})
                if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                    routoutfile = linecontent{1}{2};
                    break;
                end
            end
            
        end
    end
    fclose(fileID);
    simflow = load(routoutfile);
%     datemat_day = simflow(:,1:3);
    
    syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
    smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
    sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
    eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
    emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
    eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
    
    sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
    eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
    simflow_calper = simflow(sind_calper:eind_calper,end);
    datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
    
    syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
    smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
    sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
    eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
    emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
    eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
    
    sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
    eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
    simflow_valper = simflow(sind_valper:eind_valper,end);
    datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
    
    
    content = handles.popupmenu_StreamPlot_timestep.String;
    if strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Daily')
        if handles.checkbox_StreamPlot_obs.Value
            
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end                                    
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
        else
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r'); 
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end                                               
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
        end
    elseif strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Monthly')
        
        if handles.checkbox_StreamPlot_obs.Value
            
            if handles.Is_ObsFlow_Daily
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_day_obs = obsflow(:,1:3);
                datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
                
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
                end
                
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end

            else
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_mon_obs = obsflow(:,1:2);
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = obsflow;
        
            end
            
            uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
            x = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
            
            if handles.radiobutton_simplot_secondperiod.Value
                uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
                x_val = nan(size(uniqrow,1),1);
                for i = 1:size(uniqrow,1)
                    x_val(i) = datenum([uniqrow(i,:),1]);
                end
                simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
                h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');  
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
            end
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
        else
            uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
            x = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
            
            if handles.radiobutton_simplot_secondperiod.Value
                uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
                x_val = nan(size(uniqrow,1),1);
                for i = 1:size(uniqrow,1)
                    x_val(i) = datenum([uniqrow(i,:),1]);
                end
                simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
                h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');  
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
            end
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value                
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
        end
        
    end
    
else
    
    if handles.checkbox_StreamPlot_obs.Value
        
        content = handles.popupmenu_StreamPlot_timestep.String;
        
        if strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Daily')
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            handles.simflowplot_calper_h = h;
        else
            obsflow = load(handles.edit_ObsFlowFile.String);
            datemat_day_obs = obsflow(:,1:3);
            uniqrow_obs = unique(datemat_day_obs(:,1:2),'rows');
            x_obs = nan(size(uniqrow_obs,1),1);
            for i = 1:size(uniqrow_obs,1)
                x_obs(i) = datenum([uniqrow_obs(i,:),1]);
            end
            
            datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
            
            obsflow = obsflow(:,end);
            obsflow(obsflow<0) = nan;
            obsflow_mon = nan(size(datemat_mon_obs,1),1);
            for i = 1:size(datemat_mon_obs,1)
                obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
            end
            
            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            handles.simflowplot_calper_h = h;
        end
        
    else
        set(handles.simflowplot_calper_h,'Visible','off')
    end
    
end

if get(hObject,'Value') && get(handles.checkbox_StreamPlot_obs,'Value')
    set(handles.popupmenu_Metrics_select,'Enable','on')
    set(handles.pushbutton_undock_fig,'Enable','on')
    set(handles.edit_Metrics_calculation,'Enable','inactive')
    if get(handles.radiobutton_simplot_secondperiod,'Value')
        set(handles.edit_Metrics_calculation_val,'Enable','inactive')
    end
else
    set(handles.popupmenu_Metrics_select,'Value',1); 
    set(handles.popupmenu_Metrics_select,'Enable','off')
    set(handles.pushbutton_undock_fig,'Enable','off')
    set(handles.edit_Metrics_calculation,'Enable','off','String',[])
    set(handles.edit_Metrics_calculation_val,'Enable','off','String',[])
end

guidata(hObject, handles);


% --- Executes on button press in checkbox_StreamPlot_obs.
function checkbox_StreamPlot_obs_Callback(hObject, eventdata, handles)
if get(hObject,'Value')       

    content = handles.popupmenu_StreamPlot_timestep.String;
    if strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Daily')
        
        obsflow = load(handles.edit_ObsFlowFile.String);
        datemat_day_obs = obsflow(:,1:3);
        obsflow = obsflow(:,end);
        obsflow(obsflow<0) = nan;
        x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
        if handles.checkbox_StreamPlot_sim.Value
            
            fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
            while ~feof(fileID)
                paraminfo = fgetl(fileID);
                comment_char = strfind(paraminfo,'#');
                if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
                
                if ~isempty(paraminfo)
                    linecontent = textscan(paraminfo,'%s');
                    if ~isempty(linecontent{1})
                        if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                            routoutfile = linecontent{1}{2};
                            break;
                        end
                    end
                    
                end
            end
            fclose(fileID);
            
            simflow = load(routoutfile);
            
            syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
            smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
            sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
            eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
            emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
            eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
            
            sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
            eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
            simflow_calper = simflow(sind_calper:eind_calper,end);
%             datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
            
            syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
            smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
            sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
            eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
            emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
            eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
            
            sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
            eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
            simflow_valper = simflow(sind_valper:eind_valper,end);
            
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b',x_val,simflow_valper,'r');
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k',x,simflow_calper,'b');
            end
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;
        else
            x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));
            h = plot(handles.axes_VICsimflow,x_obs,obsflow,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            handles.simflowplot_calper_h = h;
        end
        
    elseif strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Monthly')
        
        if handles.checkbox_StreamPlot_sim.Value
            
            fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
            while ~feof(fileID)
                paraminfo = fgetl(fileID);
                comment_char = strfind(paraminfo,'#');
                if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
                
                if ~isempty(paraminfo)
                    linecontent = textscan(paraminfo,'%s');
                    if ~isempty(linecontent{1})
                        if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                            routoutfile = linecontent{1}{2};
                            break;
                        end
                    end
                    
                end
            end
            fclose(fileID);
            simflow = load(routoutfile);
%             datemat_day = simflow(:,1:3);
            
            syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
            smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
            sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
            eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
            emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
            eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
            
            sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
            eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
            simflow_calper = simflow(sind_calper:eind_calper,end);
            datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
            
            syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
            smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
            sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
            eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
            emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
            eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
            
            sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
            eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
            simflow_valper = simflow(sind_valper:eind_valper,end);
            datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
  
            if handles.Is_ObsFlow_Daily
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_day_obs = obsflow(:,1:3);
                datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end
                
                datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
                end
                
            else
                obsflow = load(handles.edit_ObsFlowFile.String);
                uniqrow_obs = obsflow(:,1:2);
                x_obs = nan(size(uniqrow_obs,1),1);
                for i = 1:size(uniqrow_obs,1)
                    x_obs(i) = datenum([uniqrow_obs(i,:),1]);
                end
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = obsflow;
            end      
            
            uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
            x = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
            
            if handles.radiobutton_simplot_secondperiod.Value
                uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
                x_val = nan(size(uniqrow,1),1);
                for i = 1:size(uniqrow,1)
                    x_val(i) = datenum([uniqrow(i,:),1]);
                end
                simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
                h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
            else
                h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k',x,simflow_calper_mon,'b');
            end 
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end

            handles.simflowplot_calper_h = h;

        else
            
            if handles.Is_ObsFlow_Daily
                obsflow = load(handles.edit_ObsFlowFile.String);
                datemat_day_obs = obsflow(:,1:3);
                datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
                x_obs = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
                end
                
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = nan(size(datemat_mon_obs,1),1);
                for i = 1:size(datemat_mon_obs,1)
                    obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
                end
                
            else
                obsflow = load(handles.edit_ObsFlowFile.String);
                uniqrow_obs = obsflow(:,1:2);
                x_obs = nan(size(uniqrow_obs,1),1);
                for i = 1:size(uniqrow_obs,1)
                    x_obs(i) = datenum([uniqrow_obs(i,:),1]);
                end
                obsflow = obsflow(:,end);
                obsflow(obsflow<0) = nan;
                obsflow_mon = obsflow;
            end    

            h = plot(handles.axes_VICsimflow,x_obs,obsflow_mon,'k');
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            xlim(handles.axes_VICsimflow,[x_obs(1),x_obs(end)])
            handles.simflowplot_calper_h = h;
        end
        
    end
    
else  
    
    content = handles.popupmenu_StreamPlot_timestep.String; 
    if handles.checkbox_StreamPlot_sim.Value
        
        fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgetl(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                        routoutfile = linecontent{1}{2};
                        break;
                    end
                end
                
            end
        end
        fclose(fileID);
        simflow = load(routoutfile);
%         datemat_day = simflow(:,1:3);
        
        syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
        smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
        sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
        eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
        emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
        eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});

        sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
        eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
        simflow_calper = simflow(sind_calper:eind_calper,end);
        datemat_day_calper = simflow(sind_calper:eind_calper,1:3);

        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});

        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);

        
        if strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Daily')
            
            x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
            x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
            if handles.radiobutton_simplot_secondperiod.Value
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b',x_val,simflow_valper,'r');
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper,'b');
            end
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end
            
            handles.simflowplot_calper_h = h;
            
        else
            
            uniqrow = unique(datemat_day_calper(:,1:2),'rows','stable');
            x = nan(size(uniqrow,1),1);
            for i = 1:size(uniqrow,1)
                x(i) = datenum([uniqrow(i,:),1]);
            end
            simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
            
            if handles.radiobutton_simplot_secondperiod.Value
                uniqrow = unique(datemat_day_valper(:,1:2),'rows','stable');
                x_val = nan(size(uniqrow,1),1);
                for i = 1:size(uniqrow,1)
                    x_val(i) = datenum([uniqrow(i,:),1]);
                end
                simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
                h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b',x_val,simflow_valper_mon,'r');
            else
                h = plot(handles.axes_VICsimflow,x,simflow_calper_mon,'b');
            end
            xlabel(handles.axes_VICsimflow,'Date','fontsize',10)
            ylabel(handles.axes_VICsimflow,'Streamflow (mm)','fontsize',10)
            datetick(handles.axes_VICsimflow,'x')
            if handles.radiobutton_simplot_secondperiod.Value               
                xlim(handles.axes_VICsimflow,[min(x(1),x_val(1)),max(x(end),x_val(end))])
            else
                xlim(handles.axes_VICsimflow,[x(1),x(end)])
            end
            
            handles.simflowplot_calper_h = h;
            
        end
        
    else
        
        set(handles.simflowplot_calper_h,'Visible','off')
        
    end
    
end

if get(hObject,'Value') && get(handles.checkbox_StreamPlot_sim,'Value')
    set(handles.popupmenu_Metrics_select,'Enable','on')
    set(handles.pushbutton_undock_fig,'Enable','on')
    set(handles.edit_Metrics_calculation,'Enable','inactive')
    if get(handles.radiobutton_simplot_secondperiod,'Value')
        set(handles.edit_Metrics_calculation_val,'Enable','inactive')
    end
else
    set(handles.popupmenu_Metrics_select,'Value',1);
    set(handles.popupmenu_Metrics_select,'Enable','off')
    set(handles.pushbutton_undock_fig,'Enable','off')
    set(handles.edit_Metrics_calculation,'Enable','off','String',[])
    set(handles.edit_Metrics_calculation_val,'Enable','off','String',[])
end

guidata(hObject, handles);


% --- Executes on selection change in popupmenu_Metrics_select.
function popupmenu_Metrics_select_Callback(hObject, eventdata, handles)
contents = cellstr(get(hObject,'String'));
metrics_sel =  deblank(contents{get(hObject,'Value')});

if get(hObject,'Value') == 1
    
    set(handles.edit_Metrics_calculation,'String',[]);
    
else
    
    fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
    while ~feof(fileID)
        paraminfo = fgetl(fileID);
        comment_char = strfind(paraminfo,'#');
        if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
        
        if ~isempty(paraminfo)
            linecontent = textscan(paraminfo,'%s');
            if ~isempty(linecontent{1})
                if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                    routoutfile = linecontent{1}{2};
                    break;
                end
            end
            
        end
    end
    fclose(fileID);
    simflow = load(routoutfile);
%     simflow_mon = grpstats(simflow(:,end),{simflow(:,1),simflow(:,2)},'sum');
    
    syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
    smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
    sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
    eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
    emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
    eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
    
    sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
    eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
    datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
    simflow_calper = simflow(sind_calper:eind_calper,end);
    simflow_mon_calper = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
    
    if handles.radiobutton_simplot_secondperiod.Value
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        simflow_mon_valper = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
    end
    
    if handles.Is_ObsFlow_Daily
        obsflow = load(handles.edit_ObsFlowFile.String);
        datemat_day_obs = obsflow(:,1:3);
        datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows','stable');
        
        obsflow = obsflow(:,end);
        obsflow(obsflow<0) = nan;
        obsflow_mon = nan(size(datemat_mon_obs,1),1);
        for i = 1:size(datemat_mon_obs,1)
            obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
        end

    else
        obsflow = load(handles.edit_ObsFlowFile.String);
        datemat_mon_obs = obsflow(:,1:2);

        obsflow = obsflow(:,end);
        obsflow(obsflow<0) = nan;
        obsflow_mon = obsflow;
    end
    
    content = handles.popupmenu_StreamPlot_timestep.String;
    if strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Daily')
        
        if datenum(datemat_day_calper(1,:)) <= datenum(datemat_day_obs(1,:))
            cal_sdate = datemat_day_obs(1,:);
        else
            cal_sdate = datemat_day_calper(1,:);
        end
        if datenum(datemat_day_calper(end,:)) <= datenum(datemat_day_obs(end,:))
            cal_edate = datemat_day_calper(end,:);
        else
            cal_edate = datemat_day_obs(end,:);
        end
        sind_sim = find(datemat_day_calper(:,1)==cal_sdate(1) & datemat_day_calper(:,2)==cal_sdate(2) & datemat_day_calper(:,3)==cal_sdate(3));
        eind_sim = find(datemat_day_calper(:,1)==cal_edate(1) & datemat_day_calper(:,2)==cal_edate(2) & datemat_day_calper(:,3)==cal_edate(3));
        sind_obs = find(datemat_day_obs(:,1)==cal_sdate(1) & datemat_day_obs(:,2)==cal_sdate(2) & datemat_day_obs(:,3)==cal_sdate(3));
        eind_obs = find(datemat_day_obs(:,1)==cal_edate(1) & datemat_day_obs(:,2)==cal_edate(2) & datemat_day_obs(:,3)==cal_edate(3));
        
        simflow_sel_calper = simflow_calper(sind_sim:eind_sim);
        obsflow_sel_calper = obsflow(sind_obs:eind_obs);
        
        if handles.radiobutton_simplot_secondperiod.Value
            
            if datenum(datemat_day_valper(1,:)) <= datenum(datemat_day_obs(1,:))
                val_sdate = datemat_day_obs(1,:);
            else
                val_sdate = datemat_day_valper(1,:);
            end
            if datenum(datemat_day_valper(end,:)) <= datenum(datemat_day_obs(end,:))
                val_edate = datemat_day_valper(end,:);
            else
                val_edate = datemat_day_obs(end,:);
            end
            sind_sim = find(datemat_day_valper(:,1)==val_sdate(1) & datemat_day_valper(:,2)==val_sdate(2) & datemat_day_valper(:,3)==val_sdate(3));
            eind_sim = find(datemat_day_valper(:,1)==val_edate(1) & datemat_day_valper(:,2)==val_edate(2) & datemat_day_valper(:,3)==val_edate(3));
            sind_obs = find(datemat_day_obs(:,1)==val_sdate(1) & datemat_day_obs(:,2)==val_sdate(2) & datemat_day_obs(:,3)==val_sdate(3));
            eind_obs = find(datemat_day_obs(:,1)==val_edate(1) & datemat_day_obs(:,2)==val_edate(2) & datemat_day_obs(:,3)==val_edate(3));
            
            simflow_sel_valper = simflow_valper(sind_sim:eind_sim);
            obsflow_sel_valper = obsflow(sind_obs:eind_obs);
            
        end
        
    elseif strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Monthly')
        
        datemat_mon_calper = unique(datemat_day_calper(:,1:2),'rows','stable');        
        
        if datenum([datemat_mon_calper(1,:),1]) <= datenum([datemat_mon_obs(1,:),1])
            cal_sdate = datemat_mon_obs(1,:);
        else
            cal_sdate = datemat_mon_calper(1,:);
        end
        if datenum([datemat_mon_calper(end,:),1]) <= datenum([datemat_mon_obs(end,:),1])
            cal_edate = datemat_mon_calper(end,:);
        else
            cal_edate = datemat_mon_obs(end,:);
        end
        sind_sim = find(datemat_mon_calper(:,1)==cal_sdate(1) & datemat_mon_calper(:,2)==cal_sdate(2));
        eind_sim = find(datemat_mon_calper(:,1)==cal_edate(1) & datemat_mon_calper(:,2)==cal_edate(2));
        sind_obs = find(datemat_mon_obs(:,1)==cal_sdate(1) & datemat_mon_obs(:,2)==cal_sdate(2));
        eind_obs = find(datemat_mon_obs(:,1)==cal_edate(1) & datemat_mon_obs(:,2)==cal_edate(2));
        
        simflow_sel_calper = simflow_mon_calper(sind_sim:eind_sim);
        obsflow_sel_calper = obsflow_mon(sind_obs:eind_obs);
        
        if handles.radiobutton_simplot_secondperiod.Value
            
            datemat_mon_valper = unique(datemat_day_valper(:,1:2),'rows','stable');
            
            if datenum([datemat_mon_valper(1,:),1]) <= datenum([datemat_mon_obs(1,:),1])
                val_sdate = datemat_mon_obs(1,:);
            else
                val_sdate = datemat_mon_valper(1,:);
            end
            if datenum([datemat_mon_valper(end,:),1]) <= datenum([datemat_mon_obs(end,:),1])
                val_edate = datemat_mon_valper(end,:);
            else
                val_edate = datemat_mon_obs(end,:);
            end
            sind_sim = find(datemat_mon_valper(:,1)==val_sdate(1) & datemat_mon_valper(:,2)==val_sdate(2));
            eind_sim = find(datemat_mon_valper(:,1)==val_edate(1) & datemat_mon_valper(:,2)==val_edate(2));
            sind_obs = find(datemat_mon_obs(:,1)==val_sdate(1) & datemat_mon_obs(:,2)==val_sdate(2));
            eind_obs = find(datemat_mon_obs(:,1)==val_edate(1) & datemat_mon_obs(:,2)==val_edate(2));
            
            simflow_sel_valper = simflow_mon_valper(sind_sim:eind_sim);
            obsflow_sel_valper = obsflow_mon(sind_obs:eind_obs);
            
        end
        
    end
    
    switch metrics_sel
        
        case 'NSE'
            nse = 1-mean((simflow_sel_calper(~isnan(obsflow_sel_calper))-obsflow_sel_calper(~isnan(obsflow_sel_calper))).^2)/var(obsflow_sel_calper(~isnan(obsflow_sel_calper)),1);
            set(handles.edit_Metrics_calculation,'String',num2str(nse));
            if handles.radiobutton_simplot_secondperiod.Value
                nse = 1-mean((simflow_sel_valper(~isnan(obsflow_sel_valper))-obsflow_sel_valper(~isnan(obsflow_sel_valper))).^2)/var(obsflow_sel_valper(~isnan(obsflow_sel_valper)),1);
                set(handles.edit_Metrics_calculation_val,'String',num2str(nse));
            end
            
        case 'KGE'
            mean_ratio = mean(simflow_sel_calper(~isnan(obsflow_sel_calper)))/mean(obsflow_sel_calper(~isnan(obsflow_sel_calper)));
            std_ratio = std(simflow_sel_calper(~isnan(obsflow_sel_calper)),1)/std(obsflow_sel_calper(~isnan(obsflow_sel_calper)),1);
            lincorr   = corr(simflow_sel_calper(~isnan(obsflow_sel_calper)),obsflow_sel_calper(~isnan(obsflow_sel_calper)));
            EDistance = ((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2)^.5;
            kge = 1-EDistance;
            set(handles.edit_Metrics_calculation,'String',num2str(kge));
            if handles.radiobutton_simplot_secondperiod.Value
                mean_ratio = mean(simflow_sel_valper(~isnan(obsflow_sel_valper)))/mean(obsflow_sel_valper(~isnan(obsflow_sel_valper)));
                std_ratio = std(simflow_sel_valper(~isnan(obsflow_sel_valper)),1)/std(obsflow_sel_valper(~isnan(obsflow_sel_valper)),1);
                lincorr   = corr(simflow_sel_valper(~isnan(obsflow_sel_valper)),obsflow_sel_valper(~isnan(obsflow_sel_valper)));
                EDistance = ((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2)^.5;
                kge = 1-EDistance;
                set(handles.edit_Metrics_calculation_val,'String',num2str(kge));
            end
            
    end
    

    
end



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%                           Calibration
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% --- Executes on button press in pushbutton_ga_parametersetup_help.
function pushbutton_ga_parametersetup_help_Callback(hObject, eventdata, handles)
run('./library/help_doc/calpar_description.m')


% --- Executes on button press in pushbutton_ga_gaoption_help.
function pushbutton_ga_gaoption_help_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    winopen('./library/help_doc/NOTE for Genetic Algorithm.pdf')
end


% --- Executes on button press in pushbutton_CAL_SETUP.
function pushbutton_CAL_SETUP_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_CAL_SETUP,'foregroundcolor','k')
    set(handles.uipanel_CAL_SETUP,'visible','on')  

    set(handles.pushbutton_CAL_GA,'value',0,'foregroundcolor',[0.65,0.65,0.65])    
    set(handles.uipanel_CAL_GA,'visible','off')
    set(handles.pushbutton_CAL_GSA,'value',0,'foregroundcolor',[0.65,0.65,0.65])    
    set(handles.uipanel_CAL_GSA,'visible','off')
else
    set(handles.pushbutton_CAL_SETUP,'value',1)
end


% --- Executes on button press in pushbutton_CAL_GA.
function pushbutton_CAL_GA_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_CAL_GA,'foregroundcolor','k')
    set(handles.uipanel_CAL_GA,'visible','on')  

    set(handles.pushbutton_CAL_SETUP,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.uipanel_CAL_SETUP,'visible','off')
    set(handles.pushbutton_CAL_GSA,'value',0,'foregroundcolor',[0.65,0.65,0.65])    
    set(handles.uipanel_CAL_GSA,'visible','off')
    
    set(handles.text_PopulationSize,'visible','on')
    set(handles.text_Generations,'visible','on')
    set(handles.text_EliteCount,'visible','on')
    set(handles.text_CrossoverFraction,'visible','on')
    set(handles.text_StallGenerations,'visible','on')
    set(handles.text_FunctionTolerance,'visible','on')
    set(handles.text_FitnessScaling,'visible','on')
    set(handles.text_SelectionFunction,'visible','on')
    set(handles.text_CrossoverFunction,'visible','on')
    set(handles.text_MutationFunction,'visible','on')
    
    set(handles.edit_popsize,'visible','on')
    set(handles.edit_gensize,'visible','on')
    set(handles.edit_elitsize,'visible','on')
    set(handles.edit_crossfrac,'visible','on')
    set(handles.edit_movewin,'visible','on')
    set(handles.edit_functol,'visible','on')
    set(handles.popupmenu_fitscale,'visible','on')
    set(handles.popupmenu_paresel,'visible','on')
    set(handles.popupmenu_crossover,'visible','on')
    set(handles.popupmenu_mutation,'visible','on')
    
    set(handles.pushbutton_ga_gaoption_help,'visible','on')
    
    set(handles.uipanel_GA_Options,'title','GA Options')
    
    set(handles.text_NumberSample,'visible','off')
    set(handles.text_SampleStrategy,'visible','off')
    set(handles.text_DesighType,'visible','off')
    set(handles.edit_numsample_gsa,'visible','off')
    set(handles.popupmenu_samplestrategy_gsa,'visible','off')
    set(handles.popupmenu_designtype_gsa,'visible','off')
    
    set(handles.text_Lumped,'visible','on')
    set(handles.text_EqualInterval,'visible','on')
    set(handles.pushbutton_lumped_all,'visible','on')
    set(handles.pushbutton_lumped_clear,'visible','on')
    set(handles.checkbox_lumped_infilt,'visible','on')
    set(handles.checkbox_lumped_Ds,'visible','on')
    set(handles.checkbox_lumped_Dsmax,'visible','on')
    set(handles.checkbox_lumped_Ws,'visible','on')
    set(handles.checkbox_lumped_c,'visible','on')
    set(handles.checkbox_lumped_depth1,'visible','on')
    set(handles.checkbox_lumped_depth2,'visible','on')
    set(handles.checkbox_lumped_depth3,'visible','on')
    set(handles.checkbox_lumped_snowtemp,'visible','on')
    set(handles.checkbox_lumped_raintemp,'visible','on')
    set(handles.checkbox_lumped_snowrough,'visible','on')
    set(handles.checkbox_lumped_N,'visible','on')
    set(handles.checkbox_lumped_K,'visible','on')
    set(handles.checkbox_lumped_Velo,'visible','on')
    set(handles.checkbox_lumped_Diff,'visible','on')
    set(handles.checkbox_equalinterval_infilt,'visible','on')
    set(handles.checkbox_equalinterval_Ds,'visible','on')
    set(handles.checkbox_equalinterval_Dsmax,'visible','on')
    set(handles.checkbox_equalinterval_Ws,'visible','on')
    set(handles.checkbox_equalinterval_c,'visible','on')
    set(handles.checkbox_equalinterval_depth1,'visible','on')
    set(handles.checkbox_equalinterval_depth2,'visible','on')
    set(handles.checkbox_equalinterval_depth3,'visible','on')
    set(handles.checkbox_equalinterval_snowtemp,'visible','on')
    set(handles.checkbox_equalinterval_raintemp,'visible','on')
    set(handles.checkbox_equalinterval_snowrough,'visible','on')
    set(handles.checkbox_equalinterval_N,'visible','on')
    set(handles.checkbox_equalinterval_K,'visible','on')
    set(handles.checkbox_equalinterval_Velo,'visible','on')
    set(handles.checkbox_equalinterval_Diff,'visible','on')
else
    set(handles.pushbutton_CAL_GA,'value',1)
end








% --- Executes on button press in pushbutton_calibrated_all.
function pushbutton_calibrated_all_Callback(hObject, eventdata, handles)
set(handles.checkbox_calibrated_infilt,'value',1)
set(handles.checkbox_calibrated_Ds,'value',1)
set(handles.checkbox_calibrated_Dsmax,'value',1)
set(handles.checkbox_calibrated_Ws,'value',1)
set(handles.checkbox_calibrated_c,'value',1)
set(handles.checkbox_calibrated_depth1,'value',1)
set(handles.checkbox_calibrated_depth2,'value',1)
set(handles.checkbox_calibrated_depth3,'value',1)
set(handles.checkbox_calibrated_snowtemp,'value',1)
set(handles.checkbox_calibrated_raintemp,'value',1)
set(handles.checkbox_calibrated_snowrough,'value',1)
set(handles.checkbox_calibrated_N,'value',1)
set(handles.checkbox_calibrated_K,'value',1)
set(handles.checkbox_calibrated_Velo,'value',1)
set(handles.checkbox_calibrated_Diff,'value',1)

set(handles.checkbox_lumped_infilt,'enable','on')
set(handles.checkbox_lumped_Ds,'enable','on')
set(handles.checkbox_lumped_Dsmax,'enable','on')
set(handles.checkbox_lumped_Ws,'enable','on')
set(handles.checkbox_lumped_c,'enable','on')
set(handles.checkbox_lumped_depth1,'enable','on')
set(handles.checkbox_lumped_depth2,'enable','on')
set(handles.checkbox_lumped_depth3,'enable','on')
set(handles.checkbox_lumped_snowtemp,'enable','on')
set(handles.checkbox_lumped_raintemp,'enable','on')
set(handles.checkbox_lumped_snowrough,'enable','on')
set(handles.checkbox_lumped_N,'enable','on')
set(handles.checkbox_lumped_K,'enable','on')
set(handles.checkbox_lumped_Velo,'enable','on')
set(handles.checkbox_lumped_Diff,'enable','on')

set(handles.checkbox_equalinterval_infilt,'enable','on')
set(handles.checkbox_equalinterval_Ds,'enable','on')
set(handles.checkbox_equalinterval_Dsmax,'enable','on')
set(handles.checkbox_equalinterval_Ws,'enable','on')
set(handles.checkbox_equalinterval_c,'enable','on')
set(handles.checkbox_equalinterval_depth1,'enable','on')
set(handles.checkbox_equalinterval_depth2,'enable','on')
set(handles.checkbox_equalinterval_depth3,'enable','on')
set(handles.checkbox_equalinterval_snowtemp,'enable','on')
set(handles.checkbox_equalinterval_raintemp,'enable','on')
set(handles.checkbox_equalinterval_snowrough,'enable','on')
set(handles.checkbox_equalinterval_N,'enable','on')
set(handles.checkbox_equalinterval_K,'enable','on')
set(handles.checkbox_equalinterval_Velo,'enable','on')
set(handles.checkbox_equalinterval_Diff,'enable','on')

set(handles.uipanel_parsetup,'ForegroundColor','k')
    
handles.calready_calpar = 1;

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject,handles);


% --- Executes on button press in pushbutton_calibrated_clear.
function pushbutton_calibrated_clear_Callback(hObject, eventdata, handles)
set(handles.checkbox_calibrated_infilt,'value',0)
set(handles.checkbox_calibrated_Ds,'value',0)
set(handles.checkbox_calibrated_Dsmax,'value',0)
set(handles.checkbox_calibrated_Ws,'value',0)
set(handles.checkbox_calibrated_c,'value',0)
set(handles.checkbox_calibrated_depth1,'value',0)
set(handles.checkbox_calibrated_depth2,'value',0)
set(handles.checkbox_calibrated_depth3,'value',0)
set(handles.checkbox_calibrated_snowtemp,'value',0)
set(handles.checkbox_calibrated_raintemp,'value',0)
set(handles.checkbox_calibrated_snowrough,'value',0)
set(handles.checkbox_calibrated_N,'value',0)
set(handles.checkbox_calibrated_K,'value',0)
set(handles.checkbox_calibrated_Velo,'value',0)
set(handles.checkbox_calibrated_Diff,'value',0)

set(handles.checkbox_lumped_infilt,'enable','off')
set(handles.checkbox_lumped_Ds,'enable','off')
set(handles.checkbox_lumped_Dsmax,'enable','off')
set(handles.checkbox_lumped_Ws,'enable','off')
set(handles.checkbox_lumped_c,'enable','off')
set(handles.checkbox_lumped_depth1,'enable','off')
set(handles.checkbox_lumped_depth2,'enable','off')
set(handles.checkbox_lumped_depth3,'enable','off')
set(handles.checkbox_lumped_snowtemp,'enable','off')
set(handles.checkbox_lumped_raintemp,'enable','off')
set(handles.checkbox_lumped_snowrough,'enable','off')
set(handles.checkbox_lumped_N,'enable','off')
set(handles.checkbox_lumped_K,'enable','off')
set(handles.checkbox_lumped_Velo,'enable','off')
set(handles.checkbox_lumped_Diff,'enable','off')

set(handles.checkbox_equalinterval_infilt,'value',0)
set(handles.checkbox_equalinterval_Ds,'value',0)
set(handles.checkbox_equalinterval_Dsmax,'value',0)
set(handles.checkbox_equalinterval_Ws,'value',0)
set(handles.checkbox_equalinterval_c,'value',0)
set(handles.checkbox_equalinterval_depth1,'value',0)
set(handles.checkbox_equalinterval_depth2,'value',0)
set(handles.checkbox_equalinterval_depth3,'value',0)
set(handles.checkbox_equalinterval_snowtemp,'value',0)
set(handles.checkbox_equalinterval_raintemp,'value',0)
set(handles.checkbox_equalinterval_snowrough,'value',0)
set(handles.checkbox_equalinterval_N,'value',0)
set(handles.checkbox_equalinterval_K,'value',0)
set(handles.checkbox_equalinterval_Velo,'value',0)
set(handles.checkbox_equalinterval_Diff,'value',0)

set(handles.checkbox_equalinterval_infilt,'enable','off')
set(handles.checkbox_equalinterval_Ds,'enable','off')
set(handles.checkbox_equalinterval_Dsmax,'enable','off')
set(handles.checkbox_equalinterval_Ws,'enable','off')
set(handles.checkbox_equalinterval_c,'enable','off')
set(handles.checkbox_equalinterval_depth1,'enable','off')
set(handles.checkbox_equalinterval_depth2,'enable','off')
set(handles.checkbox_equalinterval_depth3,'enable','off')
set(handles.checkbox_equalinterval_snowtemp,'enable','off')
set(handles.checkbox_equalinterval_raintemp,'enable','off')
set(handles.checkbox_equalinterval_snowrough,'enable','off')
set(handles.checkbox_equalinterval_N,'enable','off')
set(handles.checkbox_equalinterval_K,'enable','off')
set(handles.checkbox_equalinterval_Velo,'enable','off')
set(handles.checkbox_equalinterval_Diff,'enable','off')

set(handles.checkbox_lumped_infilt,'value',0)
set(handles.checkbox_lumped_Ds,'value',0)
set(handles.checkbox_lumped_Dsmax,'value',0)
set(handles.checkbox_lumped_Ws,'value',0)
set(handles.checkbox_lumped_c,'value',0)
set(handles.checkbox_lumped_depth1,'value',0)
set(handles.checkbox_lumped_depth2,'value',0)
set(handles.checkbox_lumped_depth3,'value',0)
%     set(handles.checkbox_lumped_snowtemp,'value',0)
%     set(handles.checkbox_lumped_raintemp,'value',0)
set(handles.checkbox_lumped_snowrough,'value',0)
set(handles.checkbox_lumped_N,'value',0)
set(handles.checkbox_lumped_K,'value',0)
set(handles.checkbox_lumped_Velo,'value',0)
set(handles.checkbox_lumped_Diff,'value',0)

set(handles.uipanel_parsetup,'ForegroundColor','r')

set(handles.pushbutton_CAL_START,'enable','off')
set(handles.pushbutton_gsa_start,'enable','off')
handles.calready_calpar = 0;
guidata(hObject, handles);


% --- Executes on button press in pushbutton_lumped_all.
function pushbutton_lumped_all_Callback(hObject, eventdata, handles)
if hObject.Value
    if handles.checkbox_calibrated_infilt.Value; set(handles.checkbox_lumped_infilt,'value',1); end 
    if handles.checkbox_calibrated_Ds.Value; set(handles.checkbox_lumped_Ds,'value',1); end
    if handles.checkbox_calibrated_Dsmax.Value; set(handles.checkbox_lumped_Dsmax,'value',1); end
    if handles.checkbox_calibrated_Ws.Value; set(handles.checkbox_lumped_Ws,'value',1); end
    if handles.checkbox_calibrated_c.Value; set(handles.checkbox_lumped_c,'value',1); end
    if handles.checkbox_calibrated_depth1.Value; set(handles.checkbox_lumped_depth1,'value',1); end
    if handles.checkbox_calibrated_depth2.Value; set(handles.checkbox_lumped_depth2,'value',1); end
    if handles.checkbox_calibrated_depth3.Value; set(handles.checkbox_lumped_depth3,'value',1); end
    if handles.checkbox_calibrated_snowtemp.Value; set(handles.checkbox_lumped_snowtemp,'value',1); end
    if handles.checkbox_calibrated_raintemp.Value; set(handles.checkbox_lumped_raintemp,'value',1); end
    if handles.checkbox_calibrated_snowrough.Value; set(handles.checkbox_lumped_snowrough,'value',1); end
    if handles.checkbox_calibrated_N.Value; set(handles.checkbox_lumped_N,'value',1); end
    if handles.checkbox_calibrated_K.Value; set(handles.checkbox_lumped_K,'value',1); end
    if handles.checkbox_calibrated_Velo.Value; set(handles.checkbox_lumped_Velo,'value',1); end
    if handles.checkbox_calibrated_Diff.Value; set(handles.checkbox_lumped_Diff,'value',1); end
end


% --- Executes on button press in pushbutton_lumped_clear.
function pushbutton_lumped_clear_Callback(hObject, eventdata, handles)
if hObject.Value
    set(handles.checkbox_lumped_infilt,'value',0)
    set(handles.checkbox_lumped_Ds,'value',0)
    set(handles.checkbox_lumped_Dsmax,'value',0)
    set(handles.checkbox_lumped_Ws,'value',0)
    set(handles.checkbox_lumped_c,'value',0)
    set(handles.checkbox_lumped_depth1,'value',0)
    set(handles.checkbox_lumped_depth2,'value',0)
    set(handles.checkbox_lumped_depth3,'value',0)
%     set(handles.checkbox_lumped_snowtemp,'value',0)
%     set(handles.checkbox_lumped_raintemp,'value',0)
    set(handles.checkbox_lumped_snowrough,'value',0)
    set(handles.checkbox_lumped_N,'value',0)
    set(handles.checkbox_lumped_K,'value',0)
    set(handles.checkbox_lumped_Velo,'value',0)
    set(handles.checkbox_lumped_Diff,'value',0)
end


% --- Executes on button press in pushbutton_back2default.
function pushbutton_back2default_Callback(hObject, eventdata, handles)
if hObject.Value
    set(handles.edit_lower_infilt,'string','0.00001')
    set(handles.edit_upper_infilt,'string','0.9')
%     set(handles.edit_lower_Ds,'string','0.00001')
%     set(handles.edit_upper_Ds,'string','0.9')
%     set(handles.edit_lower_Dsmax,'string','0.0')
%     set(handles.edit_upper_Dsmax,'string','30.0')
%     set(handles.edit_lower_Ws,'string','0.1')
%     set(handles.edit_upper_Ws,'string','0.99')
%     set(handles.edit_lower_c,'string','1.0')
%     set(handles.edit_upper_c,'string','3.0')
    set(handles.edit_lower_depth1,'string','0.05')
    set(handles.edit_upper_depth1,'string','0.25')
    set(handles.edit_lower_depth2,'string','0.3')
    set(handles.edit_upper_depth2,'string','1.5')
    set(handles.edit_lower_depth3,'string','0.5')
    set(handles.edit_upper_depth3,'string','2.0')
    set(handles.edit_lower_snowtemp,'string','0.00001')
    set(handles.edit_upper_snowtemp,'string','5.0')
    set(handles.edit_lower_raintemp,'string','-5.0')
    set(handles.edit_upper_raintemp,'string','-0.00001')
    set(handles.edit_lower_snowrough,'string','0.005')
    set(handles.edit_upper_snowrough,'string','0.2')
    set(handles.edit_lower_N,'string','1.0')
    set(handles.edit_upper_N,'string','99.0')
    set(handles.edit_lower_K,'string','0.01')
    set(handles.edit_upper_K,'string','0.99')
    set(handles.edit_lower_Velo,'string','0.5')
    set(handles.edit_upper_Velo,'string','5.0')
    set(handles.edit_lower_Diff,'string','200.0')
    set(handles.edit_upper_Diff,'string','4000.0')
    
    if exist(handles.edit_CAL_INPUT_globalfile.String,'file') == 2
               
        fileID = fopen(handles.edit_CAL_INPUT_globalfile.String,'r');
        while ~feof(fileID)
            paraminfo = fgets(fileID);
            comment_char = strfind(paraminfo,'#');
            if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
            
            if ~isempty(paraminfo)
                linecontent = textscan(paraminfo,'%s');
                if ~isempty(linecontent{1})
                    if strcmp(linecontent{1}{1},'BASEFLOW')
                        handles.baseflow_model = linecontent{1}{2};
                    end
                end
                
            end
        end
        fclose(fileID); 
        
        
        if strcmp(handles.baseflow_model,'NIJSSEN2001')
            set(handles.edit_lower_Ds,'string','0.00001')
            set(handles.edit_upper_Ds,'string','0.9')
            set(handles.edit_lower_Dsmax,'string','0.00001')
            set(handles.edit_upper_Dsmax,'string','0.9')
            set(handles.edit_lower_Ws,'string','10')
            set(handles.edit_upper_Ws,'string','990')
            set(handles.edit_lower_c,'string','1.0')
            set(handles.edit_upper_c,'string','3.0')
        elseif strcmp(handles.baseflow_model,'ARNO')
            set(handles.edit_lower_Ds,'string','0.00001')
            set(handles.edit_upper_Ds,'string','0.9')
            set(handles.edit_lower_Dsmax,'string','0.0')
            set(handles.edit_upper_Dsmax,'string','30.0')
            set(handles.edit_lower_Ws,'string','0.1')
            set(handles.edit_upper_Ws,'string','0.99')
            set(handles.edit_lower_c,'string','1.0')
            set(handles.edit_upper_c,'string','3.0')
        end
        
        
    else
        
        set(handles.edit_lower_Ds,'string','0.00001')
        set(handles.edit_upper_Ds,'string','0.9')
        set(handles.edit_lower_Dsmax,'string','0.0')
        set(handles.edit_upper_Dsmax,'string','30.0')
        set(handles.edit_lower_Ws,'string','0.1')
        set(handles.edit_upper_Ws,'string','0.99')
        set(handles.edit_lower_c,'string','1.0')
        set(handles.edit_upper_c,'string','3.0')
        
    end
    
end



function edit_popsize_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0.5
    adjval = 100;
elseif str2double(get(hObject,'String')) >= 0.5
    adjval = round(str2double(get(hObject,'String')));
else
    adjval = 100;
end
set(handles.edit_popsize,'String',num2str(adjval))


% --- Executes during object creation, after setting all properties.
function edit_popsize_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_popsize (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_gensize_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0.5
    adjval = 100;
else
    adjval = round(str2double(get(hObject,'String')));
end
set(handles.edit_gensize,'String',num2str(adjval))   

set(handles.axes_ga_status,'xlim',[0,adjval])
set(handles.axes_ga_status_subbasin,'xlim',[0,adjval])


% --- Executes during object creation, after setting all properties.
function edit_gensize_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_gensize (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_elitsize_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0
    adjval = 2;
elseif str2double(get(hObject,'String')) > str2double(get(handles.edit_popsize,'String')) 
    adjval = str2double(get(handles.edit_popsize,'String'));
elseif isnan(str2double(get(hObject,'String')))
    adjval = 2;
else
    adjval = round(str2double(get(hObject,'String')));
end
set(handles.edit_elitsize,'String',num2str(adjval))


% --- Executes during object creation, after setting all properties.
function edit_elitsize_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_elitsize (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_crossfrac_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0
    adjval = 0.9;
elseif str2double(get(hObject,'String')) > 1 
    adjval = 0.9;
elseif isnan(str2double(get(hObject,'String')))
    adjval = 0.9;
else
    adjval = str2double(get(hObject,'String'));
end
set(handles.edit_crossfrac,'String',num2str(adjval))


% --- Executes during object creation, after setting all properties.
function edit_crossfrac_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_crossfrac (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_movewin_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0
    adjval = 50;
elseif isnan(str2double(get(hObject,'String')))
    adjval = 50;
else
    adjval = round(str2double(get(hObject,'String')));
end
set(handles.edit_movewin,'String',num2str(adjval)) 


% --- Executes during object creation, after setting all properties.
function edit_movewin_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_movewin (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_functol_Callback(hObject, eventdata, handles)
if str2double(get(hObject,'String')) < 0
    adjval = 0.00001;
elseif isnan(str2double(get(hObject,'String')))  
    adjval = 0.00001;
else
    adjval = str2double(get(hObject,'String'));
end
set(handles.edit_functol,'String',num2str(adjval)) 


% --- Executes during object creation, after setting all properties.
function edit_functol_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_functol (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu_fitfunc.
function popupmenu_fitfunc_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_fitfunc (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_fitfunc contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_fitfunc


% --- Executes during object creation, after setting all properties.
function popupmenu_fitfunc_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_fitfunc (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu_fitscale.
function popupmenu_fitscale_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_fitscale (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_fitscale contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_fitscale


% --- Executes during object creation, after setting all properties.
function popupmenu_fitscale_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_fitscale (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu_paresel.
function popupmenu_paresel_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_paresel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_paresel contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_paresel


% --- Executes during object creation, after setting all properties.
function popupmenu_paresel_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_paresel (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu_crossover.
function popupmenu_crossover_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_crossover (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_crossover contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_crossover


% --- Executes during object creation, after setting all properties.
function popupmenu_crossover_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_crossover (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu_mutation.
function popupmenu_mutation_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_mutation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_mutation contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_mutation


% --- Executes during object creation, after setting all properties.
function popupmenu_mutation_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_mutation (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end








% --- Executes on button press in checkbox_calibrated_infilt.
function checkbox_calibrated_infilt_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_infilt,'Enable','on')
    set(handles.checkbox_equalinterval_infilt,'Enable','on')
else
    set(handles.checkbox_lumped_infilt,'Value',0)
    set(handles.checkbox_lumped_infilt,'Enable','off')
    set(handles.checkbox_equalinterval_infilt,'Value',0)
    set(handles.checkbox_equalinterval_infilt,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject,handles);


% --- Executes on button press in checkbox_calibrated_Ds.
function checkbox_calibrated_Ds_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_Ds,'Enable','on')
    set(handles.checkbox_equalinterval_Ds,'Enable','on')
else
    set(handles.checkbox_lumped_Ds,'Value',0)
    set(handles.checkbox_lumped_Ds,'Enable','off')
    set(handles.checkbox_equalinterval_Ds,'Value',0)
    set(handles.checkbox_equalinterval_Ds,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_Dsmax.
function checkbox_calibrated_Dsmax_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_Dsmax,'Enable','on')
    set(handles.checkbox_equalinterval_Dsmax,'Enable','on')
else
    set(handles.checkbox_lumped_Dsmax,'Value',0)
    set(handles.checkbox_lumped_Dsmax,'Enable','off')
    set(handles.checkbox_equalinterval_Dsmax,'Value',0)
    set(handles.checkbox_equalinterval_Dsmax,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_Ws.
function checkbox_calibrated_Ws_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_Ws,'Enable','on')
    set(handles.checkbox_equalinterval_Ws,'Enable','on')
else
    set(handles.checkbox_lumped_Ws,'Value',0)
    set(handles.checkbox_lumped_Ws,'Enable','off')
    set(handles.checkbox_equalinterval_Ws,'Value',0)
    set(handles.checkbox_equalinterval_Ws,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_c.
function checkbox_calibrated_c_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_c,'Enable','on')
    set(handles.checkbox_equalinterval_c,'Enable','on')
else
    set(handles.checkbox_lumped_c,'Value',0)
    set(handles.checkbox_lumped_c,'Enable','off')
    set(handles.checkbox_equalinterval_c,'Value',0)
    set(handles.checkbox_equalinterval_c,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_depth1.
function checkbox_calibrated_depth1_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_depth1,'Enable','on')
    set(handles.checkbox_equalinterval_depth1,'Enable','on')
else
    set(handles.checkbox_lumped_depth1,'Value',0)
    set(handles.checkbox_lumped_depth1,'Enable','off')
    set(handles.checkbox_equalinterval_depth1,'Value',0)
    set(handles.checkbox_equalinterval_depth1,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_depth2.
function checkbox_calibrated_depth2_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_depth2,'Enable','on')
    set(handles.checkbox_equalinterval_depth2,'Enable','on')
else
    set(handles.checkbox_lumped_depth2,'Value',0)
    set(handles.checkbox_lumped_depth2,'Enable','off')
    set(handles.checkbox_equalinterval_depth2,'Value',0)
    set(handles.checkbox_equalinterval_depth2,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_depth3.
function checkbox_calibrated_depth3_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_depth3,'Enable','on')
    set(handles.checkbox_equalinterval_depth3,'Enable','on')
else
    set(handles.checkbox_lumped_depth3,'Value',0)
    set(handles.checkbox_lumped_depth3,'Enable','off')
    set(handles.checkbox_equalinterval_depth3,'Value',0)
    set(handles.checkbox_equalinterval_depth3,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_snowtemp.
function checkbox_calibrated_snowtemp_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_snowtemp,'Enable','inactive')
    set(handles.checkbox_equalinterval_snowtemp,'Enable','on')
else
    set(handles.checkbox_lumped_snowtemp,'Enable','off')
    set(handles.checkbox_equalinterval_snowtemp,'Value',0)
    set(handles.checkbox_equalinterval_snowtemp,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_raintemp.
function checkbox_calibrated_raintemp_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_raintemp,'Enable','inactive')
    set(handles.checkbox_equalinterval_raintemp,'Enable','on')
else
    set(handles.checkbox_lumped_raintemp,'Enable','off')
    set(handles.checkbox_equalinterval_raintemp,'Value',0)
    set(handles.checkbox_equalinterval_raintemp,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_snowrough.
function checkbox_calibrated_snowrough_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_snowrough,'Enable','on')
    set(handles.checkbox_equalinterval_snowrough,'Enable','on')
else
    set(handles.checkbox_lumped_snowrough,'Value',0)
    set(handles.checkbox_lumped_snowrough,'Enable','off')
    set(handles.checkbox_equalinterval_snowrough,'Value',0)
    set(handles.checkbox_equalinterval_snowrough,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_N.
function checkbox_calibrated_N_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_N,'Enable','on')
    set(handles.checkbox_equalinterval_N,'Enable','on')
else
    set(handles.checkbox_lumped_N,'Value',0)
    set(handles.checkbox_lumped_N,'Enable','off')
    set(handles.checkbox_equalinterval_N,'Value',0)
    set(handles.checkbox_equalinterval_N,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
   
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_K.
function checkbox_calibrated_K_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_K,'Enable','on')
    set(handles.checkbox_equalinterval_K,'Enable','on')
else
    set(handles.checkbox_lumped_K,'Value',0)
    set(handles.checkbox_lumped_K,'Enable','off')
    set(handles.checkbox_equalinterval_K,'Value',0)
    set(handles.checkbox_equalinterval_K,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_Velo.
function checkbox_calibrated_Velo_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_Velo,'Enable','on')
    set(handles.checkbox_equalinterval_Velo,'Enable','on')
else
    set(handles.checkbox_lumped_Velo,'Value',0)
    set(handles.checkbox_lumped_Velo,'Enable','off')
    set(handles.checkbox_equalinterval_Velo,'Value',0)
    set(handles.checkbox_equalinterval_Velo,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value')+ ...
    get(handles.checkbox_calibrated_Diff,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_calibrated_Diff.
function checkbox_calibrated_Diff_Callback(hObject, eventdata, handles)

if get(hObject,'Value')
    set(handles.checkbox_lumped_Diff,'Enable','on')
    set(handles.checkbox_equalinterval_Diff,'Enable','on')
else
    set(handles.checkbox_lumped_Diff,'Value',0)
    set(handles.checkbox_lumped_Diff,'Enable','off')
    set(handles.checkbox_equalinterval_Diff,'Value',0)
    set(handles.checkbox_equalinterval_Diff,'Enable','off')
end

num_calpar = get(hObject,'Value')+ ...
    get(handles.checkbox_calibrated_Ds,'Value')+ ...
    get(handles.checkbox_calibrated_Dsmax,'Value')+ ...
    get(handles.checkbox_calibrated_Ws,'Value')+ ...
    get(handles.checkbox_calibrated_c,'Value')+ ...
    get(handles.checkbox_calibrated_depth1,'Value')+ ...
    get(handles.checkbox_calibrated_depth2,'Value')+ ...
    get(handles.checkbox_calibrated_depth3,'Value')+ ...
    get(handles.checkbox_calibrated_snowtemp,'Value')+ ...
    get(handles.checkbox_calibrated_raintemp,'Value')+ ...
    get(handles.checkbox_calibrated_snowrough,'Value')+ ...
    get(handles.checkbox_calibrated_N,'Value')+ ...
    get(handles.checkbox_calibrated_K,'Value')+ ...
    get(handles.checkbox_calibrated_Velo,'Value')+ ...
    get(handles.checkbox_calibrated_infilt,'Value');
if num_calpar > 0
    handles.calready_calpar = 1;
    set(handles.uipanel_parsetup,'ForegroundColor','k')
else
    handles.calready_calpar = 0;
    set(handles.uipanel_parsetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes on button press in checkbox_lumped_infilt.
function checkbox_lumped_infilt_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_infilt (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_infilt


% --- Executes on button press in checkbox_lumped_Ds.
function checkbox_lumped_Ds_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_Ds (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_Ds


% --- Executes on button press in checkbox_lumped_Dsmax.
function checkbox_lumped_Dsmax_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_Dsmax (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_Dsmax


% --- Executes on button press in checkbox_lumped_Ws.
function checkbox_lumped_Ws_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_Ws (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_Ws


% --- Executes on button press in checkbox_lumped_c.
function checkbox_lumped_c_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_c (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_c


% --- Executes on button press in checkbox_lumped_depth1.
function checkbox_lumped_depth1_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_depth1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_depth1


% --- Executes on button press in checkbox_lumped_depth2.
function checkbox_lumped_depth2_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_depth2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_depth2


% --- Executes on button press in checkbox_lumped_depth3.
function checkbox_lumped_depth3_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_depth3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_depth3


% --- Executes on button press in checkbox_lumped_snowtemp.
function checkbox_lumped_snowtemp_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_snowtemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_snowtemp


% --- Executes on button press in checkbox_lumped_raintemp.
function checkbox_lumped_raintemp_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_raintemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_raintemp


% --- Executes on button press in checkbox_lumped_snowrough.
function checkbox_lumped_snowrough_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_snowrough (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_snowrough


% --- Executes on button press in checkbox_lumped_N.
function checkbox_lumped_N_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_N (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_N


% --- Executes on button press in checkbox_lumped_K.
function checkbox_lumped_K_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_K (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_K


% --- Executes on button press in checkbox_lumped_Velo.
function checkbox_lumped_Velo_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_Velo (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_Velo


% --- Executes on button press in checkbox_lumped_Diff.
function checkbox_lumped_Diff_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_lumped_Diff (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_lumped_Diff



function edit_lower_infilt_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_infilt (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_infilt as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_infilt as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_infilt_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_infilt (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_infilt_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_infilt (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_infilt as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_infilt as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_infilt_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_infilt (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_Ds_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_Ds (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_Ds as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_Ds as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_Ds_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_Ds (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_Dsmax_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_Dsmax (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_Dsmax as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_Dsmax as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_Dsmax_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_Dsmax (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_Ws_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_Ws (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_Ws as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_Ws as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_Ws_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_Ws (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_c_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_c (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_c as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_c as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_c_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_c (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_depth1_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_depth1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_depth1 as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_depth1 as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_depth1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_depth1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_depth2_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_depth2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_depth2 as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_depth2 as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_depth2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_depth2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_depth3_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_depth3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_depth3 as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_depth3 as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_depth3_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_depth3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_snowtemp_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_snowtemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_snowtemp as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_snowtemp as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_snowtemp_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_snowtemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_raintemp_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_raintemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_raintemp as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_raintemp as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_raintemp_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_raintemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_snowrough_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_snowrough (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_snowrough as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_snowrough as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_snowrough_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_snowrough (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_N_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_N (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_N as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_N as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_N_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_N (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_K_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_K (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_K as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_K as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_K_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_K (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_Velo_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_Velo (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_Velo as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_Velo as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_Velo_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_Velo (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_lower_Diff_Callback(hObject, eventdata, handles)
% hObject    handle to edit_lower_Diff (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_lower_Diff as text
%        str2double(get(hObject,'String')) returns contents of edit_lower_Diff as a double


% --- Executes during object creation, after setting all properties.
function edit_lower_Diff_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_lower_Diff (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_Ds_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_Ds (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_Ds as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_Ds as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_Ds_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_Ds (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_Dsmax_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_Dsmax (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_Dsmax as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_Dsmax as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_Dsmax_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_Dsmax (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_Ws_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_Ws (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_Ws as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_Ws as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_Ws_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_Ws (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_c_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_c (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_c as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_c as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_c_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_c (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_depth1_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_depth1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_depth1 as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_depth1 as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_depth1_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_depth1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_depth2_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_depth2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_depth2 as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_depth2 as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_depth2_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_depth2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_depth3_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_depth3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_depth3 as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_depth3 as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_depth3_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_depth3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_raintemp_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_raintemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_raintemp as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_raintemp as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_raintemp_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_raintemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_snowrough_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_snowrough (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_snowrough as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_snowrough as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_snowrough_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_snowrough (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_snowtemp_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_snowtemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_snowtemp as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_snowtemp as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_snowtemp_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_snowtemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_N_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_N (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_N as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_N as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_N_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_N (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_K_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_K (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_K as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_K as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_K_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_K (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_Velo_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_Velo (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_Velo as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_Velo as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_Velo_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_Velo (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_upper_Diff_Callback(hObject, eventdata, handles)
% hObject    handle to edit_upper_Diff (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_upper_Diff as text
%        str2double(get(hObject,'String')) returns contents of edit_upper_Diff as a double


% --- Executes during object creation, after setting all properties.
function edit_upper_Diff_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_upper_Diff (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end






function edit_CAL_INPUT_subflowfile_Callback(hObject, eventdata, handles)
% hObject    handle to edit_CAL_INPUT_subflowfile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_CAL_INPUT_subflowfile as text
%        str2double(get(hObject,'String')) returns contents of edit_CAL_INPUT_subflowfile as a double


% --- Executes during object creation, after setting all properties.
function edit_CAL_INPUT_subflowfile_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_CAL_INPUT_subflowfile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_CAL_INPUT_subroutfile_Callback(hObject, eventdata, handles)
% hObject    handle to edit_CAL_INPUT_subroutfile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_CAL_INPUT_subroutfile as text
%        str2double(get(hObject,'String')) returns contents of edit_CAL_INPUT_subroutfile as a double


% --- Executes during object creation, after setting all properties.
function edit_CAL_INPUT_subroutfile_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_CAL_INPUT_subroutfile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton_CAL_INPUT_subflowfile.
function pushbutton_CAL_INPUT_subflowfile_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Subbasin Flow File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.listbox_CAL_INPUT_subflowfile,'value',1)
    update_filedir = [handles.listbox_CAL_INPUT_subflowfile.String; {filedir}];
    set(handles.listbox_CAL_INPUT_subflowfile,'string',update_filedir)
    
    set(handles.listbox_CAL_INPUT_subflowfile, 'min', 0, 'max', 2);
    set(handles.listbox_CAL_INPUT_subflowfile,'Value',[]);
    
    handles.lastvisitdir = filepath;    
    
    data = load(filedir);
    colnum = size(data,2);
    s_yr = data(1,1); s_mon = data(1,2); 
    e_yr = data(end,1); e_mon = data(end,2); 
    if colnum == 4
        s_day = data(1,3);
        e_day = data(end,3);
    else
        s_day = 1;
        e_day = eomday(e_yr,e_mon);
    end
    
    row_data = cell(1,6);
    row_data(1,1) = {s_yr};
    row_data(1,2) = {s_mon};
    row_data(1,3) = {s_day};
    row_data(1,4) = {e_yr};
    row_data(1,5) = {e_mon};
    row_data(1,6) = {e_day};
    update_data = [handles.uitable_CAL_INPUT_calper.Data; row_data];
    set(handles.uitable_CAL_INPUT_calper,'data',update_data)
    
    row_data = cell(1,2);
    if colnum == 4
        row_data(1,1) = {'day'};
        row_data(1,2) = {'day'};
    elseif colnum == 3
        row_data(1,1) = {'month'};
        row_data(1,2) = {'month'};
    else
        row_data(1,1) = {'unknown'};
        row_data(1,2) = {'unknown'};
    end
    update_data = [handles.uitable_CAL_INPUT_timestep.Data; row_data];
    set(handles.uitable_CAL_INPUT_timestep,'data',update_data)
    
    update_rowname = {'OUT'};
    for i = 1:size(update_data,1)-1
        update_rowname = [update_rowname;{['sub',num2str(i)]}];
    end
    set(handles.uitable_CAL_INPUT_calper,'RowName',update_rowname)
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    anynan = 0;
    anyempty = 0;
    for i=1:m
        for j=1:n
            if isnan(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anynan= 1;
            end
            if isempty(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anyempty= 1;
            end
        end
    end
    
    if anynan || anyempty
        handles.calready_calper = 0;
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        handles.calready_calper = 1;
    end
    
    if length(handles.listbox_CAL_INPUT_subflowfile.String) == length(handles.listbox_CAL_INPUT_subroutfile.String)
        handles.calready_pooled = 1;
    else
        handles.calready_pooled = 0;
    end
    
end

if handles.calready_pooled
    set(handles.uipanel_pooledcalinput,'ForegroundColor','k')
else
    set(handles.uipanel_pooledcalinput,'ForegroundColor','r')
end

if handles.calready_simper && handles.calready_calper
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.uipanel_calpersetup,'ForegroundColor','r')
    else
        set(handles.uipanel_calpersetup,'ForegroundColor','k')
    end
    
else
    set(handles.uipanel_calpersetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject,handles);


% --- Executes on button press in pushbutton_CAL_INPUT_subflowfile_add.
function pushbutton_CAL_INPUT_subflowfile_add_Callback(hObject, eventdata, handles)
filedir = handles.edit_CAL_INPUT_subflowfile.String;
if exist(filedir,'file') == 2
    set(handles.listbox_CAL_INPUT_subflowfile,'value',1)
    update_filedir = [handles.listbox_CAL_INPUT_subflowfile.String; {handles.edit_CAL_INPUT_subflowfile.String}];
    set(handles.listbox_CAL_INPUT_subflowfile,'string',update_filedir)
    set(handles.edit_CAL_INPUT_subflowfile,'string',[])
    
    set(handles.listbox_CAL_INPUT_subflowfile, 'min', 0, 'max', 2);
    set(handles.listbox_CAL_INPUT_subflowfile,'Value',[]);
    
    
    data = load(filedir);
    colnum = size(data,2);
    s_yr = data(1,1); s_mon = data(1,2); 
    e_yr = data(end,1); e_mon = data(end,2); 
    if colnum == 4
        s_day = data(1,3);
        e_day = data(end,3);
    else
        s_day = 1;
        e_day = eomday(e_yr,e_mon);
    end
    
    row_data = cell(1,6);
    row_data(1,1) = {s_yr};
    row_data(1,2) = {s_mon};
    row_data(1,3) = {s_day};
    row_data(1,4) = {e_yr};
    row_data(1,5) = {e_mon};
    row_data(1,6) = {e_day};
    update_data = [handles.uitable_CAL_INPUT_calper.Data; row_data];
    set(handles.uitable_CAL_INPUT_calper,'data',update_data)
    
    row_data = cell(1,2);
    if colnum == 4
        row_data(1,1) = {'day'};
        row_data(1,2) = {'day'};
    elseif colnum == 3
        row_data(1,1) = {'month'};
        row_data(1,2) = {'month'};
    else
        row_data(1,1) = {'unknown'};
        row_data(1,2) = {'unknown'};
    end
    update_data = [handles.uitable_CAL_INPUT_timestep.Data; row_data];
    set(handles.uitable_CAL_INPUT_timestep,'data',update_data)
    
    update_rowname = {'OUT'};
    for i = 1:size(update_data,1)-1
        update_rowname = [update_rowname;{['sub',num2str(i)]}];
    end
    set(handles.uitable_CAL_INPUT_calper,'RowName',update_rowname)
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    anynan = 0;
    anyempty = 0;
    for i=1:m
        for j=1:n
            if isnan(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anynan= 1;
            end
            if isempty(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anyempty= 1;
            end
        end
    end
    
    if anynan || anyempty
        handles.calready_calper = 0;
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        handles.calready_calper = 1;
    end
    
    if length(handles.listbox_CAL_INPUT_subflowfile.String) == length(handles.listbox_CAL_INPUT_subroutfile.String)
        handles.calready_pooled = 1;
    else
        handles.calready_pooled = 0;
    end
    
else
    set(handles.edit_CAL_INPUT_subflowfile,'string',[])
end

if handles.calready_pooled
    set(handles.uipanel_pooledcalinput,'ForegroundColor','k')
else
    set(handles.uipanel_pooledcalinput,'ForegroundColor','r')
end

if handles.calready_simper && handles.calready_calper
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.uipanel_calpersetup,'ForegroundColor','r')
    else
        set(handles.uipanel_calpersetup,'ForegroundColor','k')
    end
    
else
    set(handles.uipanel_calpersetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject,handles);


% --- Executes on button press in pushbutton_CAL_INPUT_subflowfile_remove.
function pushbutton_CAL_INPUT_subflowfile_remove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_CAL_INPUT_subflowfile.Value)
    selind = handles.listbox_CAL_INPUT_subflowfile.Value;
    newstring = handles.listbox_CAL_INPUT_subflowfile.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_CAL_INPUT_subflowfile.String)
        if selind-1 == 0
            set(handles.listbox_CAL_INPUT_subflowfile,'value',[])
        else
            set(handles.listbox_CAL_INPUT_subflowfile,'value',selind-1)
        end
    end
    set(handles.listbox_CAL_INPUT_subflowfile,'string',newstring)
    
    set(handles.listbox_CAL_INPUT_subflowfile, 'min', 0, 'max', 2);
    set(handles.listbox_CAL_INPUT_subflowfile,'Value',[]);
    
    newdata = handles.uitable_CAL_INPUT_calper.Data;
    newdata(selind+1,:) = [];
    set(handles.uitable_CAL_INPUT_calper,'Data',newdata)
    
    newdata = handles.uitable_CAL_INPUT_timestep.Data;
    newdata(selind+1,:) = [];
    set(handles.uitable_CAL_INPUT_timestep,'Data',newdata)
    
    update_rowname = {'OUT'};
    for i = 1:size(newdata,1)-1
        update_rowname = [update_rowname;{['sub',num2str(i)]}];
    end
    set(handles.uitable_CAL_INPUT_calper,'RowName',update_rowname)
    
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    anynan = 0;
    anyempty = 0;
    for i=1:m
        for j=1:n
            if isnan(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anynan= 1;
            end
            if isempty(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anyempty= 1;
            end
        end
    end
    
    if anynan || anyempty
        handles.calready_calper = 0;
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        handles.calready_calper = 1;
    end
    
    if length(handles.listbox_CAL_INPUT_subflowfile.String) == length(handles.listbox_CAL_INPUT_subroutfile.String)
        handles.calready_pooled = 1;
    else
        handles.calready_pooled = 0;
    end
end

if handles.calready_pooled
    set(handles.uipanel_pooledcalinput,'ForegroundColor','k')
else
    set(handles.uipanel_pooledcalinput,'ForegroundColor','r')
end

if handles.calready_simper && handles.calready_calper
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.uipanel_calpersetup,'ForegroundColor','r')
    else
        set(handles.uipanel_calpersetup,'ForegroundColor','k')
    end
    
else
    set(handles.uipanel_calpersetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject,handles);


% --- Executes on button press in pushbutton_CAL_INPUT_subroutfile.
function pushbutton_CAL_INPUT_subroutfile_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Subbasin Flow File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.listbox_CAL_INPUT_subroutfile,'value',1)
    update_filedir = [handles.listbox_CAL_INPUT_subroutfile.String; {filedir}];
    set(handles.listbox_CAL_INPUT_subroutfile,'string',update_filedir)
    
    set(handles.listbox_CAL_INPUT_subroutfile, 'min', 0, 'max', 2);
    set(handles.listbox_CAL_INPUT_subroutfile,'Value',[]);
    
    handles.lastvisitdir = filepath;
    
    if length(handles.listbox_CAL_INPUT_subflowfile.String) == length(handles.listbox_CAL_INPUT_subroutfile.String)
        handles.calready_pooled = 1;
    else
        handles.calready_pooled = 0;
    end
end

if handles.calready_pooled
    set(handles.uipanel_pooledcalinput,'ForegroundColor','k')
else
    set(handles.uipanel_pooledcalinput,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject,handles);


% --- Executes on button press in pushbutton_CAL_INPUT_subroutfile_add.
function pushbutton_CAL_INPUT_subroutfile_add_Callback(hObject, eventdata, handles)
filedir = handles.edit_CAL_INPUT_subroutfile.String;
if exist(filedir,'file') == 2
    set(handles.listbox_CAL_INPUT_subroutfile,'value',1)
    update_filedir = [handles.listbox_CAL_INPUT_subroutfile.String; {handles.edit_CAL_INPUT_subroutfile.String}];
    set(handles.listbox_CAL_INPUT_subroutfile,'string',update_filedir)
    set(handles.edit_CAL_INPUT_subroutfile,'string',[])
    
    set(handles.listbox_CAL_INPUT_subroutfile, 'min', 0, 'max', 2);
    set(handles.listbox_CAL_INPUT_subroutfile,'Value',[]);
    
    if length(handles.listbox_CAL_INPUT_subflowfile.String) == length(handles.listbox_CAL_INPUT_subroutfile.String)
        handles.calready_pooled = 1;
    else
        handles.calready_pooled = 0;
    end
else
    set(handles.edit_CAL_INPUT_subroutfile,'string',[])
end

if handles.calready_pooled
    set(handles.uipanel_pooledcalinput,'ForegroundColor','k')
else
    set(handles.uipanel_pooledcalinput,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject,handles);


% --- Executes on button press in pushbutton_CAL_INPUT_subroutfile_remove.
function pushbutton_CAL_INPUT_subroutfile_remove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_CAL_INPUT_subroutfile.Value)
    selind = handles.listbox_CAL_INPUT_subroutfile.Value;
    newstring = handles.listbox_CAL_INPUT_subroutfile.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_CAL_INPUT_subroutfile.String)
        if selind-1 == 0
            set(handles.listbox_CAL_INPUT_subroutfile,'value',[])
        else
            set(handles.listbox_CAL_INPUT_subroutfile,'value',selind-1)
        end
    end
    set(handles.listbox_CAL_INPUT_subroutfile,'string',newstring)
    
    set(handles.listbox_CAL_INPUT_subroutfile, 'min', 0, 'max', 2);
    set(handles.listbox_CAL_INPUT_subroutfile,'Value',[]);
    
    if length(handles.listbox_CAL_INPUT_subflowfile.String) == length(handles.listbox_CAL_INPUT_subroutfile.String)
        handles.calready_pooled = 1;
    else
        handles.calready_pooled = 0;
    end
end

if handles.calready_pooled
    set(handles.uipanel_pooledcalinput,'ForegroundColor','k')
else
    set(handles.uipanel_pooledcalinput,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject,handles);


% --- Executes on selection change in listbox_CAL_INPUT_subflowfile.
function listbox_CAL_INPUT_subflowfile_Callback(hObject, eventdata, handles)
% hObject    handle to listbox_CAL_INPUT_subflowfile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns listbox_CAL_INPUT_subflowfile contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox_CAL_INPUT_subflowfile


% --- Executes during object creation, after setting all properties.
function listbox_CAL_INPUT_subflowfile_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox_CAL_INPUT_subflowfile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in listbox_CAL_INPUT_subroutfile.
function listbox_CAL_INPUT_subroutfile_Callback(hObject, eventdata, handles)
% hObject    handle to listbox_CAL_INPUT_subroutfile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns listbox_CAL_INPUT_subroutfile contents as cell array
%        contents{get(hObject,'Value')} returns selected item from listbox_CAL_INPUT_subroutfile


% --- Executes during object creation, after setting all properties.
function listbox_CAL_INPUT_subroutfile_CreateFcn(hObject, eventdata, handles)
% hObject    handle to listbox_CAL_INPUT_subroutfile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: listbox controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end



function edit_CAL_INPUT_outflowfile_Callback(hObject, eventdata, handles)
handles.calready_flowobs = 0;
handles.calready_calper = 0;

row_data = cell(1,6);
update_data = handles.uitable_CAL_INPUT_calper.Data;
update_data(1,:) = row_data(1,:);
set(handles.uitable_CAL_INPUT_calper,'data',update_data)

row_data = cell(1,2);
update_data = handles.uitable_CAL_INPUT_timestep.Data;
update_data(1,:) = row_data(1,:);
set(handles.uitable_CAL_INPUT_timestep,'data',update_data)

filedir = handles.edit_CAL_INPUT_outflowfile.String;
if exist(filedir,'file') == 2
    set(handles.edit_CAL_INPUT_outflowfile,'string',filedir)
    
    data = load(filedir);
    colnum = size(data,2);
    s_yr = data(1,1); s_mon = data(1,2); 
    e_yr = data(end,1); e_mon = data(end,2); 
    
    if colnum == 4
        s_day = data(1,3);
        e_day = data(end,3);
    else
        s_day = 1;
        e_day = eomday(e_yr,e_mon);
    end
    
    row_data = cell(1,6);
    row_data(1,1) = {s_yr};
    row_data(1,2) = {s_mon};
    row_data(1,3) = {s_day};
    row_data(1,4) = {e_yr};
    row_data(1,5) = {e_mon};
    row_data(1,6) = {e_day};
    update_data = handles.uitable_CAL_INPUT_calper.Data;
    update_data(1,:) = row_data(1,:);
    set(handles.uitable_CAL_INPUT_calper,'data',update_data)
    
    row_data = cell(1,2);
    if colnum == 4
        row_data(1,1) = {'day'};
        row_data(1,2) = {'day'};
    elseif colnum == 3
        row_data(1,1) = {'month'};
        row_data(1,2) = {'month'};
    else
        row_data(1,1) = {'unknown'};
        row_data(1,2) = {'unknown'};
    end
    update_data = handles.uitable_CAL_INPUT_timestep.Data;
    update_data(1,:) = row_data(1,:);
    set(handles.uitable_CAL_INPUT_timestep,'data',update_data)
    
    update_rowname = {'OUT'};
    for i = 1:size(update_data,1)-1
        update_rowname = [update_rowname;{['sub',num2str(i)]}];
    end
    set(handles.uitable_CAL_INPUT_calper,'RowName',update_rowname)
    
    handles.calready_flowobs = 1;
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    anynan = 0;
    anyempty = 0;
    for i=1:m
        for j=1:n
            if isnan(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anynan= 1;
            end
            if isempty(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anyempty= 1;
            end
        end
    end
    
    if anynan || anyempty
        handles.calready_calper = 0;
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        handles.calready_calper = 1;
    end
    
else    
    set(handles.edit_CAL_INPUT_outflowfile,'string',[])
end

if handles.calready_flowobs
    set(handles.text_OutletFlowFile,'ForegroundColor','k')
else
    set(handles.text_OutletFlowFile,'ForegroundColor','r')
end

if handles.calready_simper && handles.calready_calper
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.uipanel_calpersetup,'ForegroundColor','r')
    else
        set(handles.uipanel_calpersetup,'ForegroundColor','k')
    end
    
else
    set(handles.uipanel_calpersetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end

guidata(hObject,handles);

% --- Executes during object creation, after setting all properties.
function edit_CAL_INPUT_outflowfile_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_CAL_INPUT_outflowfile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton_CAL_INPUT_outflowfile.
function pushbutton_CAL_INPUT_outflowfile_Callback(hObject, eventdata, handles)
handles.calready_flowobs = 0;
handles.calready_calper = 0;

row_data = cell(1,6);
update_data = handles.uitable_CAL_INPUT_calper.Data;
update_data(1,:) = row_data(1,:);
set(handles.uitable_CAL_INPUT_calper,'data',update_data)

row_data = cell(1,2);
update_data = handles.uitable_CAL_INPUT_timestep.Data;
update_data(1,:) = row_data(1,:);
set(handles.uitable_CAL_INPUT_timestep,'data',update_data)

[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Outlet Flow File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_CAL_INPUT_outflowfile,'string',filedir)
    
    handles.lastvisitdir = filepath;
    
    data = load(filedir);
    colnum = size(data,2);
    s_yr = data(1,1); s_mon = data(1,2); 
    e_yr = data(end,1); e_mon = data(end,2); 
    
    if colnum == 4
        s_day = data(1,3);
        e_day = data(end,3);
    else
        s_day = 1;
        e_day = eomday(e_yr,e_mon);
    end
    
    
    row_data(1,1) = {s_yr};
    row_data(1,2) = {s_mon};
    row_data(1,3) = {s_day};
    row_data(1,4) = {e_yr};
    row_data(1,5) = {e_mon};
    row_data(1,6) = {e_day};
    update_data = handles.uitable_CAL_INPUT_calper.Data;
    update_data(1,:) = row_data(1,:);
    set(handles.uitable_CAL_INPUT_calper,'data',update_data)
    
    row_data = cell(1,2);
    if colnum == 4
        row_data(1,1) = {'day'};
        row_data(1,2) = {'day'};
    elseif colnum == 3
        row_data(1,1) = {'month'};
        row_data(1,2) = {'month'};
    else
        row_data(1,1) = {'unknown'};
        row_data(1,2) = {'unknown'};
    end
    update_data = handles.uitable_CAL_INPUT_timestep.Data;
    update_data(1,:) = row_data(1,:);
    set(handles.uitable_CAL_INPUT_timestep,'data',update_data)
    
    update_rowname = {'OUT'};
    for i = 1:size(update_data,1)-1
        update_rowname = [update_rowname;{['sub',num2str(i)]}];
    end
    set(handles.uitable_CAL_INPUT_calper,'RowName',update_rowname)
    
    handles.calready_flowobs = 1;
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    anynan = 0;
    anyempty = 0;
    for i=1:m
        for j=1:n
            if isnan(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anynan= 1;
            end
            if isempty(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anyempty= 1;
            end
        end
    end
    
    if anynan || anyempty
        handles.calready_calper = 0;
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        handles.calready_calper = 1;
    end
    
elseif exist(handles.edit_CAL_INPUT_outflowfile.String,'file') == 2
    data = load(handles.edit_CAL_INPUT_outflowfile.String);
    colnum = size(data,2);
    s_yr = data(1,1); s_mon = data(1,2); 
    e_yr = data(end,1); e_mon = data(end,2); 
    
    if colnum == 4
        s_day = data(1,3);
        e_day = data(end,3);
    else
        s_day = 1;
        e_day = eomday(e_yr,e_mon);
    end
    
    
    row_data(1,1) = {s_yr};
    row_data(1,2) = {s_mon};
    row_data(1,3) = {s_day};
    row_data(1,4) = {e_yr};
    row_data(1,5) = {e_mon};
    row_data(1,6) = {e_day};
    update_data = handles.uitable_CAL_INPUT_calper.Data;
    update_data(1,:) = row_data(1,:);
    set(handles.uitable_CAL_INPUT_calper,'data',update_data)
    
    row_data = cell(1,2);
    if colnum == 4
        row_data(1,1) = {'day'};
        row_data(1,2) = {'day'};
    elseif colnum == 3
        row_data(1,1) = {'month'};
        row_data(1,2) = {'month'};
    else
        row_data(1,1) = {'unknown'};
        row_data(1,2) = {'unknown'};
    end
    update_data = handles.uitable_CAL_INPUT_timestep.Data;
    update_data(1,:) = row_data(1,:);
    set(handles.uitable_CAL_INPUT_timestep,'data',update_data)
    
    update_rowname = {'OUT'};
    for i = 1:size(update_data,1)-1
        update_rowname = [update_rowname;{['sub',num2str(i)]}];
    end
    set(handles.uitable_CAL_INPUT_calper,'RowName',update_rowname)
    
    handles.calready_flowobs = 1;
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    anynan = 0;
    anyempty = 0;
    for i=1:m
        for j=1:n
            if isnan(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anynan= 1;
            end
            if isempty(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anyempty= 1;
            end
        end
    end
    
    if anynan || anyempty
        handles.calready_calper = 0;
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        handles.calready_calper = 1;
    end
end

if handles.calready_flowobs
    set(handles.text_OutletFlowFile,'ForegroundColor','k')
else
    set(handles.text_OutletFlowFile,'ForegroundColor','r')
end

if handles.calready_simper && handles.calready_calper
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.uipanel_calpersetup,'ForegroundColor','r')
    else
        set(handles.uipanel_calpersetup,'ForegroundColor','k')
    end
    
else
    set(handles.uipanel_calpersetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end

guidata(hObject,handles);



function edit_CAL_INPUT_globalfile_Callback(hObject, eventdata, handles)
handles.calready_globalfile = 0;
handles.calready_simper= 0;
set(handles.text_CAL_INPUT_simsyr,'String',[])
set(handles.text_CAL_INPUT_simsmon,'String',[])
set(handles.text_CAL_INPUT_simsday,'String',[])
set(handles.text_CAL_INPUT_simeyr,'String',[])
set(handles.text_CAL_INPUT_simemon,'String',[])
set(handles.text_CAL_INPUT_simeday,'String',[])

filedir = strtrim(get(hObject,'String'));
if exist(filedir,'file') == 2
    set(handles.edit_CAL_INPUT_globalfile,'string',filedir)
    s_yr=[];s_mon=[];s_day=[];e_yr=[];e_mon=[];e_day=[];
    
    fileID = fopen(filedir,'r');
    while ~feof(fileID)
        paraminfo = fgets(fileID);
        comment_char = strfind(paraminfo,'#');
        if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
        
        if ~isempty(paraminfo)
            linecontent = textscan(paraminfo,'%s');
            if ~isempty(linecontent{1})
                if strcmp(linecontent{1}{1},'STARTYEAR')
                    s_yr = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'STARTMONTH')
                    s_mon = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'STARTDAY')
                    s_day = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDYEAR')
                    e_yr = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDMONTH')
                    e_mon = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDDAY')
                    e_day = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'BASEFLOW')
                    handles.baseflow_model = linecontent{1}{2};
                end
            end
            
        end
    end
    fclose(fileID);
    
    handles.calready_globalfile = 1;
    
    set(handles.text_CAL_INPUT_simsyr,'String',s_yr)
    set(handles.text_CAL_INPUT_simsmon,'String',s_mon)
    set(handles.text_CAL_INPUT_simsday,'String',s_day)
    set(handles.text_CAL_INPUT_simeyr,'String',e_yr)
    set(handles.text_CAL_INPUT_simemon,'String',e_mon)
    set(handles.text_CAL_INPUT_simeday,'String',e_day)
    if ~isnan(str2double(s_yr)) && ~isnan(str2double(s_mon)) && ~isnan(str2double(s_day)) && ...
            ~isnan(str2double(e_yr)) && ~isnan(str2double(e_mon)) && ~isnan(str2double(e_day))
        handles.calready_simper= 1;
    end
    
    if strcmp(handles.baseflow_model,'NIJSSEN2001')
        set(handles.edit_lower_Ds,'string','0.00001')
        set(handles.edit_upper_Ds,'string','0.9')
        set(handles.edit_lower_Dsmax,'string','0.00001')
        set(handles.edit_upper_Dsmax,'string','0.9')
        set(handles.edit_lower_Ws,'string','10')
        set(handles.edit_upper_Ws,'string','990')
        set(handles.edit_lower_c,'string','1.0')
        set(handles.edit_upper_c,'string','3.0')
    elseif strcmp(handles.baseflow_model,'ARNO')
        set(handles.edit_lower_Ds,'string','0.00001')
        set(handles.edit_upper_Ds,'string','0.9')
        set(handles.edit_lower_Dsmax,'string','0.0')
        set(handles.edit_upper_Dsmax,'string','30.0')
        set(handles.edit_lower_Ws,'string','0.1')
        set(handles.edit_upper_Ws,'string','0.99')
        set(handles.edit_lower_c,'string','1.0')
        set(handles.edit_upper_c,'string','3.0')
    end

else
   set(handles.edit_CAL_INPUT_globalfile,'string',[]) 
end

if handles.calready_globalfile
    set(handles.text_GlobalConfigFile,'ForegroundColor','k')
else
    set(handles.text_GlobalConfigFile,'ForegroundColor','r')
end

if handles.calready_simper && handles.calready_calper
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.uipanel_calpersetup,'ForegroundColor','r')
    else
        set(handles.uipanel_calpersetup,'ForegroundColor','k')
    end
    
else
    set(handles.uipanel_calpersetup,'ForegroundColor','r')
end


if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end

guidata(hObject, handles);


% --- Executes during object creation, after setting all properties.
function edit_CAL_INPUT_globalfile_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_CAL_INPUT_globalfile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton_CAL_INPUT_globalfile.
function pushbutton_CAL_INPUT_globalfile_Callback(hObject, eventdata, handles)
handles.calready_globalfile = 0;
handles.calready_simper= 0;
set(handles.text_CAL_INPUT_simsyr,'String',[])
set(handles.text_CAL_INPUT_simsmon,'String',[])
set(handles.text_CAL_INPUT_simsday,'String',[])
set(handles.text_CAL_INPUT_simeyr,'String',[])
set(handles.text_CAL_INPUT_simemon,'String',[])
set(handles.text_CAL_INPUT_simeday,'String',[])

[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'VIC Global Config File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.edit_CAL_INPUT_globalfile,'string',filedir)
    s_yr=[];s_mon=[];s_day=[];e_yr=[];e_mon=[];e_day=[];
    
    handles.lastvisitdir = filepath;
    
    fileID = fopen(filedir,'r');
    while ~feof(fileID)
        paraminfo = fgets(fileID);
        comment_char = strfind(paraminfo,'#');
        if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
        
        if ~isempty(paraminfo)
            linecontent = textscan(paraminfo,'%s');
            if ~isempty(linecontent{1})
                if strcmp(linecontent{1}{1},'STARTYEAR')
                    s_yr = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'STARTMONTH')
                    s_mon = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'STARTDAY')
                    s_day = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDYEAR')
                    e_yr = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDMONTH')
                    e_mon = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDDAY')
                    e_day = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'BASEFLOW')
                    handles.baseflow_model = linecontent{1}{2};
                end
            end
            
        end
    end
    fclose(fileID);
    
    handles.calready_globalfile = 1;
    
    set(handles.text_CAL_INPUT_simsyr,'String',s_yr)
    set(handles.text_CAL_INPUT_simsmon,'String',s_mon)
    set(handles.text_CAL_INPUT_simsday,'String',s_day)
    set(handles.text_CAL_INPUT_simeyr,'String',e_yr)
    set(handles.text_CAL_INPUT_simemon,'String',e_mon)
    set(handles.text_CAL_INPUT_simeday,'String',e_day)
    
    if ~isnan(str2double(s_yr)) && ~isnan(str2double(s_mon)) && ~isnan(str2double(s_day)) && ...
            ~isnan(str2double(e_yr)) && ~isnan(str2double(e_mon)) && ~isnan(str2double(e_day))
        handles.calready_simper= 1;
    end
    
    if strcmp(handles.baseflow_model,'NIJSSEN2001')
        set(handles.edit_lower_Ds,'string','0.00001')
        set(handles.edit_upper_Ds,'string','0.9')
        set(handles.edit_lower_Dsmax,'string','0.00001')
        set(handles.edit_upper_Dsmax,'string','0.9')
        set(handles.edit_lower_Ws,'string','10')
        set(handles.edit_upper_Ws,'string','990')
        set(handles.edit_lower_c,'string','1.0')
        set(handles.edit_upper_c,'string','3.0')
    elseif strcmp(handles.baseflow_model,'ARNO')
        set(handles.edit_lower_Ds,'string','0.00001')
        set(handles.edit_upper_Ds,'string','0.9')
        set(handles.edit_lower_Dsmax,'string','0.0')
        set(handles.edit_upper_Dsmax,'string','30.0')
        set(handles.edit_lower_Ws,'string','0.1')
        set(handles.edit_upper_Ws,'string','0.99')
        set(handles.edit_lower_c,'string','1.0')
        set(handles.edit_upper_c,'string','3.0')
    end
    
elseif exist(handles.edit_CAL_INPUT_globalfile.String,'file') == 2

    s_yr=[];s_mon=[];s_day=[];e_yr=[];e_mon=[];e_day=[];
    
    fileID = fopen(handles.edit_CAL_INPUT_globalfile.String,'r');
    while ~feof(fileID)
        paraminfo = fgets(fileID);
        comment_char = strfind(paraminfo,'#');
        if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
        
        if ~isempty(paraminfo)
            linecontent = textscan(paraminfo,'%s');
            if ~isempty(linecontent{1})
                if strcmp(linecontent{1}{1},'STARTYEAR')
                    s_yr = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'STARTMONTH')
                    s_mon = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'STARTDAY')
                    s_day = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDYEAR')
                    e_yr = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDMONTH')
                    e_mon = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ENDDAY')
                    e_day = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'BASEFLOW')
                    handles.baseflow_model = linecontent{1}{2};    
                end
            end
            
        end
    end
    fclose(fileID);
    
    handles.calready_globalfile = 1;
    
    set(handles.text_CAL_INPUT_simsyr,'String',s_yr)
    set(handles.text_CAL_INPUT_simsmon,'String',s_mon)
    set(handles.text_CAL_INPUT_simsday,'String',s_day)
    set(handles.text_CAL_INPUT_simeyr,'String',e_yr)
    set(handles.text_CAL_INPUT_simemon,'String',e_mon)
    set(handles.text_CAL_INPUT_simeday,'String',e_day)
    
    if ~isnan(str2double(s_yr)) && ~isnan(str2double(s_mon)) && ~isnan(str2double(s_day)) && ...
            ~isnan(str2double(e_yr)) && ~isnan(str2double(e_mon)) && ~isnan(str2double(e_day)) 
        handles.calready_simper= 1;
    end
    
    
    if strcmp(handles.baseflow_model,'NIJSSEN2001')
        set(handles.edit_lower_Ds,'string','0.00001')
        set(handles.edit_upper_Ds,'string','0.9')
        set(handles.edit_lower_Dsmax,'string','0.00001')
        set(handles.edit_upper_Dsmax,'string','0.9')
        set(handles.edit_lower_Ws,'string','10')
        set(handles.edit_upper_Ws,'string','990')
        set(handles.edit_lower_c,'string','1.0')
        set(handles.edit_upper_c,'string','3.0')
    elseif strcmp(handles.baseflow_model,'ARNO')
        set(handles.edit_lower_Ds,'string','0.00001')
        set(handles.edit_upper_Ds,'string','0.9')
        set(handles.edit_lower_Dsmax,'string','0.0')
        set(handles.edit_upper_Dsmax,'string','30.0')
        set(handles.edit_lower_Ws,'string','0.1')
        set(handles.edit_upper_Ws,'string','0.99')
        set(handles.edit_lower_c,'string','1.0')
        set(handles.edit_upper_c,'string','3.0')
    end
    
end

if handles.calready_globalfile
    set(handles.text_GlobalConfigFile,'ForegroundColor','k')
else
    set(handles.text_GlobalConfigFile,'ForegroundColor','r')
end

if handles.calready_simper && handles.calready_calper
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.uipanel_calpersetup,'ForegroundColor','r')
    else
        set(handles.uipanel_calpersetup,'ForegroundColor','k')
    end
    
else
    set(handles.uipanel_calpersetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
       
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end

guidata(hObject, handles);



function edit_vicgastofile_Callback(hObject, eventdata, handles)
handles.calready_vicgastorage = 0;
filedir = strtrim(get(hObject,'String'));
if exist(filedir,'dir') == 7
    set(handles.edit_vicgastofile,'string',filedir)
    handles.calready_vicgastorage = 1;
else
    set(handles.edit_vicgastofile,'string',[])
end

if handles.calready_vicgastorage
    set(handles.text_WorkingDirectory,'ForegroundColor','k')
else
    set(handles.text_WorkingDirectory,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject,handles);

% --- Executes during object creation, after setting all properties.
function edit_vicgastofile_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_vicgastofile (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton_vicgastofile.
function pushbutton_vicgastofile_Callback(hObject, eventdata, handles)
handles.calready_vicgastorage = 0;
filedir = uigetdir(handles.lastvisitdir,'VIC GA Working Directory');
if ischar(filedir)
    set(handles.edit_vicgastofile,'string',filedir)
    handles.calready_vicgastorage = 1;
    handles.lastvisitdir = filedir;
elseif exist(handles.edit_vicgastofile.String,'dir') == 7
    handles.calready_vicgastorage = 1;
end

if handles.calready_vicgastorage
    set(handles.text_WorkingDirectory,'ForegroundColor','k')
else
    set(handles.text_WorkingDirectory,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject,handles);


% --- Executes on button press in radiobutton_CAL_INPUT_poolcaloption.
function radiobutton_CAL_INPUT_poolcaloption_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.uipanel_pooledcalinput,'Foregroundcolor','k')
    set(handles.text_CAL_INPUT_subflowfile,'enable','on')
    set(handles.edit_CAL_INPUT_subflowfile,'enable','on')
    set(handles.pushbutton_CAL_INPUT_subflowfile,'enable','on')
    set(handles.pushbutton_CAL_INPUT_subflowfile_add,'enable','on')
    set(handles.pushbutton_CAL_INPUT_subflowfile_remove,'enable','on')
    set(handles.listbox_CAL_INPUT_subflowfile,'enable','on')
    
    set(handles.text_CAL_INPUT_subroutfile,'enable','on')
    set(handles.edit_CAL_INPUT_subroutfile,'enable','on')
    set(handles.pushbutton_CAL_INPUT_subroutfile,'enable','on')
    set(handles.pushbutton_CAL_INPUT_subroutfile_add,'enable','on')
    set(handles.pushbutton_CAL_INPUT_subroutfile_remove,'enable','on')
    set(handles.listbox_CAL_INPUT_subroutfile,'enable','on')
    
    set(handles.axes_ga_status_subbasin,'xcolor','k','ycolor','k')
else
    set(handles.uipanel_pooledcalinput,'Foregroundcolor',[0.65,0.65,0.65])
    set(handles.text_CAL_INPUT_subflowfile,'enable','off')
    set(handles.edit_CAL_INPUT_subflowfile,'enable','off')
    set(handles.pushbutton_CAL_INPUT_subflowfile,'enable','off')
    set(handles.pushbutton_CAL_INPUT_subflowfile_add,'enable','off')
    set(handles.pushbutton_CAL_INPUT_subflowfile_remove,'enable','off')
    set(handles.listbox_CAL_INPUT_subflowfile,'enable','off')
    
    set(handles.text_CAL_INPUT_subroutfile,'enable','off')
    set(handles.edit_CAL_INPUT_subroutfile,'enable','off')
    set(handles.pushbutton_CAL_INPUT_subroutfile,'enable','off')
    set(handles.pushbutton_CAL_INPUT_subroutfile_add,'enable','off')
    set(handles.pushbutton_CAL_INPUT_subroutfile_remove,'enable','off')
    set(handles.listbox_CAL_INPUT_subroutfile,'enable','off')
    
    set(handles.axes_ga_status_subbasin,'xcolor',[0.65 0.65 0.65],'ycolor',[0.65 0.65 0.65])
    
    
    set(handles.listbox_CAL_INPUT_subflowfile,'String',[])
    set(handles.listbox_CAL_INPUT_subflowfile, 'min', 0, 'max', 2);
    set(handles.listbox_CAL_INPUT_subflowfile,'Value',[]);
    
    set(handles.listbox_CAL_INPUT_subroutfile,'String',[])
    set(handles.listbox_CAL_INPUT_subroutfile, 'min', 0, 'max', 2);
    set(handles.listbox_CAL_INPUT_subroutfile,'Value',[]);
    
    newdata = handles.uitable_CAL_INPUT_calper.Data;
    set(handles.uitable_CAL_INPUT_calper,'Data',newdata(1,1:6))
    
    newdata = handles.uitable_CAL_INPUT_timestep.Data;
    set(handles.uitable_CAL_INPUT_timestep,'Data',newdata(1,1:2))
    
    set(handles.uitable_CAL_INPUT_calper,'RowName','OUT')
    
   
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    anynan = 0;
    anyempty = 0;
    for i=1:m
        for j=1:n
            if isnan(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anynan= 1;
            end
            if isempty(handles.uitable_CAL_INPUT_calper.Data{i,j})
                anyempty= 1;
            end
        end
    end
    
    if anynan || anyempty
        handles.calready_calper = 0;
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
            str2double(handles.text_CAL_INPUT_simsmon.String),...
            str2double(handles.text_CAL_INPUT_simsday.String));
        enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
            str2double(handles.text_CAL_INPUT_simemon.String),...
            str2double(handles.text_CAL_INPUT_simeday.String));
        
        if ~isnan(strdatenum_sim) && ~isnan(enddatenum_sim)
            [m,~] = size(handles.uitable_CAL_INPUT_calper.Data);
            notvalidcalper = zeros(m,1);
            for i=1:m
                
                strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
                    handles.uitable_CAL_INPUT_calper.Data{i,2},...
                    handles.uitable_CAL_INPUT_calper.Data{i,3});
                enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
                    handles.uitable_CAL_INPUT_calper.Data{i,5},...
                    handles.uitable_CAL_INPUT_calper.Data{i,6});
                if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
                    notvalidcalper(m)=1;
                end
                
            end
            if any(notvalidcalper)
                set(handles.uipanel_calpersetup,'ForegroundColor','r')
            else
                set(handles.uipanel_calpersetup,'ForegroundColor','k')
                handles.calready_calper = 1;
            end
        end
        
    end
    
    handles.calready_pooled = 1;
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
       
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject,handles);


% --- Executes when entered data in editable cell(s) in uitable_CAL_INPUT_calper.
function uitable_CAL_INPUT_calper_CellEditCallback(hObject, eventdata, handles)

[m,n] = size(handles.uitable_CAL_INPUT_calper.Data);

for i = 1:m
    if handles.uitable_CAL_INPUT_calper.Data{m,2}>12
        handles.uitable_CAL_INPUT_calper.Data{m,2} = 12;
    end
    if handles.uitable_CAL_INPUT_calper.Data{m,5}>12
        handles.uitable_CAL_INPUT_calper.Data{m,5} = 12;
    end
    if handles.uitable_CAL_INPUT_calper.Data{m,3}>eomday(handles.uitable_CAL_INPUT_calper.Data{m,1},handles.uitable_CAL_INPUT_calper.Data{m,2})
        handles.uitable_CAL_INPUT_calper.Data{m,3} = eomday(handles.uitable_CAL_INPUT_calper.Data{m,1},handles.uitable_CAL_INPUT_calper.Data{m,2});
    end
    if handles.uitable_CAL_INPUT_calper.Data{m,6}>eomday(handles.uitable_CAL_INPUT_calper.Data{m,4},handles.uitable_CAL_INPUT_calper.Data{m,5})
        handles.uitable_CAL_INPUT_calper.Data{m,6} = eomday(handles.uitable_CAL_INPUT_calper.Data{m,4},handles.uitable_CAL_INPUT_calper.Data{m,5});
    end
    
    if strcmp(handles.uitable_CAL_INPUT_timestep.Data{m,1},'month')
        if handles.uitable_CAL_INPUT_calper.Data{m,3} ~= 1
            handles.uitable_CAL_INPUT_calper.Data{m,3} = 1;
        end
        
        if handles.uitable_CAL_INPUT_calper.Data{m,6} ~= eomday(handles.uitable_CAL_INPUT_calper.Data{m,4},handles.uitable_CAL_INPUT_calper.Data{m,5})
            handles.uitable_CAL_INPUT_calper.Data{m,6} = eomday(handles.uitable_CAL_INPUT_calper.Data{m,4},handles.uitable_CAL_INPUT_calper.Data{m,5});
        end
    end

end       


anynan = 0;
anyempty = 0;
for i=1:m
    for j=1:n
        if isnan(handles.uitable_CAL_INPUT_calper.Data{i,j})
            anynan= 1;
        end
        if isempty(handles.uitable_CAL_INPUT_calper.Data{i,j})
            anyempty= 1;
        end
    end
end

if anynan || anyempty
    handles.calready_calper = 0;
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
else
    if ~isempty(handles.edit_CAL_INPUT_outflowfile.String)
        handles.calready_calper = 1;
    end   
end

if handles.calready_simper && handles.calready_calper
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
        
        strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
            handles.uitable_CAL_INPUT_calper.Data{i,2},...
            handles.uitable_CAL_INPUT_calper.Data{i,3});
        enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
            handles.uitable_CAL_INPUT_calper.Data{i,5},...
            handles.uitable_CAL_INPUT_calper.Data{i,6});
        if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
            notvalidcalper(m)=1;
        end
        
    end
    if any(notvalidcalper)
        set(handles.uipanel_calpersetup,'ForegroundColor','r')
    else
        set(handles.uipanel_calpersetup,'ForegroundColor','k')
    end
    
else
    set(handles.uipanel_calpersetup,'ForegroundColor','r')
end

if handles.calready_globalfile && handles.calready_vicgastorage && handles.calready_flowobs ...
        && handles.calready_calpar && handles.calready_simper && handles.calready_calper && handles.calready_pooled
    
    strdatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simsyr.String),...
        str2double(handles.text_CAL_INPUT_simsmon.String),...
        str2double(handles.text_CAL_INPUT_simsday.String));
    enddatenum_sim = datenum(str2double(handles.text_CAL_INPUT_simeyr.String),...
        str2double(handles.text_CAL_INPUT_simemon.String),...
        str2double(handles.text_CAL_INPUT_simeday.String));
    
    [m,n] = size(handles.uitable_CAL_INPUT_calper.Data);
    notvalidcalper = zeros(m,1);
    for i=1:m
            strdatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,1},...
                handles.uitable_CAL_INPUT_calper.Data{i,2},...
                handles.uitable_CAL_INPUT_calper.Data{i,3});
            enddatenum_cal = datenum(handles.uitable_CAL_INPUT_calper.Data{i,4},...
                handles.uitable_CAL_INPUT_calper.Data{i,5},...
                handles.uitable_CAL_INPUT_calper.Data{i,6});
            if (strdatenum_sim > strdatenum_cal) ||  (enddatenum_sim < enddatenum_cal)
                notvalidcalper(m)=1;
            end
    end
    if any(notvalidcalper)
        set(handles.pushbutton_CAL_START,'enable','off')
        set(handles.pushbutton_gsa_start,'enable','off')
    else
        set(handles.pushbutton_CAL_START,'enable','on')
        set(handles.pushbutton_gsa_start,'enable','on')
    end
    
else
    set(handles.pushbutton_CAL_START,'enable','off')
    set(handles.pushbutton_gsa_start,'enable','off')
end
guidata(hObject, handles);


% --- Executes when entered data in editable cell(s) in uitable_CAL_INPUT_timestep.
function uitable_CAL_INPUT_timestep_CellEditCallback(hObject, eventdata, handles)
data = handles.uitable_CAL_INPUT_timestep.Data;
ind = eventdata.Indices;
if ~(strcmp(eventdata.EditData,'day') || strcmp(eventdata.EditData,'month'))
    data(ind(1),ind(2)) = data(ind(1),1);
end

if strcmp(eventdata.EditData,'day') && ~strcmp(data(ind(1),1),'day')
    data{ind(1),ind(2)} = 'month';
end
set(handles.uitable_CAL_INPUT_timestep,'Data',data)



% --- Executes on button press in pushbutton_CAL_START.
function pushbutton_CAL_START_Callback(hObject, eventdata, handles)

cla(handles.axes_ga_status); legend(handles.axes_ga_status,'off'); title(handles.axes_ga_status,'')
cla(handles.axes_ga_status_subbasin); legend(handles.axes_ga_status_subbasin,'off')
pause(1)

v = ver;
has_fsolve = any(strcmp(cellstr(char(v.Name)), 'Parallel Computing Toolbox'));
numcores = 1;
if has_fsolve
    p = gcp;
    numcores = p.NumWorkers;
end

% GA options
PopSize             = str2double(handles.edit_popsize.String);      % Population Size
GenSize             = str2double(handles.edit_gensize.String);      % Number of generation
EliteSize           = str2double(handles.edit_elitsize.String);     % Number of elite for each generation
CrossoverFraction   = str2double(handles.edit_crossfrac.String);    % Fraction of population participating crossover
StallGenLimit       = str2double(handles.edit_movewin.String);      % Window range for evaluating function improvement
TolFun              = str2double(handles.edit_functol.String);      % Frunction tolerance for stopping algorithm implementation
% GA function selection options
FitnessScalingFcn  = handles.popupmenu_fitscale.String(handles.popupmenu_fitscale.Value,:);     % Fitness scaling function 
SelectionFcn       = handles.popupmenu_paresel.String{handles.popupmenu_paresel.Value,:};       % Function for selecting parents
CrossoverFcn       = handles.popupmenu_crossover.String(handles.popupmenu_crossover.Value,:);	% Crossover function
MutationFcn        = handles.popupmenu_mutation.String(handles.popupmenu_mutation.Value,:); 	% Mutation function
fitnessfunc = handles.popupmenu_fitfunc.String{handles.popupmenu_fitfunc.Value};

% Simulation period
sim_stryr = str2double(handles.text_CAL_INPUT_simsyr.String);
sim_strmon = str2double(handles.text_CAL_INPUT_simsmon.String);
sim_strday = str2double(handles.text_CAL_INPUT_simsday.String);
sim_endyr = str2double(handles.text_CAL_INPUT_simeyr.String);
sim_endmon = str2double(handles.text_CAL_INPUT_simemon.String);
sim_endday = str2double(handles.text_CAL_INPUT_simeday.String);

poolcal_datemat = cell2mat(handles.uitable_CAL_INPUT_calper.Data);
poolcal_timestep = handles.uitable_CAL_INPUT_timestep.Data;


% Calibration parameter list
% calpar_all = struct;
calpar_all = struct('name',[],'colind',[],'file',[],'ub',[],'lb',[],'lump',[],'equalint',[]);
calpar_all(1).name  = 'infilt';         calpar_all(1).file  = 'soil';       calpar_all(1).colind  = 5;         
calpar_all(2).name  = 'Ds';             calpar_all(2).file  = 'soil';       calpar_all(2).colind  = 6;      
calpar_all(3).name  = 'Dsmax';          calpar_all(3).file  = 'soil';       calpar_all(3).colind  = 7;      
calpar_all(4).name  = 'Ws';             calpar_all(4).file  = 'soil';       calpar_all(4).colind  = 8;      
calpar_all(5).name  = 'c';              calpar_all(5).file  = 'soil';       calpar_all(5).colind  = 9;      
calpar_all(6).name  = 'depth1';         calpar_all(6).file  = 'soil';       calpar_all(6).colind  = 23;     
calpar_all(7).name  = 'depth2';         calpar_all(7).file  = 'soil';       calpar_all(7).colind  = 24;     
calpar_all(8).name  = 'depth3';         calpar_all(8).file  = 'soil';       calpar_all(8).colind  = 25;     
calpar_all(9).name  = 'max_snow_temp';  calpar_all(9).file  = 'global';     calpar_all(9).colind  = 0;      
calpar_all(10).name = 'min_rain_temp';  calpar_all(10).file = 'global';     calpar_all(10).colind = 0;      
calpar_all(11).name = 'snow_rough';     calpar_all(11).file = 'soil';       calpar_all(11).colind = 48;     
calpar_all(12).name = 'N';              calpar_all(12).file = 'rout';       calpar_all(12).colind = 5;      
calpar_all(13).name = 'K';              calpar_all(13).file = 'rout';       calpar_all(13).colind = 6;      
calpar_all(14).name = 'Velo';           calpar_all(14).file = 'rout';       calpar_all(14).colind = 7;      
calpar_all(15).name = 'Diff';           calpar_all(15).file = 'rout';       calpar_all(15).colind = 8;      


calpar_all(1).ub  = str2double(handles.edit_upper_infilt.String);           calpar_all(1).lb  = str2double(handles.edit_lower_infilt.String);           calpar_all(1).lump  = handles.checkbox_lumped_infilt.Value;
calpar_all(2).ub  = str2double(handles.edit_upper_Ds.String);               calpar_all(2).lb  = str2double(handles.edit_lower_Ds.String);               calpar_all(2).lump  = handles.checkbox_lumped_Ds.Value;
calpar_all(3).ub  = str2double(handles.edit_upper_Dsmax.String);            calpar_all(3).lb  = str2double(handles.edit_lower_Dsmax.String);            calpar_all(3).lump  = handles.checkbox_lumped_Dsmax.Value;
calpar_all(4).ub  = str2double(handles.edit_upper_Ws.String);               calpar_all(4).lb  = str2double(handles.edit_lower_Ws.String);               calpar_all(4).lump  = handles.checkbox_lumped_Ws.Value;
calpar_all(5).ub  = str2double(handles.edit_upper_c.String);                calpar_all(5).lb  = str2double(handles.edit_lower_c.String);                calpar_all(5).lump  = handles.checkbox_lumped_c.Value;
calpar_all(6).ub  = str2double(handles.edit_upper_depth1.String);           calpar_all(6).lb  = str2double(handles.edit_lower_depth1.String);           calpar_all(6).lump  = handles.checkbox_lumped_depth1.Value;
calpar_all(7).ub  = str2double(handles.edit_upper_depth2.String);           calpar_all(7).lb  = str2double(handles.edit_lower_depth2.String);           calpar_all(7).lump  = handles.checkbox_lumped_depth2.Value;
calpar_all(8).ub  = str2double(handles.edit_upper_depth3.String);           calpar_all(8).lb  = str2double(handles.edit_lower_depth3.String);           calpar_all(8).lump  = handles.checkbox_lumped_depth3.Value;
calpar_all(9).ub  = str2double(handles.edit_upper_snowtemp.String);         calpar_all(9).lb  = str2double(handles.edit_lower_snowtemp.String);         calpar_all(9).lump  = handles.checkbox_lumped_snowtemp.Value;
calpar_all(10).ub = str2double(handles.edit_upper_raintemp.String);         calpar_all(10).lb = str2double(handles.edit_lower_raintemp.String);         calpar_all(10).lump = handles.checkbox_lumped_raintemp.Value;
calpar_all(11).ub = str2double(handles.edit_upper_snowrough.String);        calpar_all(11).lb = str2double(handles.edit_lower_snowrough.String);        calpar_all(11).lump = handles.checkbox_lumped_snowrough.Value;
calpar_all(12).ub = str2double(handles.edit_upper_N.String);                calpar_all(12).lb = str2double(handles.edit_lower_N.String);                calpar_all(12).lump = handles.checkbox_lumped_N.Value;
calpar_all(13).ub = str2double(handles.edit_upper_K.String);                calpar_all(13).lb = str2double(handles.edit_lower_K.String);                calpar_all(13).lump = handles.checkbox_lumped_K.Value;
calpar_all(14).ub = str2double(handles.edit_upper_Velo.String);             calpar_all(14).lb = str2double(handles.edit_lower_Velo.String);             calpar_all(14).lump = handles.checkbox_lumped_Velo.Value;
calpar_all(15).ub = str2double(handles.edit_upper_Diff.String);             calpar_all(15).lb = str2double(handles.edit_lower_Diff.String);             calpar_all(15).lump = handles.checkbox_lumped_Diff.Value;

calpar_all(1).equalint  = handles.checkbox_equalinterval_infilt.Value;     
calpar_all(2).equalint  = handles.checkbox_equalinterval_Ds.Value;       
calpar_all(3).equalint  = handles.checkbox_equalinterval_Dsmax.Value;    
calpar_all(4).equalint  = handles.checkbox_equalinterval_Ws.Value;       
calpar_all(5).equalint  = handles.checkbox_equalinterval_c.Value;       
calpar_all(6).equalint  = handles.checkbox_equalinterval_depth1.Value;   
calpar_all(7).equalint  = handles.checkbox_equalinterval_depth2.Value;   
calpar_all(8).equalint  = handles.checkbox_equalinterval_depth3.Value;       
calpar_all(9).equalint  = handles.checkbox_equalinterval_snowtemp.Value;  
calpar_all(10).equalint = handles.checkbox_equalinterval_raintemp.Value;      
calpar_all(11).equalint = handles.checkbox_equalinterval_snowrough.Value;    
calpar_all(12).equalint = handles.checkbox_equalinterval_N.Value; 
calpar_all(13).equalint = handles.checkbox_equalinterval_K.Value;  
calpar_all(14).equalint = handles.checkbox_equalinterval_Velo.Value;  
calpar_all(15).equalint = handles.checkbox_equalinterval_Diff.Value;  


calpar_sel = struct('name',[],'colind',[],'file',[],'ub',[],'lb',[],'lump',[],'equalint',[]);
n = 1;
if handles.checkbox_calibrated_infilt.Value; calpar_sel(n)    = calpar_all(1);  n = n+1; end
if handles.checkbox_calibrated_Ds.Value; calpar_sel(n)        = calpar_all(2);  n = n+1; end
if handles.checkbox_calibrated_Dsmax.Value; calpar_sel(n)     = calpar_all(3);  n = n+1; end
if handles.checkbox_calibrated_Ws.Value; calpar_sel(n)        = calpar_all(4);  n = n+1; end
if handles.checkbox_calibrated_c.Value; calpar_sel(n)         = calpar_all(5);  n = n+1; end
if handles.checkbox_calibrated_depth1.Value; calpar_sel(n)    = calpar_all(6);  n = n+1; end
if handles.checkbox_calibrated_depth2.Value; calpar_sel(n)    = calpar_all(7);  n = n+1; end
if handles.checkbox_calibrated_depth3.Value; calpar_sel(n)    = calpar_all(8);  n = n+1; end
if handles.checkbox_calibrated_snowtemp.Value; calpar_sel(n)  = calpar_all(9);  n = n+1; end
if handles.checkbox_calibrated_raintemp.Value; calpar_sel(n)  = calpar_all(10); n = n+1; end
if handles.checkbox_calibrated_snowrough.Value; calpar_sel(n) = calpar_all(11); n = n+1; end
if handles.checkbox_calibrated_N.Value; calpar_sel(n)         = calpar_all(12); n = n+1; end
if handles.checkbox_calibrated_K.Value; calpar_sel(n)         = calpar_all(13); n = n+1; end
if handles.checkbox_calibrated_Velo.Value; calpar_sel(n)      = calpar_all(14); n = n+1; end
if handles.checkbox_calibrated_Diff.Value; calpar_sel(n)      = calpar_all(15); end


% Read VIC global file
fid = fopen(handles.edit_CAL_INPUT_globalfile.String,'r');
while ~feof(fid)
    paraminfo = fgetl(fid);
    comment_char = strfind(paraminfo,'#');
    if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
    
    if ~isempty(paraminfo)
        linecontent = textscan(paraminfo,'%s');
        if ~isempty(linecontent{1})
            if strcmp(linecontent{1}{1},'SOIL')
                soilparfile = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'ROUTE')
                routparfile = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'GRID_DECIMAL')
                grid_decimal = linecontent{1}{2};
%             elseif strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
%                 routoutfile = linecontent{1}{2};
%             elseif strcmp(linecontent{1}{1},'RESULT_DIR')
%                 vicoutfolder = linecontent{1}{2};
%             elseif strcmp(linecontent{1}{1},'OUTFILE')
%                 vicoutfile = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'OUT_STEP')
                out_step = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'TIME_STEP')
                time_step = str2double(linecontent{1}{2});
%             elseif strcmp(linecontent{1}{1},'OUTVAR')
%                 OUT_VIC = [OUT_VIC,linecontent{1}{2}];
%             elseif strcmp(linecontent{1}{1},'STARTYEAR')
%                 STARTYEAR = [OUT_VIC,linecontent{1}{2}];
%             elseif strcmp(linecontent{1}{1},'STARTMONTH')
%                 STARTMONTH = [OUT_VIC,linecontent{1}{2}];
%             elseif strcmp(linecontent{1}{1},'STARTDAY')
%                 STARTDAY = [OUT_VIC,linecontent{1}{2}];
%             elseif strcmp(linecontent{1}{1},'ENDYEAR')
%                 ENDYEAR = [OUT_VIC,linecontent{1}{2}];
%             elseif strcmp(linecontent{1}{1},'ENDMONTH')
%                 ENDMONTH = [OUT_VIC,linecontent{1}{2}];
%             elseif strcmp(linecontent{1}{1},'ENDDAY')
%                 ENDDAY = [OUT_VIC,linecontent{1}{2}];
            end
        end
        
    end
end
fclose(fid);

out_step = str2double(out_step);
if out_step == 0
    out_step = time_step;
end


% Creat folders where VIC calibration results are stored
mkdir([handles.edit_vicgastofile.String,'\globalparamfile_temp'])
mkdir([handles.edit_vicgastofile.String,'\routparamfile_temp'])
mkdir([handles.edit_vicgastofile.String,'\soilparamfile_temp'])
mkdir([handles.edit_vicgastofile.String,'\routout_temp'])
mkdir([handles.edit_vicgastofile.String,'\vicout_temp'])
for i = 1:PopSize
    mkdir([handles.edit_vicgastofile.String,'\vicout_temp\vicout_',num2str(i)])
end
mkdir([handles.edit_vicgastofile.String,'\vicga_opt'])
mkdir([handles.edit_vicgastofile.String,'\vicga_opt\vicout_opt'])


% GENERATE INITIAL PARAMETER POPULATION
soilpar_content_org = load(soilparfile);        % soil parameter file originally provided
routpar_content     = load(routparfile);        % routing parameter file originally provided
% Check grids between soil & routing parameter files
does_soilgrid_contain_routgrid = 1;
missing_routgrid = [];
for i = 1:size(routpar_content,1)
    if ~sum(soilpar_content_org(:,3)==routpar_content(i,1) & soilpar_content_org(:,4)==routpar_content(i,2))
        does_soilgrid_contain_routgrid = 0;
        missing_routgrid = [missing_routgrid;[routpar_content(i,1),routpar_content(i,2)]];
    end
end
if does_soilgrid_contain_routgrid==0
    disp(missing_routgrid)
    error('Routing grid cells listed above missing in the soil parameter file')
end
% Reorganized soil parameter content based on routing parameter
soilpar_content = nan(size(routpar_content,1),size(soilpar_content_org,2));
for i=1:size(routpar_content,1)   
    soilpar_content(i,:) = [1,soilpar_content_org(soilpar_content_org(:,3)==routpar_content(i,1) & soilpar_content_org(:,4)==routpar_content(i,2),2:end)];    
end


% Soil parameter file format
if rem(soilpar_content(1,3),0.5)==0
    saveformat1 = '%d\t%d\t%1.1f\t%1.1f';
elseif rem(soilpar_content(1,3),0.25)==0
    saveformat1 = '%d\t%d\t%1.2f\t%1.2f';    
elseif rem(soilpar_content(1,3),0.125)==0
    saveformat1 = '%d\t%d\t%1.3f\t%1.3f';
elseif rem(soilpar_content(1,3),0.0625)==0
    saveformat1 = '%d\t%d\t%1.4f\t%1.4f';
elseif rem(soilpar_content(1,3),0.03125)==0
    saveformat1 = '%d\t%d\t%1.5f\t%1.5f';
end
saveformat2=[];
for i = 1:size(soilpar_content,2)-4
    saveformat2=[saveformat2,'\t%1.6f'];
end
saveformat_soilfile = [saveformat1,saveformat2,'\n'];


% Routing parameter file format
if rem(soilpar_content(1,3),0.5)==0
    saveformat_routfile = '%2.1f\t%2.1f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n';
elseif rem(soilpar_content(1,3),0.25)==0
    saveformat_routfile = '%2.2f\t%2.2f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n';    
elseif rem(soilpar_content(1,3),0.125)==0
    saveformat_routfile = '%2.3f\t%2.3f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n';
elseif rem(soilpar_content(1,3),0.0625)==0
    saveformat_routfile = '%2.4f\t%2.4f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n';
elseif rem(soilpar_content(1,3),0.03125)==0
    saveformat_routfile = '%2.5f\t%2.5f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n';
end



Ngrid   = size(soilpar_content,1);
Ncalpar = length(calpar_sel);

% List of parameters chosen to be calibrated
calpar_list = cell(Ncalpar,1);
for i = 1:Ncalpar
    calpar_list{i}=calpar_sel(i).name;
end


[routfile_rowsize,routfile_colsize] = size(routpar_content);
if routfile_colsize == 9
    clustind = routpar_content(:,end);
elseif routfile_colsize == 8
    clustind = (1:routfile_rowsize)';
end
uniqclustind = unique(clustind);
clustnum     = length(unique(clustind));

par_ub = nan(1,length(calpar_sel));
par_lb = nan(1,length(calpar_sel));
lumpar_ind = nan(1,length(calpar_sel));
equalpar_ind = nan(1,length(calpar_sel));
for i = 1:length(calpar_sel)
    par_ub(i)      = calpar_sel(i).ub;
    par_lb(i)      = calpar_sel(i).lb;
    lumpar_ind(i)  = calpar_sel(i).lump;
    equalpar_ind(i)  = calpar_sel(i).equalint;
end
par_range    = par_ub - par_lb;

iniparpopset = zeros(Ngrid*Ncalpar,PopSize);
for n = 1:PopSize        
    iniparpop = zeros(Ngrid,Ncalpar);
    for i = 1:Ncalpar 
        
        if equalpar_ind(i)
            equalpar_temp = linspace(par_lb(i),par_ub(i),PopSize);
            fixrnd = equalpar_temp(n);
            iniparpop(:,i) = fixrnd;
        else
            if lumpar_ind(i) == 1
                fixrnd = par_lb(i) + par_range(i) * rand(1,1);
                iniparpop(:,i) = fixrnd;
            else %lumpar_ind(i) == 0
                for j = 1:clustnum
                    fixrnd = par_lb(i) + par_range(i) * rand(1,1);
                    iniparpop(clustind == uniqclustind(j),i) = fixrnd;
                end
            end
        end
         
    end
    iniparpopset(:,n) = iniparpop(:);
end


% Generate temporal global parameter files
fid = fopen(handles.edit_CAL_INPUT_globalfile.String,'r');
MAX_SNOW_TEMP_defined = 0;
MIN_RAIN_TEMP_defined = 0;
for i = 1:PopSize
    fid_write = fopen([handles.edit_vicgastofile.String,'\globalparamfile_temp\globalparam_',num2str(i),'.txt'],'w');
    while ~feof(fid)
        content_line = fgets(fid);
        param_type = sscanf(content_line,'%s',1);
        if strcmp(param_type,'SOIL')
            fprintf(fid_write,'%s\n',['SOIL                  ',strrep(handles.edit_vicgastofile.String,'\','/'),'/soilparamfile_temp/soilpar_',num2str(i),'.txt']);
        elseif strcmp(param_type,'ROUTE')
            fprintf(fid_write,'%s\n',['ROUTE                 ',strrep(handles.edit_vicgastofile.String,'\','/'),'/routparamfile_temp/routpar_',num2str(i),'.txt']);
        elseif strcmp(param_type,'ROUTE_OUTFILE')
            fprintf(fid_write,'%s\n',['ROUTE_OUTFILE         ',strrep(handles.edit_vicgastofile.String,'\','/'),'/routout_temp/simflow_',num2str(i),'.txt']);
        elseif strcmp(param_type,'RESULT_DIR')
            fprintf(fid_write,'%s\n',['RESULT_DIR            ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicout_temp/vicout_',num2str(i)]);
        elseif strcmp(param_type,'N_OUTFILES')
            % Do nothing
        elseif strcmp(param_type,'OUTFILE')
            % Do nothing
        elseif strcmp(param_type,'OUTVAR')
            % Do nothing  
        elseif strcmp(param_type,'MAX_SNOW_TEMP') && handles.checkbox_calibrated_snowtemp.Value
            [~, where_in_calparlist] = ismember('max_snow_temp',calpar_list);
            pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            fprintf(fid_write,'%s\n',['MAX_SNOW_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
        elseif strcmp(param_type,'MIN_RAIN_TEMP') && handles.checkbox_calibrated_raintemp.Value 
            [~, where_in_calparlist] = ismember('min_rain_temp',calpar_list);
            pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            fprintf(fid_write,'%s\n',['MIN_RAIN_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
        else    
            fprintf(fid_write,'%s',content_line);
        end
        
        if strcmp(param_type,'MAX_SNOW_TEMP'); MAX_SNOW_TEMP_defined = 1; end
        if strcmp(param_type,'MIN_RAIN_TEMP'); MIN_RAIN_TEMP_defined = 1; end
        
    end
    
    fprintf(fid_write,'%s\n','N_OUTFILES     1');
    fprintf(fid_write,'%s\n','OUTFILE        vic     3');
    fprintf(fid_write,'%s\n','OUTVAR         OUT_PREC');
    fprintf(fid_write,'%s\n','OUTVAR         OUT_RUNOFF');
    fprintf(fid_write,'%s\n','OUTVAR         OUT_BASEFLOW');
    
    if handles.checkbox_calibrated_snowtemp.Value && ~MAX_SNOW_TEMP_defined
        [~, where_in_calparlist] = ismember('max_snow_temp',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        fprintf(fid_write,'%s\n',['MAX_SNOW_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
    end
    if handles.checkbox_calibrated_raintemp.Value && ~MIN_RAIN_TEMP_defined
        [~, where_in_calparlist] = ismember('min_rain_temp',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        fprintf(fid_write,'%s\n',['MIN_RAIN_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
    end
    
    fclose(fid_write);
    frewind(fid);
    
end
fclose(fid);


% Generate temporal soil parameter files
for i = 1:PopSize
    fid = fopen([handles.edit_vicgastofile.String,'\soilparamfile_temp\soilpar_',num2str(i),'.txt'],'w');
    soilpar_content_new = soilpar_content;
    
    if handles.checkbox_calibrated_infilt.Value
        [~, where_in_calparlist] = ismember('infilt',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,5) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_Ds.Value
        [~, where_in_calparlist] = ismember('Ds',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,6) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_Dsmax.Value
        [~, where_in_calparlist] = ismember('Dsmax',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,7) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_Ws.Value
        [~, where_in_calparlist] = ismember('Ws',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,8) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_c.Value
        [~, where_in_calparlist] = ismember('c',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,9) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_depth1.Value
        [~, where_in_calparlist] = ismember('depth1',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,23) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_depth2.Value
        [~, where_in_calparlist] = ismember('depth2',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,24) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_depth3.Value
        [~, where_in_calparlist] = ismember('depth3',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,25) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_snowrough.Value
        [~, where_in_calparlist] = ismember('snow_rough',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        if handles.popupmenu_ORGANIC_FRACT.Value == 1
            soilpar_content_new(:,48) = pararray_in_iniparpopset;
        else
            soilpar_content_new(:,57) = pararray_in_iniparpopset;
        end
    end
    
    fprintf(fid,saveformat_soilfile,soilpar_content_new');
    fclose(fid);
end


% Generate temporal routing parameter files
for i = 1:PopSize
    routpar_content_new = routpar_content;
    
    fid = fopen([handles.edit_vicgastofile.String,'\routparamfile_temp\routpar_',num2str(i),'.txt'],'w');
    if handles.checkbox_calibrated_N.Value
        [~, where_in_calparlist] = ismember('N',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        routpar_content_new(:,5) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_K.Value
        [~, where_in_calparlist] = ismember('K',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        routpar_content_new(:,6) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_Velo.Value
        [~, where_in_calparlist] = ismember('Velo',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        routpar_content_new(:,7) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_Diff.Value
        [~, where_in_calparlist] = ismember('Diff',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        routpar_content_new(:,8) = pararray_in_iniparpopset;
    end
    fprintf(fid,saveformat_routfile,routpar_content_new');
    fclose(fid);
    
end


% Write VIC GA state file
sim_stryr_str = handles.text_CAL_INPUT_simsyr.String;
if sim_strmon > 9
    sim_strmon_str = handles.text_CAL_INPUT_simsmon.String;
else
    sim_strmon_str = ['0',handles.text_CAL_INPUT_simsmon.String];
end
if sim_strday > 9
    sim_strday_str = handles.text_CAL_INPUT_simsday.String;
else
    sim_strday_str = ['0',handles.text_CAL_INPUT_simsday.String];
end

sim_endyr_str = handles.text_CAL_INPUT_simeyr.String;
if sim_endmon > 9
    sim_endmon_str = handles.text_CAL_INPUT_simemon.String;
else
    sim_endmon_str = ['0',handles.text_CAL_INPUT_simemon.String];
end
if sim_endday > 9
    sim_endday_str = handles.text_CAL_INPUT_simeday.String;
else
    sim_endday_str = ['0',handles.text_CAL_INPUT_simeday.String];
end

% calpar_sel = struct('name',[],'colind',[],'file',[],'ub',[],'lb',[],'lump',[]);
% Ncalpar = length(calpar_sel);
calpar_list_str = [];
lumpar_list_str = [];
distpar_list_str = [];
lumpar_num = 0;
distpar_num = 0;
for i = 1:Ncalpar
    if isempty(calpar_list_str)
        calpar_list_str = [calpar_list_str,[calpar_sel(i).name]];
    else
        calpar_list_str = [calpar_list_str,['   ',calpar_sel(i).name]];
    end
    if calpar_sel(i).lump
        if isempty(lumpar_list_str)
            lumpar_list_str = [lumpar_list_str,[calpar_sel(i).name]];
        else
            lumpar_list_str = [lumpar_list_str,['   ',calpar_sel(i).name]];
        end
        lumpar_num = lumpar_num+1;
    else
        if isempty(distpar_list_str)
            distpar_list_str = [distpar_list_str,[calpar_sel(i).name]];
        else
            distpar_list_str = [distpar_list_str,['   ',calpar_sel(i).name]];
        end
        distpar_num = distpar_num+1;
    end
end

VIC_ver_contents = cellstr(get(handles.popupmenu_vic_version_calib,'String'));
VIC_ver_selected = VIC_ver_contents{get(handles.popupmenu_vic_version_calib,'Value')};

fid = fopen ([handles.edit_vicgastofile.String,'\vicga_state'],'w');
fprintf(fid,'***********************************************************************************************\n');
fprintf(fid,'*                                                                                             *\n');
fprintf(fid,'*   VV             VV   IIIIII       CCCCCC                   GGGGGGG            AAA          *\n');
fprintf(fid,'*    VV           VV      II       CC      CC               GG      GG          AA AA         *\n');
fprintf(fid,'*     VV         VV       II      CC        CC     &&&     GG                  AA   AA        *\n');
fprintf(fid,'*      VV       VV        II     CC               &&&&&   GG                  AA     AA       *\n');
fprintf(fid,'*       VV     VV         II     CC                &&&    GG       GGGG      AAAAAAAAAAA      *\n');
fprintf(fid,'*        VV   VV          II      CC        CC             GG       GG      AA         AA     *\n');
fprintf(fid,'*         VV VV           II       CC      CC               GG      GG     AA           AA    *\n');
fprintf(fid,'*          VVV          IIIIII       CCCCCC                   GGGGGGG     AA             AA   *\n');
fprintf(fid,'*                                                                                             *\n');
fprintf(fid,'*                               UMASS HYDROSYSTEMS RESEARCH GROUP                             *\n');
fprintf(fid,'*                                                                                             *\n');
fprintf(fid,'*                                          JUNE 2016                                          *\n');
fprintf(fid,'*                                         version 1.0                                         *\n');
fprintf(fid,'***********************************************************************************************\n');
fprintf(fid,'\n');
fprintf(fid,'* VIC calibration linked to the Genetic Algorithm has started\n');
if size(poolcal_datemat,1) > 1
    fprintf(fid,'* Optimization method selected (outlet/pool): pool calibration for %d streamflow gauges\n',size(poolcal_datemat,1));
else
    fprintf(fid,'* Optimization method selected (outlet/pool): outlet calibration for 1 streamflow gauge\n');
end
fprintf(fid,'* Job has been allocated to %d cores\n',numcores);
fprintf(fid,'* VIC version selected: %s\n',VIC_ver_selected);
fprintf(fid,'\n');
fprintf(fid,'More details on configuration are as follows.\n');
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,'                                     VIC SIMULATION OPTIONS\n');
fprintf(fid,'-----------------------------------------------------------------------------------------------\n');
fprintf(fid,'SIMULATION START DATE                     %s/%s/%s\n',sim_strmon_str,sim_strday_str,sim_stryr_str);
fprintf(fid,'SIMULATION END DATE                       %s/%s/%s\n',sim_endmon_str,sim_endday_str,sim_endyr_str);
fprintf(fid,'NUMBER OF GRIDS                           %d\n',Ngrid);
fprintf(fid,'NUMBER OF GRID CLUSTERS                   %d\n',clustnum);
fprintf(fid,'LIST OF CALIBRATED PARAMETERS             %s  (%d)\n',calpar_list_str,Ncalpar);
fprintf(fid,'LIST OF LUMPED PARAMETERS                 %s  (%d)\n',lumpar_list_str,lumpar_num);
fprintf(fid,'LIST OF DISTRIBUTED PARAMETERS            %s  (%d)\n',distpar_list_str,distpar_num);
fprintf(fid,'NUMBER OF CALIBRATED PARAMETERS           %d\n',clustnum*distpar_num+lumpar_num);
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,'                                  GENETIC ALGORITHM OPTIONS\n');
fprintf(fid,'-----------------------------------------------------------------------------------------------\n');
if strcmp(fitnessfunc,'NSE')
    fprintf(fid,'OBJECTIVE FUNCTION              Nash-Sutcliff Efficiency (NSE)\n');
elseif strcmp(fitnessfunc,'KGE')
    fprintf(fid,'OBJECTIVE FUNCTION              Kling-Gupta Efficiency (KGE)\n');
elseif strcmp(fitnessfunc,'logNSE')
    fprintf(fid,'OBJECTIVE FUNCTION              Log Nash-Sutcliff Efficiency (logNSE)\n');
end
fprintf(fid,'POPULATION SIZE                 %d\n',PopSize);
fprintf(fid,'GENERATION SIZE                 %d\n',GenSize);
fprintf(fid,'ELITE SIZE                      %d\n',EliteSize);
fprintf(fid,'CROSSOVER FRACTION              %1.6f\n',CrossoverFraction);
fprintf(fid,'FITTNESS SCALING                %s\n',FitnessScalingFcn);
fprintf(fid,'SELECTION FUNCTION              %s\n',SelectionFcn);
fprintf(fid,'CROSSOVER FUNCTION              %s\n',CrossoverFcn);
fprintf(fid,'MUTATION FUNCTION               %s\n',MutationFcn);
fprintf(fid,'STALL GENERATIONS               %d\n',StallGenLimit);
fprintf(fid,'FUNCTION TOLERANCE              %1.8f\n',TolFun);
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,'                                  STREAMGAUGE CALIBRATION SETUP\n');
fprintf(fid,'-----------------------------------------------------------------------------------------------\n');
fprintf(fid,'<OUTLET>\n');
fprintf(fid,'FLOW FILE                     %s\n',handles.edit_CAL_INPUT_outflowfile.String);
fprintf(fid,'STREAMFLOW TIME STEP          %s\n',poolcal_timestep{1,1});
fprintf(fid,'TARGET FLOW TIME STEP         %s\n',poolcal_timestep{1,2});
fprintf(fid,'CALIBRATION PERIOD            %d/%d/%d - %d/%d/%d\n',poolcal_datemat(1,1),poolcal_datemat(1,2),poolcal_datemat(1,3),poolcal_datemat(1,4),poolcal_datemat(1,5),poolcal_datemat(1,6));
for i = 1:size(poolcal_datemat,1)-1
    fprintf(fid,'<SUB%d>\n',i);
    fprintf(fid,'FLOW FILE                     %s\n',handles.listbox_CAL_INPUT_subflowfile.String{i});
    fprintf(fid,'STREAMFLOW TIME STEP          %s\n',poolcal_timestep{1+i,1});
    fprintf(fid,'TARGET FLOW TIME STEP         %s\n',poolcal_timestep{1+i,2});
    fprintf(fid,'CALIBRATION PERIOD            %d/%d/%d - %d/%d/%d\n',poolcal_datemat(1+i,1),poolcal_datemat(1+i,2),poolcal_datemat(1+i,3),poolcal_datemat(1+i,4),poolcal_datemat(1+i,5),poolcal_datemat(1+i,6));
end
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,'                                         GA EVOLUTION\n');
fprintf(fid,'-----------------------------------------------------------------------------------------------\n');
fprintf(fid,'Generation     |     Best NSE     |     Avg NSE      |     Run-time(sec)\n');
fclose(fid);


% EVALUATION OF INITAL POPULATION

% VIC_ver_contents = cellstr(get(handles.popupmenu_vic_version_calib,'String'));
% VIC_ver_selected = VIC_ver_contents{get(handles.popupmenu_vic_version_calib,'Value')};
if strcmp(VIC_ver_selected,'VIC-4.2.b')
    wherevicfile = handles.WhereIsVIC_4_2_b;
    IsVIC5 = 0;
elseif strcmp(VIC_ver_selected,'VIC-4.2.c')
    wherevicfile = handles.WhereIsVIC_4_2_c;
    IsVIC5 = 0;
elseif strcmp(VIC_ver_selected,'VIC-4.2.d')
    wherevicfile = handles.WhereIsVIC_4_2_d;
    IsVIC5 = 0;
elseif strcmp(VIC_ver_selected,'VIC-5.0.1')
    wherevicfile = handles.WhereIsVIC_5_0_1;
    IsVIC5 = 1;
end

command_part1 = handles.WhereIsCygwin;
command_part1 = strrep(command_part1,'\','/');

% wherevicfile = handles.WhereIsVIC;
wherevicfile = strrep(wherevicfile,'\','/');

vicga_savefolder = strrep(handles.edit_vicgastofile.String,'\','/');

numsimday = datenum([sim_endyr,sim_endmon,sim_endday])-datenum([sim_stryr,sim_strmon,sim_strday])+1;
sim_datemat = datevec(datenum([sim_stryr,sim_strmon,sim_strday]):datenum([sim_endyr,sim_endmon,sim_endday]));
sim_datemat = sim_datemat(:,1:3);


poolsize = size(poolcal_datemat,1);
pool_obsflow_file = cell(poolsize,1);
pool_subrout_file = cell(poolsize-1,1);
pool_obsflow_file{1} = handles.edit_CAL_INPUT_outflowfile.String;
for i = 1:poolsize-1
    pool_obsflow_file{1+i} = handles.listbox_CAL_INPUT_subflowfile.String{i};
    pool_subrout_file{i} = handles.listbox_CAL_INPUT_subroutfile.String{i};
end


tic;
funcscore_pool = nan(PopSize,poolsize);
parfor p = 1:PopSize
    
    funcscore_single = nan(1,poolsize);
    
    % RUN VIC FOR ENTIRE MODELING DOMAIN
    whereglobalfile = [vicga_savefolder,'/globalparamfile_temp/globalparam_',num2str(p),'.txt'];
    
    if IsVIC5
        system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vic_classic.exe -g ',whereglobalfile,'''']);
    else
        system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'''']);
    end
%     [~,~] = system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'''']);
    
        
    % RUN ROUTING MODEL FOR OUTLET
    routpar_outlet = load([vicga_savefolder,'/routparamfile_temp/routpar_',num2str(p),'.txt']);
    [~,outlet_ind] = min(routpar_outlet(:,4));
    FLOW_tot = zeros(numsimday,1);
    FLOW_base = zeros(numsimday,1);
    for n = 1:size(routpar_outlet,1)

        grid_vicout = load([vicga_savefolder,'/vicout_temp/vicout_',num2str(p),'/vic_',num2str(routpar_outlet(n,1),['%1.',grid_decimal,'f']),'_',num2str(routpar_outlet(n,2),['%1.',grid_decimal,'f'])]);
        if out_step < 24
            inflow_direct = grpstats(grid_vicout(:,6),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
            inflow_base = grpstats(grid_vicout(:,7),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
        else
            inflow_direct = grid_vicout(:,5);
            inflow_base = grid_vicout(:,6);
        end
        
        flowlen = routpar_outlet(n,4);
        route_par = [routpar_outlet(n,5),routpar_outlet(n,6),routpar_outlet(n,7),routpar_outlet(n,8)];
        if n == outlet_ind
            isOutlet = 1;
        else
            isOutlet = 0;
        end
        [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
        FLOW_tot = FLOW_tot + runoff*routpar_outlet(n,3)/sum(routpar_outlet(:,3));
        FLOW_base = FLOW_base + baseflow*routpar_outlet(n,3)/sum(routpar_outlet(:,3));
        
    end
    
    % Calculate error at the outlet
    strind = find(sim_datemat(:,1) == poolcal_datemat(1,1) & sim_datemat(:,2) == poolcal_datemat(1,2) & sim_datemat(:,3) == poolcal_datemat(1,3));
    endind = find(sim_datemat(:,1) == poolcal_datemat(1,4) & sim_datemat(:,2) == poolcal_datemat(1,5) & sim_datemat(:,3) == poolcal_datemat(1,6));
    sim_datemat_calper = sim_datemat(strind:endind,:);
    FLOW_tot_calper_day = FLOW_tot(strind:endind);
    FLOW_tot_calper_mon = grpstats(FLOW_tot_calper_day,{sim_datemat_calper(:,1),sim_datemat_calper(:,2)},'sum');

    
    obsflow_outlet = load(pool_obsflow_file{1});
    if strcmp(poolcal_timestep{1,1},'day')
        strind = find(obsflow_outlet(:,1) == poolcal_datemat(1,1) & obsflow_outlet(:,2) == poolcal_datemat(1,2) & obsflow_outlet(:,3) == poolcal_datemat(1,3));
        endind = find(obsflow_outlet(:,1) == poolcal_datemat(1,4) & obsflow_outlet(:,2) == poolcal_datemat(1,5) & obsflow_outlet(:,3) == poolcal_datemat(1,6));
        obsflow_outlet_calper_day = obsflow_outlet(strind:endind,end);
        
        obsflow_outlet_calper_day(obsflow_outlet_calper_day<0) = -9999999999;
        obsflow_outlet_calper_mon = grpstats(obsflow_outlet_calper_day,{obsflow_outlet(strind:endind,1),obsflow_outlet(strind:endind,2)},'sum');

    else
        strind = find(obsflow_outlet(:,1) == poolcal_datemat(1,1) & obsflow_outlet(:,2) == poolcal_datemat(1,2));
        endind = find(obsflow_outlet(:,1) == poolcal_datemat(1,4) & obsflow_outlet(:,2) == poolcal_datemat(1,5));
        obsflow_outlet_calper_mon = obsflow_outlet(strind:endind,end);
        
        obsflow_outlet_calper_day = [];
        
    end
    
    fitfuncval_outlet = 0;
    switch fitnessfunc
        
        case 'NSE'
            
            if strcmp(poolcal_timestep{1,2},'day')
                FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_outlet_calper_day>=0);
                obsflow_outlet_calper_day_valid = obsflow_outlet_calper_day(obsflow_outlet_calper_day>=0);
                fitfuncval_outlet = 1-mean((FLOW_tot_calper_day_valid-obsflow_outlet_calper_day_valid).^2)/var(obsflow_outlet_calper_day_valid,1);

            elseif strcmp(poolcal_timestep{1,2},'month')
                FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_outlet_calper_mon>=0);
                obsflow_outlet_calper_mon_valid = obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>=0);
                fitfuncval_outlet = 1-mean((FLOW_tot_calper_mon_valid-obsflow_outlet_calper_mon_valid).^2)/var(obsflow_outlet_calper_mon_valid,1);

            end
            
        case 'KGE'
            
            if strcmp(poolcal_timestep{1,2},'day')
                FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_outlet_calper_day>=0);
                obsflow_outlet_calper_day_valid = obsflow_outlet_calper_day(obsflow_outlet_calper_day>=0);
                mean_ratio = mean(FLOW_tot_calper_day_valid)/mean(obsflow_outlet_calper_day_valid);
                std_ratio = std(FLOW_tot_calper_day_valid,1)/std(obsflow_outlet_calper_day_valid,1);
                lincorr = corr(FLOW_tot_calper_day_valid,obsflow_outlet_calper_day_valid);
                fitfuncval_outlet = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);

            elseif strcmp(poolcal_timestep{1,2},'month')
                FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_outlet_calper_mon>=0);
                obsflow_outlet_calper_mon_valid = obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>=0);
                mean_ratio = mean(FLOW_tot_calper_mon_valid)/mean(obsflow_outlet_calper_mon_valid);
                std_ratio = std(FLOW_tot_calper_mon_valid,1)/std(obsflow_outlet_calper_mon_valid,1);
                lincorr = corr(FLOW_tot_calper_mon_valid,obsflow_outlet_calper_mon_valid);
                fitfuncval_outlet = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);

            end
            
        case 'logNSE'
            
            if strcmp(poolcal_timestep{1,2},'day')
                FLOW_tot_calper_day_valid = log(FLOW_tot_calper_day(obsflow_outlet_calper_day>0 & FLOW_tot_calper_day>0));
                obsflow_outlet_calper_day_valid = log(obsflow_outlet_calper_day(obsflow_outlet_calper_day>0 & FLOW_tot_calper_day>0));
                fitfuncval_outlet = 1-mean((FLOW_tot_calper_day_valid-obsflow_outlet_calper_day_valid).^2)/var(obsflow_outlet_calper_day_valid,1);

            elseif strcmp(poolcal_timestep{1,2},'month')
                FLOW_tot_calper_mon_valid = log(FLOW_tot_calper_mon(obsflow_outlet_calper_mon>0 & FLOW_tot_calper_mon>0));
                obsflow_outlet_calper_mon_valid = log(obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>0 & FLOW_tot_calper_mon>0));
                fitfuncval_outlet = 1-mean((FLOW_tot_calper_mon_valid-obsflow_outlet_calper_mon_valid).^2)/var(obsflow_outlet_calper_mon_valid,1);

            end
            
    end
    funcscore_single(1) = fitfuncval_outlet;
    
    % Save simulated outlet streamflow
    savedata = [sim_datemat,FLOW_tot];
    fid = fopen([vicga_savefolder,'/routout_temp/simflow_outlet_',num2str(p),'.txt'],'w');
    fprintf(fid,'%d\t%d\t%d\t%1.8f\n',savedata');
    fclose(fid);
    
    
    % RUN ROUTING MODEL FOR INTERIOR BASINS
    for isub = 1:poolsize-1
        
        routpar_sub = load(pool_subrout_file{isub});
        routpar_sub_new = routpar_sub;
        for n = 1:size(routpar_sub,1)
            routpar_sub_new(n,5:8) = routpar_outlet(routpar_outlet(:,1) == routpar_sub(n,1) & routpar_outlet(:,2) == routpar_sub(n,2),5:8);
        end
        [~,outlet_ind] = min(routpar_sub_new(:,4));
        
        FLOW_tot = zeros(numsimday,1);
        FLOW_base = zeros(numsimday,1);
        for n = 1:size(routpar_sub_new,1)
            
            grid_vicout = load([vicga_savefolder,'/vicout_temp/vicout_',num2str(p),'/vic_',num2str(routpar_sub_new(n,1),['%1.',grid_decimal,'f']),'_',num2str(routpar_sub_new(n,2),['%1.',grid_decimal,'f'])]);
            if out_step < 24
                inflow_direct = grpstats(grid_vicout(:,6),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                inflow_base = grpstats(grid_vicout(:,7),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
            else
                inflow_direct = grid_vicout(:,5);
                inflow_base = grid_vicout(:,6);
            end
            
            flowlen = routpar_sub_new(n,4);
            route_par = [routpar_sub_new(n,5),routpar_sub_new(n,6),routpar_sub_new(n,7),routpar_sub_new(n,8)];
            if n == outlet_ind
                isOutlet = 1;
            else
                isOutlet = 0;
            end
            [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
            FLOW_tot = FLOW_tot + runoff*routpar_sub_new(n,3)/sum(routpar_sub_new(:,3));
            FLOW_base = FLOW_base + baseflow*routpar_sub_new(n,3)/sum(routpar_sub_new(:,3));
            
        end
        
        % Calculate error at sub-basin
        strind = find(sim_datemat(:,1) == poolcal_datemat(isub+1,1) & sim_datemat(:,2) == poolcal_datemat(isub+1,2) & sim_datemat(:,3) == poolcal_datemat(isub+1,3));
        endind = find(sim_datemat(:,1) == poolcal_datemat(isub+1,4) & sim_datemat(:,2) == poolcal_datemat(isub+1,5) & sim_datemat(:,3) == poolcal_datemat(isub+1,6));
        sim_datemat_calper = sim_datemat(strind:endind,:);
        FLOW_tot_calper_day = FLOW_tot(strind:endind);
        FLOW_tot_calper_mon = grpstats(FLOW_tot_calper_day,{sim_datemat_calper(:,1),sim_datemat_calper(:,2)},'sum');
        
        
        obsflow_sub = load(pool_obsflow_file{isub+1});
        if strcmp(poolcal_timestep{1,1},'day')
            strind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,1) & obsflow_sub(:,2) == poolcal_datemat(isub+1,2) & obsflow_sub(:,3) == poolcal_datemat(isub+1,3));
            endind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,4) & obsflow_sub(:,2) == poolcal_datemat(isub+1,5) & obsflow_sub(:,3) == poolcal_datemat(isub+1,6));
            obsflow_sub_calper_day = obsflow_sub(strind:endind,end);
            
            obsflow_sub_calper_day(obsflow_sub_calper_day<0) = -9999999999;
            obsflow_sub_calper_mon = grpstats(obsflow_sub_calper_day,{obsflow_sub(strind:endind,1),obsflow_sub(strind:endind,2)},'sum');
            
        else
            strind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,1) & obsflow_sub(:,2) == poolcal_datemat(isub+1,2));
            endind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,4) & obsflow_sub(:,2) == poolcal_datemat(isub+1,5));
            obsflow_sub_calper_mon = obsflow_sub(strind:endind,end);
            
            obsflow_sub_calper_day = [];
            
        end
        
        fitfuncval_sub = 0;    
        switch fitnessfunc
            
            case 'NSE'
                
                if strcmp(poolcal_timestep{isub+1,2},'day')
                    FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_sub_calper_day>=0);
                    obsflow_sub_calper_day_valid = obsflow_sub_calper_day(obsflow_sub_calper_day>=0);
                    fitfuncval_sub = 1-mean((FLOW_tot_calper_day_valid-obsflow_sub_calper_day_valid).^2)/var(obsflow_sub_calper_day_valid,1);

                elseif strcmp(poolcal_timestep{isub+1,2},'month')
                    FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_sub_calper_mon>=0);
                    obsflow_sub_calper_mon_valid = obsflow_sub_calper_mon(obsflow_sub_calper_mon>=0);
                    fitfuncval_sub = 1-mean((FLOW_tot_calper_mon_valid-obsflow_sub_calper_mon_valid).^2)/var(obsflow_sub_calper_mon_valid,1);

                end
                
            case 'KGE'
                
                if strcmp(poolcal_timestep{isub+1,2},'day')
                    FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_sub_calper_day>=0);
                    obsflow_sub_calper_day_valid = obsflow_sub_calper_day(obsflow_sub_calper_day>=0);
                    mean_ratio = mean(FLOW_tot_calper_day_valid)/mean(obsflow_sub_calper_day_valid);
                    std_ratio = std(FLOW_tot_calper_day_valid,1)/std(obsflow_sub_calper_day_valid,1);
                    lincorr = corr(FLOW_tot_calper_day_valid,obsflow_sub_calper_day_valid);
                    fitfuncval_sub = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);

                elseif strcmp(poolcal_timestep{isub+1,2},'month')
                    FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_sub_calper_mon>=0);
                    obsflow_sub_calper_mon_valid = obsflow_sub_calper_mon(obsflow_sub_calper_mon>=0);
                    mean_ratio = mean(FLOW_tot_calper_mon_valid)/mean(obsflow_sub_calper_mon_valid);
                    std_ratio = std(FLOW_tot_calper_mon_valid,1)/std(obsflow_sub_calper_mon_valid,1);
                    lincorr = corr(FLOW_tot_calper_mon_valid,obsflow_sub_calper_mon_valid);
                    fitfuncval_sub = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);

                end
                
            case 'logNSE'
                
                if strcmp(poolcal_timestep{1,2},'day')
                    FLOW_tot_calper_day_valid = log(FLOW_tot_calper_day(obsflow_sub_calper_day>0 & FLOW_tot_calper_day>0));
                    obsflow_sub_calper_day_valid = log(obsflow_sub_calper_day(obsflow_sub_calper_day>0 & FLOW_tot_calper_day>0));
                    fitfuncval_sub = 1-mean((FLOW_tot_calper_day_valid-obsflow_sub_calper_day_valid).^2)/var(obsflow_sub_calper_day_valid,1);

                elseif strcmp(poolcal_timestep{1,2},'month')
                    FLOW_tot_calper_mon_valid = log(FLOW_tot_calper_mon(obsflow_sub_calper_mon>0 & FLOW_tot_calper_mon>0));
                    obsflow_sub_calper_mon_valid = log(obsflow_sub_calper_mon(obsflow_sub_calper_mon>0 & FLOW_tot_calper_mon>0));
                    fitfuncval_sub = 1-mean((FLOW_tot_calper_mon_valid-obsflow_sub_calper_mon_valid).^2)/var(obsflow_sub_calper_mon_valid,1);

                end
                
        end
        funcscore_single(isub+1) = fitfuncval_sub;
        
        % Save simulated outlet streamflow
        savedata = [sim_datemat,FLOW_tot];
        fid = fopen([vicga_savefolder,'/routout_temp/simflow_sub',num2str(isub),'_',num2str(p),'.txt'],'w');
        fprintf(fid,'%d\t%d\t%d\t%1.8f\n',savedata');
        fclose(fid);
        
    end
    
    funcscore_pool(p,:) = funcscore_single;
    
end
elapse_t = toc;

funcscore = mean(-funcscore_pool,2);


fitfuncval_yaxis_lowest = 0;
funcscore_mean_all = nan(GenSize+1,1);
funcscore_best_all = nan(GenSize+1,1);
funcscore_poolbest_all = nan(GenSize+1,poolsize);

funcscore_mean_all(1) = mean(funcscore);
[funcscore_best_all(1),minind] = min(funcscore);
funcscore_poolbest_all(1,:) = funcscore_pool(minind,:);


% Save the optimal calibration
copyfile([handles.edit_vicgastofile.String,'\vicout_temp\vicout_',num2str(minind)],[handles.edit_vicgastofile.String,'\vicga_opt\vicout_opt'])

copyfile([handles.edit_vicgastofile.String,'\routout_temp\simflow_outlet_',num2str(minind),'.txt'],[handles.edit_vicgastofile.String,'\vicga_opt\simflow_outlet_opt.txt'])
for i = 1:poolsize-1
    copyfile([handles.edit_vicgastofile.String,'\routout_temp\simflow_sub',num2str(i),'_',num2str(minind),'.txt'],[handles.edit_vicgastofile.String,'\vicga_opt\simflow_sub',num2str(i),'_opt.txt'])
end

copyfile([handles.edit_vicgastofile.String,'\soilparamfile_temp\soilpar_',num2str(minind),'.txt'],[handles.edit_vicgastofile.String,'\vicga_opt\soilpar_outlet_opt.txt'])
copyfile([handles.edit_vicgastofile.String,'\routparamfile_temp\routpar_',num2str(minind),'.txt'],[handles.edit_vicgastofile.String,'\vicga_opt\routpar_outlet_opt.txt'])
soilpar_outlet_opt = load([handles.edit_vicgastofile.String,'\soilparamfile_temp\soilpar_',num2str(minind),'.txt']);
routpar_outlet_opt = load([handles.edit_vicgastofile.String,'\routparamfile_temp\routpar_',num2str(minind),'.txt']);
for i = 1:poolsize-1
    routpar_sub = load(pool_subrout_file{i});
    soilpar_sub = nan(size(routpar_sub,1),size(soilpar_outlet_opt,2));
    for n = 1:size(routpar_sub,1)
        routpar_sub(n,5:9) = routpar_outlet_opt(routpar_outlet_opt(:,1) == routpar_sub(n,1) & routpar_outlet_opt(:,2) == routpar_sub(n,2),5:9);
        soilpar_sub(n,:) = soilpar_outlet_opt(soilpar_outlet_opt(:,3) == routpar_sub(n,1) & soilpar_outlet_opt(:,4) == routpar_sub(n,2),:);
    end
    fid = fopen([handles.edit_vicgastofile.String,'\vicga_opt\soilpar_sub',num2str(i),'_opt.txt'],'w');
    fprintf(fid,saveformat_soilfile,soilpar_sub');
    fclose(fid);
    
    fid = fopen([handles.edit_vicgastofile.String,'\vicga_opt\routpar_sub',num2str(i),'_opt.txt'],'w');
    fprintf(fid,saveformat_routfile,routpar_sub');
    fclose(fid);
end

fid = fopen([handles.edit_vicgastofile.String,'\globalparamfile_temp\globalparam_',num2str(minind),'.txt'],'r');
fid_write = fopen([handles.edit_vicgastofile.String,'\vicga_opt\globalpar_outlet_opt.txt'],'w');
while ~feof(fid)
    content_line = fgets(fid);
    param_type = sscanf(content_line,'%s',1);
    if strcmp(param_type,'SOIL')
        fprintf(fid_write,'%s\n',['SOIL                  ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/soilpar_outlet_opt.txt']);
    elseif strcmp(param_type,'ROUTE')
        fprintf(fid_write,'%s\n',['ROUTE                 ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/routpar_outlet_opt.txt']);
    elseif strcmp(param_type,'ROUTE_OUTFILE')
        fprintf(fid_write,'%s\n',['ROUTE_OUTFILE         ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/simflow_outlet_opt.txt']);
    elseif strcmp(param_type,'RESULT_DIR')
        fprintf(fid_write,'%s\n',['RESULT_DIR            ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/vicout_opt']);
    else
        fprintf(fid_write,'%s',content_line);
    end
    
end
fclose(fid_write);  
fclose(fid);

for i = 1:poolsize-1
    
    fid = fopen([handles.edit_vicgastofile.String,'\globalparamfile_temp\globalparam_',num2str(minind),'.txt'],'r');
    fid_write = fopen([handles.edit_vicgastofile.String,'\vicga_opt\globalpar_sub',num2str(i),'_opt.txt'],'w');
    while ~feof(fid)
        content_line = fgets(fid);
        param_type = sscanf(content_line,'%s',1);
        if strcmp(param_type,'SOIL')
            fprintf(fid_write,'%s\n',['SOIL                  ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/soilpar_sub',num2str(i),'_opt.txt']);
        elseif strcmp(param_type,'ROUTE')
            fprintf(fid_write,'%s\n',['ROUTE                 ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/routpar_sub',num2str(i),'_opt.txt']);
        elseif strcmp(param_type,'ROUTE_OUTFILE')
            fprintf(fid_write,'%s\n',['ROUTE_OUTFILE         ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/simflow_sub',num2str(i),'_opt.txt']);
        elseif strcmp(param_type,'RESULT_DIR')
            fprintf(fid_write,'%s\n',['RESULT_DIR            ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/vicout_opt']);
        else
            fprintf(fid_write,'%s',content_line);
        end
        
    end
    fclose(fid_write);
    fclose(fid);

end



axes(handles.axes_ga_status)
if -mean(funcscore) < fitfuncval_yaxis_lowest
    fitfuncval_yaxis_lowest = -mean(funcscore);
end
h = plot(0,-funcscore_mean_all(1),'bs',0,-funcscore_best_all(1),'r*');
h(1).MarkerFaceColor = 'b';     h(1).MarkerSize = 5;
h(2).MarkerFaceColor = 'r';     h(2).MarkerSize = 5;
set(gca,'xlim',[0,GenSize],'ylim',[fitfuncval_yaxis_lowest,1])
xlabel('Generation','fontsize',10); ylabel('NSE','fontsize',10)
legend('Pop Avg','Pop Best','orientation','horizontal','location','NE')
title(['Best ',fitnessfunc,': ',num2str(-funcscore_best_all(1),'%1.2f'),' & Avg NSE: ',num2str(-funcscore_mean_all(1),'%1.2f'),' at Generation 0'])
grid on;

% state file update
fid = fopen ([handles.edit_vicgastofile.String,'\vicga_state'],'a');
% fprintf(fid,'Generation     |     Best NSE     |     Avg NSE      |     Run-time(sec)\n');
fprintf(fid,'%10.0f     |%13.6f     |%12.6f      |     %1.0f\n',0,-funcscore_best_all(1),-funcscore_mean_all(1),elapse_t);
fclose(fid);


fitfuncval_yaxis_lowest2 = 0;
randcolor = rand(poolsize,3);
randcolor(1,:) = 0;

legend_str = cell(1,poolsize);
for i = 1:poolsize
    if i == 1
        legend_str{1} = 'Outlet';
    else
        legend_str{i} = ['Sub',num2str(i-1)];
    end
end

if poolsize > 1
    axes(handles.axes_ga_status_subbasin)
    if min(funcscore_pool(minind,:)) < fitfuncval_yaxis_lowest2
        fitfuncval_yaxis_lowest2 = min(funcscore_pool(minind,:));
    end
%     plot(0,funcscore_poolbest_all(1,1),'o','color',randcolor(1,:),'markerfacecolor',randcolor(1,:),'markersize',5); hold on;

    for i = 1:poolsize
        eval(['plot(0,funcscore_poolbest_all(1,',num2str(i),'),''o'',''color'',randcolor(',num2str(i),',:),''markerfacecolor'',randcolor(',num2str(i),',:),''markersize'',5);'])
        hold on;
    end
    set(gca,'xlim',[0,GenSize],'ylim',[fitfuncval_yaxis_lowest2,1])
    xlabel('Generation','fontsize',10); ylabel('NSE at Sub-basins','fontsize',10)
    legend(legend_str,'orientation','horizontal','location','NE')
    grid on;
end

set(handles.pushbutton_CAL_TERMINATE,'Enable','on')

pause(1)



generation = 0;
thisPopulation = iniparpopset;
thisScore = funcscore;
exitFlag = 0;

if get(handles.pushbutton_CAL_TERMINATE,'userdata') == 1
    disp('Optimization terminated by user.');
    exitFlag = 3;
    set(handles.pushbutton_CAL_TERMINATE,'userdata',0)
end

while exitFlag == 0
    generation = generation + 1;
    
    %%%%%%%%%%% WHO WILL CONTRIBUTE TO THE NEXT GENERATION? %%%%%%%%%%%%%%%
  
    % How many crossover offspring will there be from each source?
    nEliteKids  = EliteSize;
    nXoverKids  = round(CrossoverFraction * (size(thisPopulation,2) - nEliteKids));
    nMutateKids = size(thisPopulation,2) - nEliteKids - nXoverKids;
    
    % How many parents will we need to complete the population?
    nParents = 2 * nXoverKids + nMutateKids;
    
    % Fitness scaling
    switch FitnessScalingFcn
        
        case 'Rank'
            expectation = rankscaling_vicga(thisScore,nParents);
            
        case 'shiftlinearscaling'
%             expectation = shiftlinearscaling();
            
        case 'propscaling'
%             expectation = propscaling();
            
        case 'topscaling'
%             expectation = topscaling();
  
    end
    
    
    % Parents selection
    switch SelectionFcn
        
        case 'Roulette' 
            parents = roulette_vicga(expectation,nParents);
            
        case 'Tournament'
            tournamentSize = 4;  % change this to what you want it to be
            parents = tournament_vicga(expectation,nParents,tournamentSize);
            
        case 'uniform'
%             parents = uniform();
            
        case 'remainder'
%             parents = remainder();
            
        case 'stochunif'
%             parents = stochunif();
            
    end
     
    % Shuffle to prevent locality effects. It is not the responsibility if
    % the selection function to return parents in a "good" order so we make
    % sure there is a random order here.
    parents = parents(randperm(length(parents)));
    
    
    %%%%%%%%% WE WILL MAKE THE MEMBERS OF THE NEXT GENERATION %%%%%%%%%%%%%
    
    %----------------------------- CROSSOVER ------------------------------ 
    switch CrossoverFcn
        
        case 'Scattered'
            xoverKids = scattered_vicga(thisPopulation,parents,nXoverKids,Ncalpar,Ngrid,lumpar_ind,clustind);
            
        case 'heuristic'
%             xoverKids = scattered();
            
        case 'intermediate'
%             xoverKids = scattered();
            
        case 'singlepoint'
%             xoverKids = scattered();
            
        case 'twopoint'
%             xoverKids = scattered();
            
        case 'arithmetic'
%             xoverKids = scattered();
            
                    
    end
    
    %-------------------------------- MUTATION ----------------------------   
    switch MutationFcn
        
        case 'Gaussian'
            scale  = 1;  % change those as appropriate
            shrink = 1;  % change those as appropriate, 0 <= shrink <= 1  
            mutateKids = gaussian_vicga(parents,thisPopulation,generation,GenSize,...
                nMutateKids,scale,shrink,par_lb,par_ub,Ncalpar,Ngrid,lumpar_ind,clustind);  
            
        case 'mutuniform'
%             mutateKids = gaussian();
            
        case 'adaptfeasiblen'
%             mutateKids = gaussian();
            
    end
 
    %-------------------------- ELITE KIDS --------------------------------
    [~,k] = sort(thisScore);
    eliteKids  = thisPopulation(:,k(1:EliteSize));
    
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%% NEXT GENERATION %%%%%%%%%%%%%%%%%%%%%%%%%%%
    nextPopulation = [ eliteKids  xoverKids  mutateKids ];
    
    
    % Generate temporal global parameter files
    fid = fopen(handles.edit_CAL_INPUT_globalfile.String,'r');
    MAX_SNOW_TEMP_defined = 0;
    MIN_RAIN_TEMP_defined = 0;
    for i = 1:PopSize
        fid_write = fopen([handles.edit_vicgastofile.String,'\globalparamfile_temp\globalparam_',num2str(i),'.txt'],'w');
        while ~feof(fid)
            content_line = fgets(fid);
            param_type = sscanf(content_line,'%s',1);
            if strcmp(param_type,'SOIL')
                fprintf(fid_write,'%s\n',['SOIL                  ',strrep(handles.edit_vicgastofile.String,'\','/'),'/soilparamfile_temp/soilpar_',num2str(i),'.txt']);
            elseif strcmp(param_type,'ROUTE')
                fprintf(fid_write,'%s\n',['ROUTE                 ',strrep(handles.edit_vicgastofile.String,'\','/'),'/routparamfile_temp/routpar_',num2str(i),'.txt']);
            elseif strcmp(param_type,'ROUTE_OUTFILE')
                fprintf(fid_write,'%s\n',['ROUTE_OUTFILE         ',strrep(handles.edit_vicgastofile.String,'\','/'),'/routout_temp/simflow_',num2str(i),'.txt']);
            elseif strcmp(param_type,'RESULT_DIR')
                fprintf(fid_write,'%s\n',['RESULT_DIR            ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicout_temp/vicout_',num2str(i)]);
            elseif strcmp(param_type,'N_OUTFILES')
                % Do nothing
            elseif strcmp(param_type,'OUTFILE')
                % Do nothing
            elseif strcmp(param_type,'OUTVAR')
                % Do nothing
            elseif strcmp(param_type,'MAX_SNOW_TEMP') && handles.checkbox_calibrated_snowtemp.Value
                [~, where_in_calparlist] = ismember('max_snow_temp',calpar_list);
                pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
                fprintf(fid_write,'%s\n',['MAX_SNOW_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
            elseif strcmp(param_type,'MIN_RAIN_TEMP') && handles.checkbox_calibrated_raintemp.Value
                [~, where_in_calparlist] = ismember('min_rain_temp',calpar_list);
                pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
                fprintf(fid_write,'%s\n',['MIN_RAIN_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
            else
                fprintf(fid_write,'%s',content_line);
            end
            
            if strcmp(param_type,'MAX_SNOW_TEMP'); MAX_SNOW_TEMP_defined = 1; end
            if strcmp(param_type,'MIN_RAIN_TEMP'); MIN_RAIN_TEMP_defined = 1; end
            
        end
        
        fprintf(fid_write,'%s\n','N_OUTFILES     1');
        fprintf(fid_write,'%s\n','OUTFILE        vic     3');
        fprintf(fid_write,'%s\n','OUTVAR         OUT_PREC');
        fprintf(fid_write,'%s\n','OUTVAR         OUT_RUNOFF');
        fprintf(fid_write,'%s\n','OUTVAR         OUT_BASEFLOW');
        
        if handles.checkbox_calibrated_snowtemp.Value && ~MAX_SNOW_TEMP_defined
            [~, where_in_calparlist] = ismember('max_snow_temp',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            fprintf(fid_write,'%s\n',['MAX_SNOW_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
        end
        if handles.checkbox_calibrated_raintemp.Value && ~MIN_RAIN_TEMP_defined
            [~, where_in_calparlist] = ismember('min_rain_temp',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            fprintf(fid_write,'%s\n',['MIN_RAIN_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
        end
        
        fclose(fid_write);
        frewind(fid);
        
    end
    fclose(fid);
    
    
    % Generate temporal soil parameter files
    for i = 1:PopSize
        fid = fopen([handles.edit_vicgastofile.String,'\soilparamfile_temp\soilpar_',num2str(i),'.txt'],'w');
        soilpar_content_new = soilpar_content;
        
        if handles.checkbox_calibrated_infilt.Value
            [~, where_in_calparlist] = ismember('infilt',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            soilpar_content_new(:,5) = pararray_in_iniparpopset;
        end
        if handles.checkbox_calibrated_Ds.Value
            [~, where_in_calparlist] = ismember('Ds',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            soilpar_content_new(:,6) = pararray_in_iniparpopset;
        end
        if handles.checkbox_calibrated_Dsmax.Value
            [~, where_in_calparlist] = ismember('Dsmax',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            soilpar_content_new(:,7) = pararray_in_iniparpopset;
        end
        if handles.checkbox_calibrated_Ws.Value
            [~, where_in_calparlist] = ismember('Ws',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            soilpar_content_new(:,8) = pararray_in_iniparpopset;
        end
        if handles.checkbox_calibrated_c.Value
            [~, where_in_calparlist] = ismember('c',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            soilpar_content_new(:,9) = pararray_in_iniparpopset;
        end
        if handles.checkbox_calibrated_depth1.Value
            [~, where_in_calparlist] = ismember('depth1',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            soilpar_content_new(:,23) = pararray_in_iniparpopset;
        end
        if handles.checkbox_calibrated_depth2.Value
            [~, where_in_calparlist] = ismember('depth2',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            soilpar_content_new(:,24) = pararray_in_iniparpopset;
        end
        if handles.checkbox_calibrated_depth3.Value
            [~, where_in_calparlist] = ismember('depth3',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            soilpar_content_new(:,25) = pararray_in_iniparpopset;
        end
        if handles.checkbox_calibrated_snowrough.Value
            [~, where_in_calparlist] = ismember('snow_rough',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            soilpar_content_new(:,48) = pararray_in_iniparpopset;
        end
        
        fprintf(fid,saveformat_soilfile,soilpar_content_new');
        fclose(fid);
    end
    
    
    % Generate temporal routing parameter files
    for i = 1:PopSize
        routpar_content_new = routpar_content;
        
        fid = fopen([handles.edit_vicgastofile.String,'\routparamfile_temp\routpar_',num2str(i),'.txt'],'w');
        if handles.checkbox_calibrated_N.Value
            [~, where_in_calparlist] = ismember('N',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            routpar_content_new(:,5) = pararray_in_iniparpopset;
        end
        if handles.checkbox_calibrated_K.Value
            [~, where_in_calparlist] = ismember('K',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            routpar_content_new(:,6) = pararray_in_iniparpopset;
        end
        if handles.checkbox_calibrated_Velo.Value
            [~, where_in_calparlist] = ismember('Velo',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            routpar_content_new(:,7) = pararray_in_iniparpopset;
        end
        if handles.checkbox_calibrated_Diff.Value
            [~, where_in_calparlist] = ismember('Diff',calpar_list);
            pararray_in_iniparpopset = nextPopulation((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            routpar_content_new(:,8) = pararray_in_iniparpopset;
        end
        fprintf(fid,saveformat_routfile,routpar_content_new');
        fclose(fid);
        
    end
    
    tic;
    % Function Evaluation for next generation
    funcscore_pool = nan(PopSize,poolsize);
    parfor p = 1:PopSize
        
        funcscore_single = nan(1,poolsize);
        
        % RUN VIC FOR ENTIRE MODELING DOMAIN
        whereglobalfile = [vicga_savefolder,'/globalparamfile_temp/globalparam_',num2str(p),'.txt'];
        if IsVIC5
            system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vic_classic.exe -g ',whereglobalfile,'''']);
        else
            system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'''']);
        end
%         [~,~] = system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'''']);
        
        
        
        % RUN ROUTING MODEL FOR OUTLET
        routpar_outlet = load([vicga_savefolder,'/routparamfile_temp/routpar_',num2str(p),'.txt']);
        [~,outlet_ind] = min(routpar_outlet(:,4));
        FLOW_tot = zeros(numsimday,1);
        FLOW_base = zeros(numsimday,1);
        for n = 1:size(routpar_outlet,1)
            
            grid_vicout = load([vicga_savefolder,'/vicout_temp/vicout_',num2str(p),'/vic_',num2str(routpar_outlet(n,1),['%1.',grid_decimal,'f']),'_',num2str(routpar_outlet(n,2),['%1.',grid_decimal,'f'])]);
            if out_step < 24
                inflow_direct = grpstats(grid_vicout(:,6),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                inflow_base = grpstats(grid_vicout(:,7),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
            else
                inflow_direct = grid_vicout(:,5);
                inflow_base = grid_vicout(:,6);
            end
            
            flowlen = routpar_outlet(n,4);
            route_par = [routpar_outlet(n,5),routpar_outlet(n,6),routpar_outlet(n,7),routpar_outlet(n,8)];
            if n == outlet_ind
                isOutlet = 1;
            else
                isOutlet = 0;
            end
            [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
            FLOW_tot = FLOW_tot + runoff*routpar_outlet(n,3)/sum(routpar_outlet(:,3));
            FLOW_base = FLOW_base + baseflow*routpar_outlet(n,3)/sum(routpar_outlet(:,3));
            
        end
        
        % Calculate error at the outlet
        strind = find(sim_datemat(:,1) == poolcal_datemat(1,1) & sim_datemat(:,2) == poolcal_datemat(1,2) & sim_datemat(:,3) == poolcal_datemat(1,3));
        endind = find(sim_datemat(:,1) == poolcal_datemat(1,4) & sim_datemat(:,2) == poolcal_datemat(1,5) & sim_datemat(:,3) == poolcal_datemat(1,6));
        sim_datemat_calper = sim_datemat(strind:endind,:);
        FLOW_tot_calper_day = FLOW_tot(strind:endind);
        FLOW_tot_calper_mon = grpstats(FLOW_tot_calper_day,{sim_datemat_calper(:,1),sim_datemat_calper(:,2)},'sum');
        
        
        obsflow_outlet = load(pool_obsflow_file{1});
        if strcmp(poolcal_timestep{1,1},'day')
            strind = find(obsflow_outlet(:,1) == poolcal_datemat(1,1) & obsflow_outlet(:,2) == poolcal_datemat(1,2) & obsflow_outlet(:,3) == poolcal_datemat(1,3));
            endind = find(obsflow_outlet(:,1) == poolcal_datemat(1,4) & obsflow_outlet(:,2) == poolcal_datemat(1,5) & obsflow_outlet(:,3) == poolcal_datemat(1,6));
            obsflow_outlet_calper_day = obsflow_outlet(strind:endind,end);
            
            obsflow_outlet_calper_day(obsflow_outlet_calper_day<0) = -9999999999;
            obsflow_outlet_calper_mon = grpstats(obsflow_outlet_calper_day,{obsflow_outlet(strind:endind,1),obsflow_outlet(strind:endind,2)},'sum');
            
        else
            strind = find(obsflow_outlet(:,1) == poolcal_datemat(1,1) & obsflow_outlet(:,2) == poolcal_datemat(1,2));
            endind = find(obsflow_outlet(:,1) == poolcal_datemat(1,4) & obsflow_outlet(:,2) == poolcal_datemat(1,5));
            obsflow_outlet_calper_mon = obsflow_outlet(strind:endind,end);
            
            obsflow_outlet_calper_day = [];
            
        end
        
        fitfuncval_outlet = 0;
        switch fitnessfunc
            
            case 'NSE'
                
                if strcmp(poolcal_timestep{1,2},'day')
                    FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_outlet_calper_day>=0);
                    obsflow_outlet_calper_day_valid = obsflow_outlet_calper_day(obsflow_outlet_calper_day>=0);
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_day_valid-obsflow_outlet_calper_day_valid).^2)/var(obsflow_outlet_calper_day_valid,1);
               
                elseif strcmp(poolcal_timestep{1,2},'month')
                    FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_outlet_calper_mon>=0);
                    obsflow_outlet_calper_mon_valid = obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>=0);
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_mon_valid-obsflow_outlet_calper_mon_valid).^2)/var(obsflow_outlet_calper_mon_valid,1);
           
                end
                
            case 'KGE'
                
                if strcmp(poolcal_timestep{1,2},'day')
                    FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_outlet_calper_day>=0);
                    obsflow_outlet_calper_day_valid = obsflow_outlet_calper_day(obsflow_outlet_calper_day>=0);
                    mean_ratio = mean(FLOW_tot_calper_day_valid)/mean(obsflow_outlet_calper_day_valid);
                    std_ratio = std(FLOW_tot_calper_day_valid,1)/std(obsflow_outlet_calper_day_valid,1);
                    lincorr = corr(FLOW_tot_calper_day_valid,obsflow_outlet_calper_day_valid);
                    fitfuncval_outlet = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);
  
                elseif strcmp(poolcal_timestep{1,2},'month')
                    FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_outlet_calper_mon>=0);
                    obsflow_outlet_calper_mon_valid = obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>=0);
                    mean_ratio = mean(FLOW_tot_calper_mon_valid)/mean(obsflow_outlet_calper_mon_valid);
                    std_ratio = std(FLOW_tot_calper_mon_valid,1)/std(obsflow_outlet_calper_mon_valid,1);
                    lincorr = corr(FLOW_tot_calper_mon_valid,obsflow_outlet_calper_mon_valid);
                    fitfuncval_outlet = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);
           
                end
                
            case 'logNSE'
                
                if strcmp(poolcal_timestep{1,2},'day')
                    FLOW_tot_calper_day_valid = log(FLOW_tot_calper_day(obsflow_outlet_calper_day>0 & FLOW_tot_calper_day>0));
                    obsflow_outlet_calper_day_valid = log(obsflow_outlet_calper_day(obsflow_outlet_calper_day>0 & FLOW_tot_calper_day>0));
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_day_valid-obsflow_outlet_calper_day_valid).^2)/var(obsflow_outlet_calper_day_valid,1);
             
                elseif strcmp(poolcal_timestep{1,2},'month')
                    FLOW_tot_calper_mon_valid = log(FLOW_tot_calper_mon(obsflow_outlet_calper_mon>0 & FLOW_tot_calper_mon>0));
                    obsflow_outlet_calper_mon_valid = log(obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>0 & FLOW_tot_calper_mon>0));
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_mon_valid-obsflow_outlet_calper_mon_valid).^2)/var(obsflow_outlet_calper_mon_valid,1);
         
                end
                
        end
        funcscore_single(1) = fitfuncval_outlet;
        
        
        % Save simulated outlet streamflow
        savedata = [sim_datemat,FLOW_tot];
        fid = fopen([vicga_savefolder,'/routout_temp/simflow_outlet_',num2str(p),'.txt'],'w');
        fprintf(fid,'%d\t%d\t%d\t%1.8f\n',savedata');
        fclose(fid);
        
        
        % RUN ROUTING MODEL FOR INTERIOR BASINS
        for isub = 1:poolsize-1
            
            routpar_sub = load(pool_subrout_file{isub});
            routpar_sub_new = routpar_sub;
            for n = 1:size(routpar_sub,1)
                routpar_sub_new(n,5:8) = routpar_outlet(routpar_outlet(:,1) == routpar_sub(n,1) & routpar_outlet(:,2) == routpar_sub(n,2),5:8);
            end
            [~,outlet_ind] = min(routpar_sub_new(:,4));
            
            FLOW_tot = zeros(numsimday,1);
            FLOW_base = zeros(numsimday,1);
            for n = 1:size(routpar_sub_new,1)
                
                grid_vicout = load([vicga_savefolder,'/vicout_temp/vicout_',num2str(p),'/vic_',num2str(routpar_sub_new(n,1),['%1.',grid_decimal,'f']),'_',num2str(routpar_sub_new(n,2),['%1.',grid_decimal,'f'])]);
                if out_step < 24
                    inflow_direct = grpstats(grid_vicout(:,6),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                    inflow_base = grpstats(grid_vicout(:,7),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                else
                    inflow_direct = grid_vicout(:,5);
                    inflow_base = grid_vicout(:,6);
                end
                
                flowlen = routpar_sub_new(n,4);
                route_par = [routpar_sub_new(n,5),routpar_sub_new(n,6),routpar_sub_new(n,7),routpar_sub_new(n,8)];
                if n == outlet_ind
                    isOutlet = 1;
                else
                    isOutlet = 0;
                end
                [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
                FLOW_tot = FLOW_tot + runoff*routpar_sub_new(n,3)/sum(routpar_sub_new(:,3));
                FLOW_base = FLOW_base + baseflow*routpar_sub_new(n,3)/sum(routpar_sub_new(:,3));
                
            end
            
            % Calculate error at sub-basin
            strind = find(sim_datemat(:,1) == poolcal_datemat(isub+1,1) & sim_datemat(:,2) == poolcal_datemat(isub+1,2) & sim_datemat(:,3) == poolcal_datemat(isub+1,3));
            endind = find(sim_datemat(:,1) == poolcal_datemat(isub+1,4) & sim_datemat(:,2) == poolcal_datemat(isub+1,5) & sim_datemat(:,3) == poolcal_datemat(isub+1,6));
            sim_datemat_calper = sim_datemat(strind:endind,:);
            FLOW_tot_calper_day = FLOW_tot(strind:endind);
            FLOW_tot_calper_mon = grpstats(FLOW_tot_calper_day,{sim_datemat_calper(:,1),sim_datemat_calper(:,2)},'sum');
            
            
            obsflow_sub = load(pool_obsflow_file{isub+1});
            if strcmp(poolcal_timestep{1,1},'day')
                strind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,1) & obsflow_sub(:,2) == poolcal_datemat(isub+1,2) & obsflow_sub(:,3) == poolcal_datemat(isub+1,3));
                endind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,4) & obsflow_sub(:,2) == poolcal_datemat(isub+1,5) & obsflow_sub(:,3) == poolcal_datemat(isub+1,6));
                obsflow_sub_calper_day = obsflow_sub(strind:endind,end);
                
                obsflow_sub_calper_day(obsflow_sub_calper_day<0) = -9999999999;
                obsflow_sub_calper_mon = grpstats(obsflow_sub_calper_day,{obsflow_sub(strind:endind,1),obsflow_sub(strind:endind,2)},'sum');
                
            else
                strind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,1) & obsflow_sub(:,2) == poolcal_datemat(isub+1,2));
                endind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,4) & obsflow_sub(:,2) == poolcal_datemat(isub+1,5));
                obsflow_sub_calper_mon = obsflow_sub(strind:endind,end);
                
                obsflow_sub_calper_day = [];
                
            end
            
            
            fitfuncval_sub = 0;
            switch fitnessfunc
                
                case 'NSE'
                    
                    if strcmp(poolcal_timestep{isub+1,2},'day')
                        FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_sub_calper_day>=0);
                        obsflow_sub_calper_day_valid = obsflow_sub_calper_day(obsflow_sub_calper_day>=0);
                        fitfuncval_sub = 1-mean((FLOW_tot_calper_day_valid-obsflow_sub_calper_day_valid).^2)/var(obsflow_sub_calper_day_valid,1);
                        
                    elseif strcmp(poolcal_timestep{isub+1,2},'month')
                        FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_sub_calper_mon>=0);
                        obsflow_sub_calper_mon_valid = obsflow_sub_calper_mon(obsflow_sub_calper_mon>=0);
                        fitfuncval_sub = 1-mean((FLOW_tot_calper_mon_valid-obsflow_sub_calper_mon_valid).^2)/var(obsflow_sub_calper_mon_valid,1);
                        
                    end
                    
                case 'KGE'
                    
                    if strcmp(poolcal_timestep{isub+1,2},'day')
                        FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_sub_calper_day>=0);
                        obsflow_sub_calper_day_valid = obsflow_sub_calper_day(obsflow_sub_calper_day>=0);
                        mean_ratio = mean(FLOW_tot_calper_day_valid)/mean(obsflow_sub_calper_day_valid);
                        std_ratio = std(FLOW_tot_calper_day_valid,1)/std(obsflow_sub_calper_day_valid,1);
                        lincorr = corr(FLOW_tot_calper_day_valid,obsflow_sub_calper_day_valid);
                        fitfuncval_sub = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);
                        
                    elseif strcmp(poolcal_timestep{isub+1,2},'month')
                        FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_sub_calper_mon>=0);
                        obsflow_sub_calper_mon_valid = obsflow_sub_calper_mon(obsflow_sub_calper_mon>=0);
                        mean_ratio = mean(FLOW_tot_calper_mon_valid)/mean(obsflow_sub_calper_mon_valid);
                        std_ratio = std(FLOW_tot_calper_mon_valid,1)/std(obsflow_sub_calper_mon_valid,1);
                        lincorr = corr(FLOW_tot_calper_mon_valid,obsflow_sub_calper_mon_valid);
                        fitfuncval_sub = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);
                        
                    end
                    
                case 'logNSE'
                    
                    if strcmp(poolcal_timestep{1,2},'day')
                        FLOW_tot_calper_day_valid = log(FLOW_tot_calper_day(obsflow_sub_calper_day>0 & FLOW_tot_calper_day>0));
                        obsflow_sub_calper_day_valid = log(obsflow_sub_calper_day(obsflow_sub_calper_day>0 & FLOW_tot_calper_day>0));
                        fitfuncval_sub = 1-mean((FLOW_tot_calper_day_valid-obsflow_sub_calper_day_valid).^2)/var(obsflow_sub_calper_day_valid,1);
                        
                    elseif strcmp(poolcal_timestep{1,2},'month')
                        FLOW_tot_calper_mon_valid = log(FLOW_tot_calper_mon(obsflow_sub_calper_mon>0 & FLOW_tot_calper_mon>0));
                        obsflow_sub_calper_mon_valid = log(obsflow_sub_calper_mon(obsflow_sub_calper_mon>0 & FLOW_tot_calper_mon>0));
                        fitfuncval_sub = 1-mean((FLOW_tot_calper_mon_valid-obsflow_sub_calper_mon_valid).^2)/var(obsflow_sub_calper_mon_valid,1);
                        
                    end
                    
            end
            funcscore_single(isub+1) = fitfuncval_sub;
            
            % Save simulated outlet streamflow
            savedata = [sim_datemat,FLOW_tot];
            fid = fopen([vicga_savefolder,'/routout_temp/simflow_sub',num2str(isub),'_',num2str(p),'.txt'],'w');
            fprintf(fid,'%d\t%d\t%d\t%1.8f\n',savedata');
            fclose(fid);
            
        end
        
        funcscore_pool(p,:) = funcscore_single;
        
    end
    funcscore = mean(-funcscore_pool,2);
    elapse_t = toc;
       
 
    % Update
    thisPopulation = nextPopulation;
    thisScore      = funcscore;
    
    % Remember the best score   
    funcscore_mean_all(generation+1) = mean(funcscore);
    [funcscore_best_all(generation+1),minind] = min(funcscore);
    funcscore_poolbest_all(generation+1,:) = funcscore_pool(minind,:);
    
    
    % Save the optimal calibration
    copyfile([handles.edit_vicgastofile.String,'\vicout_temp\vicout_',num2str(minind)],[handles.edit_vicgastofile.String,'\vicga_opt\vicout_opt'])
    
    copyfile([handles.edit_vicgastofile.String,'\routout_temp\simflow_outlet_',num2str(minind),'.txt'],[handles.edit_vicgastofile.String,'\vicga_opt\simflow_outlet_opt.txt'])
    for i = 1:poolsize-1
        copyfile([handles.edit_vicgastofile.String,'\routout_temp\simflow_sub',num2str(i),'_',num2str(minind),'.txt'],[handles.edit_vicgastofile.String,'\vicga_opt\simflow_sub',num2str(i),'_opt.txt'])
    end
    
    copyfile([handles.edit_vicgastofile.String,'\soilparamfile_temp\soilpar_',num2str(minind),'.txt'],[handles.edit_vicgastofile.String,'\vicga_opt\soilpar_outlet_opt.txt'])
    copyfile([handles.edit_vicgastofile.String,'\routparamfile_temp\routpar_',num2str(minind),'.txt'],[handles.edit_vicgastofile.String,'\vicga_opt\routpar_outlet_opt.txt'])
    soilpar_outlet_opt = load([handles.edit_vicgastofile.String,'\soilparamfile_temp\soilpar_',num2str(minind),'.txt']);
    routpar_outlet_opt = load([handles.edit_vicgastofile.String,'\routparamfile_temp\routpar_',num2str(minind),'.txt']);
    for i = 1:poolsize-1
        routpar_sub = load(pool_subrout_file{i});
        soilpar_sub = nan(size(routpar_sub,1),size(soilpar_outlet_opt,2));
        for n = 1:size(routpar_sub,1)
            routpar_sub(n,5:8) = routpar_outlet_opt(routpar_outlet_opt(:,1) == routpar_sub(n,1) & routpar_outlet_opt(:,2) == routpar_sub(n,2),5:8);
            soilpar_sub(n,:) = soilpar_outlet_opt(soilpar_outlet_opt(:,3) == routpar_sub(n,1) & soilpar_outlet_opt(:,4) == routpar_sub(n,2),:);
        end
        fid = fopen([handles.edit_vicgastofile.String,'\vicga_opt\soilpar_sub',num2str(i),'_opt.txt'],'w');
        fprintf(fid,saveformat_soilfile,soilpar_sub');
        fclose(fid);
        
        fid = fopen([handles.edit_vicgastofile.String,'\vicga_opt\routpar_sub',num2str(i),'_opt.txt'],'w');
        fprintf(fid,saveformat_routfile,routpar_sub');
        fclose(fid);
    end
    
    fid = fopen([handles.edit_vicgastofile.String,'\globalparamfile_temp\globalparam_',num2str(minind),'.txt'],'r');
    fid_write = fopen([handles.edit_vicgastofile.String,'\vicga_opt\globalpar_outlet_opt.txt'],'w');
    while ~feof(fid)
        content_line = fgets(fid);
        param_type = sscanf(content_line,'%s',1);
        if strcmp(param_type,'SOIL')
            fprintf(fid_write,'%s\n',['SOIL                  ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/soilpar_outlet_opt.txt']);
        elseif strcmp(param_type,'ROUTE')
            fprintf(fid_write,'%s\n',['ROUTE                 ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/routpar_outlet_opt.txt']);
        elseif strcmp(param_type,'ROUTE_OUTFILE')
            fprintf(fid_write,'%s\n',['ROUTE_OUTFILE         ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/simflow_outlet_opt.txt']);
        elseif strcmp(param_type,'RESULT_DIR')
            fprintf(fid_write,'%s\n',['RESULT_DIR            ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicga_opt/vicout_opt']);
        else
            fprintf(fid_write,'%s',content_line);
        end
        
    end
    fclose(fid_write);
    fclose(fid);
 
    
    
    axes(handles.axes_ga_status)
    if -mean(funcscore) < fitfuncval_yaxis_lowest
        fitfuncval_yaxis_lowest = -mean(funcscore);
    end
    h = plot((0:1:generation),-funcscore_mean_all(1:generation+1),'bs',(0:1:generation),-funcscore_best_all(1:generation+1),'r*');
    h(1).MarkerFaceColor = 'b';     h(1).MarkerSize = 5;
    h(2).MarkerFaceColor = 'r';     h(2).MarkerSize = 5;
    set(gca,'xlim',[0,GenSize],'ylim',[fitfuncval_yaxis_lowest,1])
    xlabel('Generation','fontsize',10); ylabel('NSE','fontsize',10)
    legend('Pop Avg','Pop Best','orientation','horizontal','location','NE')
    title(['Best ',fitnessfunc,': ',num2str(max(-funcscore_best_all(1:generation+1)),'%1.2f'),' & Avg NSE: ',num2str(-funcscore_mean_all(generation+1),'%1.2f'),' at Generation ',num2str(generation,'%d')])
    grid on;
    
    % state file update
    fid = fopen ([handles.edit_vicgastofile.String,'\vicga_state'],'a');
    fprintf(fid,'%10.0f     |%13.6f     |%12.6f      |     %1.0f\n',generation,-funcscore_best_all(generation+1),-funcscore_mean_all(generation+1),elapse_t);
    fclose(fid);
    
    if poolsize > 1
        axes(handles.axes_ga_status_subbasin)
        if min(funcscore_pool(minind,:)) < fitfuncval_yaxis_lowest2
            fitfuncval_yaxis_lowest2 = min(funcscore_pool(minind,:));
        end
        plot((0:1:generation),funcscore_poolbest_all(1:generation+1,1),'o','color',randcolor(1,:),'markerfacecolor',randcolor(1,:),'markersize',5); hold on;
        for i = 1:poolsize
            eval(['plot((0:1:generation),funcscore_poolbest_all(1:generation+1,',num2str(i),'),''o'',''color'',randcolor(',num2str(i),',:),''markerfacecolor'',randcolor(',num2str(i),',:),''markersize'',5);'])
            hold on;
        end
        set(gca,'xlim',[0,GenSize],'ylim',[fitfuncval_yaxis_lowest2,1])
        xlabel('Generation','fontsize',10); ylabel('NSE at Sub-basins','fontsize',10)
        legend(legend_str,'orientation','horizontal','location','NE')
        grid on;
    end
    
    pause(1)
    
        
    
    %%%%%%%%%%%%%%%%%%%%%%%%% IS IT TIME TO STOP? %%%%%%%%%%%%%%%%%%%%%%%%% 
    funChange = Inf;

    % Window used to get best fval
    Window = StallGenLimit;
    Weight = 0.5;
    % Compute change in fval and individuals in last 'Window' generations
    if generation > Window
        Bestfvals =  funcscore_best_all((generation-Window):generation);
        funChange = 0;
        for i = 1:Window
            funChange = funChange + Weight^(Window-i)*(abs(Bestfvals(i+1) - Bestfvals(i))/(abs(Bestfvals(i))+1));
        end
        % Take an average of function value change
        funChange = funChange/Window;
    end
    
    if(generation >= GenSize)
        disp('Optimization terminated: maximum number of generations exceeded.');
        exitFlag = 1;
    elseif funChange <= TolFun
        disp('Optimization terminated: average change in the fitness value less than TolFun.');
        exitFlag = 2;
    end
    
    if get(handles.pushbutton_CAL_TERMINATE,'userdata') == 1
        disp('Optimization terminated by user.');
        exitFlag = 3;
        set(handles.pushbutton_CAL_TERMINATE,'userdata',0)
    end
       
end

set(handles.pushbutton_CAL_TERMINATE,'string','TERMINATE','foregroundcolor','k','enable','off')

myicon(:,:,1) = [0 1; 0 1];
myicon(:,:,2) = [.8 1; 0 .3];
myicon(:,:,3) = [.3 0; .9 .5];   
if exitFlag == 1
    msgbox('Optimization terminated: maximum number of generations exceeded','GA TERMINATION INFO','custom',myicon);
elseif exitFlag==2
    msgbox('Optimization terminated: average change in the fitness value less than TolFun','GA TERMINATION INFO','custom',myicon);
elseif exitFlag==3
    msgbox('Optimization terminated by user','GA TERMINATION INFO','custom',myicon);
end


% Closing state file
fid = fopen ([handles.edit_vicgastofile.String,'\vicga_state'],'a');
if poolsize > 1
    fprintf(fid,'\n');
    fprintf(fid,'\n');
    fprintf(fid,'                            GA EVOLUTION FOR POOLED STREAM GAUGES\n');
    fprintf(fid,'-----------------------------------------------------------------------------------------------\n');
    content_label = 'Generation | OUTLET       ';
    content_format = '%10.0f |%13.6f ';
    for i = 1:poolsize-1
        content_label = [content_label,'| SUB',num2str(i),'         '];
        content_format = [content_format,'|%13.6f '];
    end
    content_stored = [(0:size(funcscore_poolbest_all,1)-1)',funcscore_poolbest_all];
    fprintf(fid,'%s\n',content_label);
    fprintf(fid,[content_format,'\n'],content_stored');
end
fprintf(fid,'\n');
fprintf(fid,'\n');
fprintf(fid,'                                  GA TERMINATION INFO\n');
fprintf(fid,'-----------------------------------------------------------------------------------------------\n');
if exitFlag == 1
    fprintf(fid,'Optimization terminated: maximum number of generations exceeded\n');
elseif exitFlag==2
    fprintf(fid,'Optimization terminated: average change in the fitness value less than TolFun\n');
elseif exitFlag==3
    fprintf(fid,'Optimization terminated by user\n');
end
[~,bestind] = min(funcscore_best_all);
fprintf(fid,'The Optimum NSE found at generation %d : %1.6f\n',bestind-1,-funcscore_best_all(bestind));
fclose(fid);


% --- Executes on button press in pushbutton_CAL_TERMINATE.
function pushbutton_CAL_TERMINATE_Callback(hObject, eventdata, handles)
set(handles.pushbutton_CAL_TERMINATE,'userdata',1)
set(hObject,'string','TERMINATING ...','foregroundcolor','r')



function edit_Metrics_calculation_val_Callback(hObject, eventdata, handles)
% hObject    handle to edit_Metrics_calculation_val (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_Metrics_calculation_val as text
%        str2double(get(hObject,'String')) returns contents of edit_Metrics_calculation_val as a double


% --- Executes during object creation, after setting all properties.
function edit_Metrics_calculation_val_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_Metrics_calculation_val (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton_undock_fig.
function pushbutton_undock_fig_Callback(hObject, eventdata, handles)

figure
set(gcf,'units','normalized','outerposition',[0 0.25 1 0.45])
   
content = handles.popupmenu_StreamPlot_timestep.String;
if strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Daily')
    
    obsflow = load(handles.edit_ObsFlowFile.String);
    datemat_day_obs = obsflow(:,1:3);
    obsflow = obsflow(:,end);
    obsflow(obsflow<0) = nan;
    x_obs = (datenum(datemat_day_obs(1,:)):datenum(datemat_day_obs(end,:)));   
      
    fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
    while ~feof(fileID)
        paraminfo = fgetl(fileID);
        comment_char = strfind(paraminfo,'#');
        if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
        
        if ~isempty(paraminfo)
            linecontent = textscan(paraminfo,'%s');
            if ~isempty(linecontent{1})
                if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                    routoutfile = linecontent{1}{2};
                    break;
                end
            end
            
        end
    end
    fclose(fileID);
    
    simflow = load(routoutfile);
    
    syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
    smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
    sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
    eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
    emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
    eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
    
    sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
    eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
    simflow_calper = simflow(sind_calper:eind_calper,end);
    datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
    
    obs_overlap_calper = nan(size(datemat_day_calper,1),1);
    for i = 1:length(obs_overlap_calper)
        obs_overlap_calper(i) = obsflow(datemat_day_obs(:,1)==datemat_day_calper(i,1) & datemat_day_obs(:,2)==datemat_day_calper(i,2) & datemat_day_obs(:,3)==datemat_day_calper(i,3));
    end
    x = (datenum([syr_calper,smon_calper,sday_calper]):datenum([eyr_calper,emon_calper,eday_calper]));
    
    
    if handles.radiobutton_simplot_secondperiod.Value
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        obs_overlap_valper = nan(size(datemat_day_valper,1),1);
        for i = 1:length(obs_overlap_valper)
            obs_overlap_valper(i) = obsflow(datemat_day_obs(:,1)==datemat_day_valper(i,1) & datemat_day_obs(:,2)==datemat_day_valper(i,2) & datemat_day_obs(:,3)==datemat_day_valper(i,3));
        end
        x_val = (datenum([syr_valper,smon_valper,sday_valper]):datenum([eyr_valper,emon_valper,eday_valper]));
    end
    
    
    if handles.radiobutton_simplot_secondperiod.Value
        h_sp1 = subplot(1,4,1:3);
        plot(x_obs,obsflow,'k.','markersize',12); hold on;
        plot(x,simflow_calper,'b','linewidth',1.5); hold on;
        plot(x_val,simflow_valper,'r','linewidth',1.5); hold on;
        datetick('x')
        xlabel('Year','fontsize',12)
        ylabel('Discharge, Q [mm]','fontsize',12)
        xlim([min(x(1),x_val(1)),max(x(end),x_val(end))])
        lh = legend('OBS','SIM\_1st','SIM\_2nd','orientation','horizontal','location','NE'); set(lh,'fontsize',12)       
        
        h_sp2 = subplot(1,4,4);
        h_p1 = plot(simflow_calper,obs_overlap_calper,'b.','markersize',12); hold on;
        h_p2 = plot(simflow_valper,obs_overlap_valper,'r.','markersize',12); hold on;
        xlim([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))])
        ylim([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))])
        plot([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))],[min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))],'k-')
        xlabel('Simulated Q [mm]','fontsize',12)
        ylabel('Observed Q [mm]','fontsize',12)
        lh = legend([h_p1,h_p2],'1st','2nd','location','NW'); set(lh,'fontsize',12)
        
        set(h_sp1,'position',[0.05, h_sp2.Position(2),0.70,h_sp2.Position(4)])
        set(h_sp2,'position',[0.8150, h_sp2.Position(2),h_sp2.Position(3),h_sp2.Position(4)])

    else
        h_sp1 = subplot(1,4,1:3);
        plot(x_obs,obsflow,'k.','markersize',12); hold on;
        plot(x,simflow_calper,'b','linewidth',1.5); hold on;
        datetick('x')
        xlabel('Year','fontsize',12)
        ylabel('Discharge, Q [mm]','fontsize',12)
        xlim([x(1),x(end)])
        lh = legend('OBS','SIM\_1st','orientation','horizontal','location','NE'); set(lh,'fontsize',12)
        
        h_sp2 = subplot(1,4,4);
        h_p1 = plot(simflow_calper,obs_overlap_calper,'b.','markersize',12); hold on;
        xlim([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))])
        ylim([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))])
        plot([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))],[min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))],'k-')
        xlabel('Simulated Q [mm]','fontsize',12)
        ylabel('Observed Q [mm]','fontsize',12)
        lh = legend(h_p1,'1st','location','NW'); set(lh,'fontsize',12)
        
        set(h_sp1,'position',[0.05, h_sp2.Position(2),0.70,h_sp2.Position(4)])
        set(h_sp2,'position',[0.8150, h_sp2.Position(2),h_sp2.Position(3),h_sp2.Position(4)])
    end
    

    
elseif strcmp(content{handles.popupmenu_StreamPlot_timestep.Value},'Monthly')
    
       
    fileID = fopen(handles.edit_VICglobalconfigfile.String,'r');
    while ~feof(fileID)
        paraminfo = fgetl(fileID);
        comment_char = strfind(paraminfo,'#');
        if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
        
        if ~isempty(paraminfo)
            linecontent = textscan(paraminfo,'%s');
            if ~isempty(linecontent{1})
                if strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                    routoutfile = linecontent{1}{2};
                    break;
                end
            end
            
        end
    end
    fclose(fileID);
    simflow = load(routoutfile);
    %             datemat_day = simflow(:,1:3);
    
    syr_calper = str2double(handles.popupmenu_firstper_syr.String{handles.popupmenu_firstper_syr.Value});
    smon_calper = str2double(handles.popupmenu_firstper_smon.String{handles.popupmenu_firstper_smon.Value});
    sday_calper = str2double(handles.popupmenu_firstper_sday.String{handles.popupmenu_firstper_sday.Value});
    eyr_calper = str2double(handles.popupmenu_firstper_eyr.String{handles.popupmenu_firstper_eyr.Value});
    emon_calper = str2double(handles.popupmenu_firstper_emon.String{handles.popupmenu_firstper_emon.Value});
    eday_calper = str2double(handles.popupmenu_firstper_eday.String{handles.popupmenu_firstper_eday.Value});
    
    sind_calper = find(simflow(:,1)==syr_calper & simflow(:,2)==smon_calper & simflow(:,3)==sday_calper);
    eind_calper = find(simflow(:,1)==eyr_calper & simflow(:,2)==emon_calper & simflow(:,3)==eday_calper);
    simflow_calper = simflow(sind_calper:eind_calper,end);
    datemat_day_calper = simflow(sind_calper:eind_calper,1:3);
    
    datemat_month_calper = unique(datemat_day_calper(:,1:2),'rows','stable');
    x = nan(size(datemat_month_calper,1),1);
    for i = 1:size(datemat_month_calper,1)
        x(i) = datenum([datemat_month_calper(i,:),1]);
    end
    simflow_calper_mon = grpstats(simflow_calper,{datemat_day_calper(:,1),datemat_day_calper(:,2)},'sum');
    
 
    
    
    if handles.radiobutton_simplot_secondperiod.Value
        syr_valper = str2double(handles.popupmenu_secondper_syr.String{handles.popupmenu_secondper_syr.Value});
        smon_valper = str2double(handles.popupmenu_secondper_smon.String{handles.popupmenu_secondper_smon.Value});
        sday_valper = str2double(handles.popupmenu_secondper_sday.String{handles.popupmenu_secondper_sday.Value});
        eyr_valper = str2double(handles.popupmenu_secondper_eyr.String{handles.popupmenu_secondper_eyr.Value});
        emon_valper = str2double(handles.popupmenu_secondper_emon.String{handles.popupmenu_secondper_emon.Value});
        eday_valper = str2double(handles.popupmenu_secondper_eday.String{handles.popupmenu_secondper_eday.Value});
        
        sind_valper = find(simflow(:,1)==syr_valper & simflow(:,2)==smon_valper & simflow(:,3)==sday_valper);
        eind_valper = find(simflow(:,1)==eyr_valper & simflow(:,2)==emon_valper & simflow(:,3)==eday_valper);
        simflow_valper = simflow(sind_valper:eind_valper,end);
        datemat_day_valper = simflow(sind_valper:eind_valper,1:3);
        
        datemat_month_valper = unique(datemat_day_valper(:,1:2),'rows','stable');
        x_val = nan(size(datemat_month_valper,1),1);
        for i = 1:size(datemat_month_valper,1)
            x_val(i) = datenum([datemat_month_valper(i,:),1]);
        end
        simflow_valper_mon = grpstats(simflow_valper,{datemat_day_valper(:,1),datemat_day_valper(:,2)},'sum');
    end
    
    if handles.Is_ObsFlow_Daily
        obsflow = load(handles.edit_ObsFlowFile.String);
        datemat_day_obs = obsflow(:,1:3);
        datemat_mon_obs = unique(datemat_day_obs(:,1:2),'rows');
        x_obs = nan(size(datemat_mon_obs,1),1);
        for i = 1:size(datemat_mon_obs,1)
            x_obs(i) = datenum([datemat_mon_obs(i,:),1]);
        end
        
        obsflow = obsflow(:,end);
        obsflow(obsflow<0) = nan;
        obsflow_mon = nan(size(datemat_mon_obs,1),1);
        for i = 1:size(datemat_mon_obs,1)
            obsflow_mon(i) = sum(obsflow(datemat_day_obs(:,1)==datemat_mon_obs(i,1) & datemat_day_obs(:,2)==datemat_mon_obs(i,2)));
        end        
        
    else
        obsflow = load(handles.edit_ObsFlowFile.String);
        datemat_mon_obs = obsflow(:,1:2);
        uniqrow_obs = obsflow(:,1:2);
        x_obs = nan(size(uniqrow_obs,1),1);
        for i = 1:size(uniqrow_obs,1)
            x_obs(i) = datenum([uniqrow_obs(i,:),1]);
        end
        obsflow = obsflow(:,end);
        obsflow(obsflow<0) = nan;
        obsflow_mon = obsflow;
    end
    
    
    obs_overlap_calper = nan(length(simflow_calper_mon),1);
    for i = 1:length(obs_overlap_calper)
        obs_overlap_calper(i) = obsflow_mon(datemat_mon_obs(:,1)==datemat_month_calper(i,1) & datemat_mon_obs(:,2)==datemat_month_calper(i,2));
    end
    
    if handles.radiobutton_simplot_secondperiod.Value
        obs_overlap_valper = nan(length(simflow_valper_mon),1);
        for i = 1:length(obs_overlap_valper)
            obs_overlap_valper(i) = obsflow_mon(datemat_mon_obs(:,1)==datemat_month_valper(i,1) & datemat_mon_obs(:,2)==datemat_month_valper(i,2));
        end
    end
    

    if handles.radiobutton_simplot_secondperiod.Value
 
        h_sp1 = subplot(1,4,1:3);
        plot(x_obs,obsflow_mon,'k.','markersize',16); hold on;
        plot(x,simflow_calper_mon,'b','linewidth',2); hold on;
        plot(x_val,simflow_valper_mon,'r','linewidth',2); hold on;
        datetick('x')
        xlabel('Year','fontsize',12)
        ylabel('Discharge, Q [mm]','fontsize',12)
        xlim([min(x(1),x_val(1)),max(x(end),x_val(end))])
        lh = legend('OBS','SIM\_1st','SIM\_2nd','orientation','horizontal','location','NE'); set(lh,'fontsize',12)       
        
        h_sp2 = subplot(1,4,4);
        h_p1 = plot(simflow_calper_mon,obs_overlap_calper,'b.','markersize',12); hold on;
        h_p2 = plot(simflow_valper_mon,obs_overlap_valper,'r.','markersize',12); hold on;
        xlim([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))])
        ylim([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))])
        plot([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))],[min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))],'k-')
        xlabel('Simulated Q [mm]','fontsize',12)
        ylabel('Observed Q [mm]','fontsize',12)
        lh = legend([h_p1,h_p2],'1st','2nd','location','NW'); set(lh,'fontsize',12)
        
        set(h_sp1,'position',[0.05, h_sp2.Position(2),0.70,h_sp2.Position(4)])
        set(h_sp2,'position',[0.8150, h_sp2.Position(2),h_sp2.Position(3),h_sp2.Position(4)])
        
    else
        h_sp1 = subplot(1,4,1:3);
        plot(x_obs,obsflow_mon,'k.','markersize',16); hold on;
        plot(x,simflow_calper_mon,'b','linewidth',2); hold on;
        datetick('x')
        xlabel('Year','fontsize',12)
        ylabel('Discharge, Q [mm]','fontsize',12)
        xlim([x(1),x(end)])
        lh = legend('OBS','SIM\_1st','orientation','horizontal','location','NE'); set(lh,'fontsize',12) 
        
        h_sp2 = subplot(1,4,4);
        h_p1 = plot(simflow_calper_mon,obs_overlap_calper,'b.','markersize',12); hold on;
        xlim([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))])
        ylim([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))])
        plot([min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))],[min(h_sp2.XLim(1),h_sp2.YLim(1)),max(h_sp2.XLim(2),h_sp2.YLim(2))],'k-')
        xlabel('Simulated Q [mm]','fontsize',12)
        ylabel('Observed Q [mm]','fontsize',12)
        lh = legend(h_p1,'1st','location','NW'); set(lh,'fontsize',12)
        
        set(h_sp1,'position',[0.05, h_sp2.Position(2),0.70,h_sp2.Position(4)])
        set(h_sp2,'position',[0.8150, h_sp2.Position(2),h_sp2.Position(3),h_sp2.Position(4)])
    end
  
       
end
    


% --- Executes on button press in pushbutton_streamdefinition_help.
function pushbutton_streamdefinition_help_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_streamdefinition_help (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
msgbox('A threshold to initiate a stream defined as a percent of the maximum flow accumulation number for given DEM. By default, it is set to 1%. DEM grids having flow accumulation number above this threshold will be defined as stream grids. Therefore, less percentage produces more detailed stream.', 'Stream Definition','help');


function edit_streamthreshold_Callback(hObject, eventdata, handles)
% hObject    handle to edit_streamthreshold (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_streamthreshold as text
%        str2double(get(hObject,'String')) returns contents of edit_streamthreshold as a double


% --- Executes during object creation, after setting all properties.
function edit_streamthreshold_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_streamthreshold (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in checkbox_equalinterval_infilt.
function checkbox_equalinterval_infilt_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_infilt (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_infilt


% --- Executes on button press in checkbox_equalinterval_Ds.
function checkbox_equalinterval_Ds_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_Ds (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_Ds


% --- Executes on button press in checkbox_equalinterval_Dsmax.
function checkbox_equalinterval_Dsmax_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_Dsmax (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_Dsmax


% --- Executes on button press in checkbox_equalinterval_Ws.
function checkbox_equalinterval_Ws_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_Ws (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_Ws


% --- Executes on button press in checkbox_equalinterval_c.
function checkbox_equalinterval_c_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_c (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_c


% --- Executes on button press in checkbox_equalinterval_depth1.
function checkbox_equalinterval_depth1_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_depth1 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_depth1


% --- Executes on button press in checkbox_equalinterval_depth2.
function checkbox_equalinterval_depth2_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_depth2 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_depth2


% --- Executes on button press in checkbox_equalinterval_depth3.
function checkbox_equalinterval_depth3_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_depth3 (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_depth3


% --- Executes on button press in checkbox_equalinterval_snowtemp.
function checkbox_equalinterval_snowtemp_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_snowtemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_snowtemp


% --- Executes on button press in checkbox_equalinterval_raintemp.
function checkbox_equalinterval_raintemp_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_raintemp (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_raintemp


% --- Executes on button press in checkbox_equalinterval_snowrough.
function checkbox_equalinterval_snowrough_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_snowrough (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_snowrough


% --- Executes on button press in checkbox_equalinterval_N.
function checkbox_equalinterval_N_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_N (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_N


% --- Executes on button press in checkbox_equalinterval_K.
function checkbox_equalinterval_K_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_K (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_K


% --- Executes on button press in checkbox_equalinterval_Velo.
function checkbox_equalinterval_Velo_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_Velo (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_Velo


% --- Executes on button press in checkbox_equalinterval_Diff.
function checkbox_equalinterval_Diff_Callback(hObject, eventdata, handles)
% hObject    handle to checkbox_equalinterval_Diff (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of checkbox_equalinterval_Diff


% --- Executes on selection change in popupmenu_vic_version.
function popupmenu_vic_version_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_vic_version (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_vic_version contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_vic_version


% --- Executes during object creation, after setting all properties.
function popupmenu_vic_version_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_vic_version (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu_processingmode.
function popupmenu_processingmode_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_processingmode (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_processingmode contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_processingmode
contents = cellstr(get(hObject,'String'));
if strcmp(contents{get(hObject,'Value')},'Single')
    set(handles.uipanel_batchmode,'Visible','off') 
    set(handles.uipanel_singlemode,'Visible','on')
    set(handles.uipanel_ObsFlowData,'Visible','on')
    set(handles.uipanel_plotperiod,'Visible','on')    
elseif strcmp(contents{get(hObject,'Value')},'Batch')
    set(handles.uipanel_batchmode,'Visible','on')
    set(handles.uipanel_singlemode,'Visible','off')
    set(handles.uipanel_ObsFlowData,'Visible','off')
    set(handles.uipanel_plotperiod,'Visible','off')
end

% --- Executes during object creation, after setting all properties.
function popupmenu_processingmode_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_processingmode (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end




% --- Executes on button press in radiobutton_bothVICROUTING_batch.
function radiobutton_bothVICROUTING_batch_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton_bothVICROUTING_batch (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton_bothVICROUTING_batch


% --- Executes on button press in radiobutton_VIConly_batch.
function radiobutton_VIConly_batch_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton_VIConly_batch (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton_VIConly_batch


% --- Executes on button press in radiobutton_ROUTINGonly_batch.
function radiobutton_ROUTINGonly_batch_Callback(hObject, eventdata, handles)
% hObject    handle to radiobutton_ROUTINGonly_batch (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hint: get(hObject,'Value') returns toggle state of radiobutton_ROUTINGonly_batch



function edit_VICglobalconfigfile_batch_Callback(hObject, eventdata, handles)
% hObject    handle to edit_VICglobalconfigfile_batch (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_VICglobalconfigfile_batch as text
%        str2double(get(hObject,'String')) returns contents of edit_VICglobalconfigfile_batch as a double


% --- Executes during object creation, after setting all properties.
function edit_VICglobalconfigfile_batch_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_VICglobalconfigfile_batch (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton_VICglobalconfigfile_search_batch.
function pushbutton_VICglobalconfigfile_search_batch_Callback(hObject, eventdata, handles)
% hObject    handle to pushbutton_VICglobalconfigfile_search_batch (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
[filename, filepath] = uigetfile([handles.lastvisitdir,'\*'],'Select VIC Global Configuration File');
filedir = [filepath, filename];
if ischar(filedir)
    set(handles.listbox_globalconfiglist,'value',1)
    update_filedir = [handles.listbox_globalconfiglist.String; {filedir}];
    set(handles.listbox_globalconfiglist,'string',update_filedir)
    
    set(handles.listbox_globalconfiglist, 'min', 0, 'max', 2);
    set(handles.listbox_globalconfiglist,'Value',[]);
    
    handles.lastvisitdir = filepath;
    
    set(handles.text_progress_batch,'String',['Progress (',num2str(size(update_filedir,1),'%1.0f'),' runs in total)'])
end
guidata(hObject,handles);


% --- Executes on selection change in popupmenu_RunMode_batch.
function popupmenu_RunMode_batch_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_RunMode_batch (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_RunMode_batch contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_RunMode_batch


% --- Executes during object creation, after setting all properties.
function popupmenu_RunMode_batch_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_RunMode_batch (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end




% --- Executes on button press in pushbutton_globalconfigfile_batch_add.
function pushbutton_globalconfigfile_batch_add_Callback(hObject, eventdata, handles)
if ~isempty(handles.edit_VICglobalconfigfile_batch.String)
    set(handles.listbox_globalconfiglist,'value',1)
    update_filedir = [handles.listbox_globalconfiglist.String; {handles.edit_VICglobalconfigfile_batch.String}];
    set(handles.listbox_globalconfiglist,'string',update_filedir)
    set(handles.edit_VICglobalconfigfile_batch,'string',[])
    
    set(handles.listbox_globalconfiglist, 'min', 0, 'max', 2);
    set(handles.listbox_globalconfiglist,'Value',[]);
    
    set(handles.text_progress_batch,'String',['Progress (',num2str(size(update_filedir,1),'%1.0f'),' runs in total)'])
end


% --- Executes on selection change in listbox_globalconfiglist.
function listbox_globalconfiglist_Callback(hObject, eventdata, handles)
handles.seletedrow3 = get(hObject,'Value');    
guidata(hObject, handles);

% --- Executes on button press in pushbutton_globalconfigfile_batch_remove.
function pushbutton_globalconfigfile_batch_remove_Callback(hObject, eventdata, handles)
if ~isempty(handles.listbox_globalconfiglist.Value)
    selind = handles.listbox_globalconfiglist.Value;
    newstring = handles.listbox_globalconfiglist.String;
    newstring(selind) = [];
    if selind == length(handles.listbox_globalconfiglist.String)
        if selind-1 == 0
            set(handles.listbox_globalconfiglist,'value',[])
        else
            set(handles.listbox_globalconfiglist,'value',selind-1)
        end
    end
    set(handles.listbox_globalconfiglist,'string',newstring)
    
    set(handles.listbox_globalconfiglist, 'min', 0, 'max', 2);
    set(handles.listbox_globalconfiglist,'Value',[]);
    
    if isempty(newstring)
        set(handles.text_progress_batch,'String',['Progress (',num2str(0,'%1.0f'),' runs in total)'])
    else
        set(handles.text_progress_batch,'String',['Progress (',num2str(size(newstring,1),'%1.0f'),' runs in total)'])
    end
end

% --- Executes on button press in pushbutton_globalconfigfile_batch_up.
function pushbutton_globalconfigfile_batch_up_Callback(hObject, eventdata, handles)
if handles.seletedrow3 ~= 0  && handles.seletedrow3 ~= 1    
    oldstr = handles.listbox_globalconfiglist.String;
    upstr = oldstr{handles.seletedrow3-1};
    downstr = oldstr{handles.seletedrow3};
    oldstr{handles.seletedrow3-1} = downstr;
    oldstr{handles.seletedrow3} = upstr;
    set(handles.listbox_globalconfiglist,'String',oldstr)   
    set(handles.listbox_globalconfiglist,'Value',handles.seletedrow3-1); 
    handles.seletedrow3 = handles.seletedrow3-1;
end
guidata(hObject, handles);


% --- Executes on button press in pushbutton_globalconfigfile_batch_down.
function pushbutton_globalconfigfile_batch_down_Callback(hObject, eventdata, handles)
numvar = length(handles.listbox_globalconfiglist.String);
if numvar > 0
    if handles.seletedrow3 ~= 0  && handles.seletedrow3 ~= numvar
        oldstr = handles.listbox_globalconfiglist.String;
        upstr = oldstr{handles.seletedrow3};
        downstr = oldstr{handles.seletedrow3+1};
        oldstr{handles.seletedrow3} = downstr;
        oldstr{handles.seletedrow3+1} = upstr;
        set(handles.listbox_globalconfiglist,'String',oldstr)
        set(handles.listbox_globalconfiglist,'Value',handles.seletedrow3+1);
        handles.seletedrow3 = handles.seletedrow3+1;
    end
end
guidata(hObject, handles);


% --- Executes on button press in pushbutton_globalconfigfile_batch_import.
function pushbutton_globalconfigfile_batch_import_Callback(hObject, eventdata, handles)
[filename, filepath] = uigetfile({'*.xlsx';'*.xls';'*.txt';'*.csv'},'Select a file to be imported',handles.lastvisitdir);
filedir = [filepath, filename];
if ischar(filedir)
    [~,~,ext] = fileparts(filedir);
    if strcmp(ext,'.txt')
        fid = fopen(filedir);
        tline = fgetl(fid);
        content = {};
        while ischar(tline)
            content = [content; tline];
            tline = fgetl(fid);
        end
        fclose(fid);

        set(handles.listbox_globalconfiglist,'value',1)
        update_filedir = [handles.listbox_globalconfiglist.String; content];
        set(handles.listbox_globalconfiglist,'string',update_filedir)
        set(handles.edit_VICglobalconfigfile_batch,'string',[])
        
        set(handles.listbox_globalconfiglist, 'min', 0, 'max', 2);
        set(handles.listbox_globalconfiglist,'Value',[]);
        
    elseif strcmp(ext,'.xls') || strcmp(ext,'.xlsx') || strcmp(ext,'.csv')
        [~,~,content] = xlsread(filedir);
        set(handles.listbox_globalconfiglist,'value',1)
        update_filedir = [handles.listbox_globalconfiglist.String; content];
        set(handles.listbox_globalconfiglist,'string',update_filedir)
        set(handles.edit_VICglobalconfigfile_batch,'string',[])

        set(handles.listbox_globalconfiglist, 'min', 0, 'max', 2);
        set(handles.listbox_globalconfiglist,'Value',[]);

    end
    handles.lastvisitdir = filepath;
    
    set(handles.text_progress_batch,'String',['Progress (',num2str(size(update_filedir,1),'%1.0f'),' runs in total)'])
end
guidata(hObject,handles);


% --- Executes on button press in pushbutton_RunVIC_batch.
function pushbutton_RunVIC_batch_Callback(hObject, eventdata, handles)

set(handles.popupmenu_Metrics_select,'Value',1,'Enable','off')
set(handles.pushbutton_undock_fig,'Enable','off')
set(handles.edit_Metrics_calculation,'String',[],'Enable','off')
set(handles.edit_Metrics_calculation_val,'String',[],'Enable','off')
if get(handles.checkbox_StreamPlot_sim,'Value') || get(handles.checkbox_StreamPlot_obs,'Value')
    set(handles.simflowplot_calper_h,'Visible','off')
end
set(handles.checkbox_StreamPlot_sim,'Value',0)
set(handles.checkbox_StreamPlot_obs,'Value',0)

globalconfigfile_all = get(handles.listbox_globalconfiglist,'String');
num_globalconfig = size(globalconfigfile_all,1);

for ig = 1:num_globalconfig
    
    globalconfigfile_selected = deblank(globalconfigfile_all{ig});
    set(handles.text_progress_batch_update,'String',[num2str(ig-1),' / ',num2str(num_globalconfig),' (',num2str((ig-1)/num_globalconfig*100,'%1.0f'),' % completed)'],'ForegroundColor','k')
    set(handles.text_runstatus_batch_update,'String',['Running ',globalconfigfile_selected],'ForegroundColor','k')
    if ig == 1
        set(handles.text_elapsedtime_batch_update,'String','-- min','ForegroundColor','k')
        stime = tic;
    end
    
    
    %----------------------------------------------------------------------
%     globalconfigfile_selected = deblank(globalconfigfile_all{ig});
    OUT_VIC = {};
    fileID = fopen(globalconfigfile_selected,'r');
    while ~feof(fileID)
        paraminfo = fgetl(fileID);
        comment_char = strfind(paraminfo,'#');
        if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
        
        if ~isempty(paraminfo)
            linecontent = textscan(paraminfo,'%s');
            if ~isempty(linecontent{1})
                if strcmp(linecontent{1}{1},'SOIL')
                    soilparfile = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ROUTE')
                    routparfile = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'ROUTE_OUTFILE')
                    routoutfile = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'RESULT_DIR')
                    vicoutfolder = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'OUTFILE')
                    vicoutfile = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'OUT_STEP')
                    out_step = linecontent{1}{2};
                elseif strcmp(linecontent{1}{1},'TIME_STEP')
                    time_step = str2double(linecontent{1}{2});
                elseif strcmp(linecontent{1}{1},'OUTVAR')
                    OUT_VIC = [OUT_VIC,linecontent{1}{2}];
                elseif strcmp(linecontent{1}{1},'STARTYEAR')
                    STARTYEAR = [OUT_VIC,linecontent{1}{2}];
                elseif strcmp(linecontent{1}{1},'STARTMONTH')
                    STARTMONTH = [OUT_VIC,linecontent{1}{2}];
                elseif strcmp(linecontent{1}{1},'STARTDAY')
                    STARTDAY = [OUT_VIC,linecontent{1}{2}];
                elseif strcmp(linecontent{1}{1},'ENDYEAR')
                    ENDYEAR = [OUT_VIC,linecontent{1}{2}];
                elseif strcmp(linecontent{1}{1},'ENDMONTH')
                    ENDMONTH = [OUT_VIC,linecontent{1}{2}];
                elseif strcmp(linecontent{1}{1},'ENDDAY')
                    ENDDAY = [OUT_VIC,linecontent{1}{2}];
                elseif strcmp(linecontent{1}{1},'GRID_DECIMAL')
                    grid_decimal = linecontent{1}{2};
                end
            end
            
        end
    end
    fclose(fileID);
    
    coord_format = ['%1.',grid_decimal,'f'];
    
    
    soildata = load(soilparfile);
%     if ~rem(soildata(1,3),0.5) && ~rem(soildata(1,3),0.25) && ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
%         halfgridsize = .5; %coord_format = '%1.1f';
%     elseif ~rem(soildata(1,3),0.25) && ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
%         halfgridsize = .25; %coord_format = '%1.2f';
%     elseif ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
%         halfgridsize = .125; %coord_format = '%1.3f';
%     elseif ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
%         halfgridsize = .0625; %coord_format = '%1.4f';
%     elseif ~rem(soildata(1,3),0.03125)
%         halfgridsize = .03125; %coord_format = '%1.5f';
%     end
    
    n = 0;
    poly_lat_all = [];
    poly_lon_all = [];
    for i=1:size(soildata,1)
        
        if soildata(i,1) == 1
            n = n+1;
            
            if ~rem(soildata(1,3),0.5) && ~rem(soildata(1,3),0.25) && ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
                halfgridsize = .5; %coord_format = '%1.1f';
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(1,3),0.25) && ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
                halfgridsize = .25; %coord_format = '%1.2f';
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(1,3),0.125) && ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
                halfgridsize = .125; %coord_format = '%1.3f';
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(1,3),0.0625)  && ~rem(soildata(1,3),0.03125)
                halfgridsize = .0625; %coord_format = '%1.4f';
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            elseif ~rem(soildata(1,3),0.03125)
                halfgridsize = .03125; %coord_format = '%1.5f';
                poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
                poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            else
                halfgridsize = .00001;
                poly_lat = soildata(i,3);
                poly_lon = soildata(i,4);
            end
%             poly_lat = [soildata(i,3)+halfgridsize, soildata(i,3)+halfgridsize, soildata(i,3)-halfgridsize,soildata(i,3)-halfgridsize, soildata(i,3)+halfgridsize, NaN];
%             poly_lon = [soildata(i,4)-halfgridsize, soildata(i,4)+halfgridsize, soildata(i,4)+halfgridsize,soildata(i,4)-halfgridsize, soildata(i,4)-halfgridsize, NaN];
            
            poly_lat_all = [poly_lat_all,poly_lat];
            poly_lon_all = [poly_lon_all,poly_lon];
            
        end
        
    end
    if halfgridsize == .00001
        plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'o','markersize',5,'markeredgecolor',[0.75,0.75,0.75] );
    else
        plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color',[0.75,0.75,0.75] );
    end
    xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
    ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
    
    if (nanmax(poly_lon_all)-nanmin(poly_lon_all)) >= (nanmax(poly_lat_all)-nanmin(poly_lat_all))
        axisrange = (nanmax(poly_lon_all)-nanmin(poly_lon_all));
        lat_uniq  = unique(poly_lat_all);
        set(handles.axes_VICgrid,'xlim',[nanmin(poly_lon_all)-halfgridsize*2,nanmax(poly_lon_all)+halfgridsize*2],'ylim',[nanmean(lat_uniq)-axisrange/2-halfgridsize*2,nanmean(lat_uniq)+axisrange/2+halfgridsize*2])
        xlim_org = [nanmin(poly_lon_all)-halfgridsize*2,nanmax(poly_lon_all)+halfgridsize*2];
        ylim_org = [nanmean(lat_uniq)-axisrange/2-halfgridsize*2,nanmean(lat_uniq)+axisrange/2+halfgridsize*2];
    else
        axisrange = (nanmax(poly_lat_all)-nanmin(poly_lat_all));
        lon_uniq  = unique(poly_lon_all);
        set(handles.axes_VICgrid,'xlim',[nanmean(lon_uniq)-axisrange/2-halfgridsize*2,nanmean(lon_uniq)+axisrange/2+halfgridsize*2],'ylim',[nanmin(poly_lat_all)-halfgridsize*2,nanmax(poly_lat_all)+halfgridsize*2])
        xlim_org = [nanmean(lon_uniq)-axisrange/2-halfgridsize*2,nanmean(lon_uniq)+axisrange/2+halfgridsize*2];
        ylim_org = [nanmin(poly_lat_all)-halfgridsize*2,nanmax(poly_lat_all)+halfgridsize*2];
    end
    
    activegridnum = n;
    
    routdata = load(routparfile);
    activegridnum_rout = size(routdata,1);
    
    
    pause(1);
    
    
    %----------------------------------------------------------------------
    if handles.radiobutton_bothVICROUTING_batch.Value
        Is_VIC_Run = 1;
        Is_ROUTING_Run = 1;
    elseif handles.radiobutton_VIConly_batch.Value
        Is_VIC_Run = 1;
        Is_ROUTING_Run = 0;
    elseif handles.radiobutton_ROUTINGonly_batch.Value
        Is_VIC_Run = 0;
        Is_ROUTING_Run = 1;
    end
    
    
    routpar_all = load(routparfile);
    routpar_all = flipud(sortrows(routpar_all,4));
    [~,where_runoff] = ismember('OUT_RUNOFF',OUT_VIC);
    [~,where_baseflow] = ismember('OUT_BASEFLOW',OUT_VIC);
    totarea = sum(routpar_all(:,3));
    outlet_flowlen = routpar_all(end,4);
    
    
    syr = str2double(STARTYEAR); smon = str2double(STARTMONTH); sday = str2double(STARTDAY);
    eyr = str2double(ENDYEAR); emon = str2double(ENDMONTH); eday = str2double(ENDDAY);
    numsimday = datenum([eyr,emon,eday])-datenum([syr,smon,sday])+1;
    sim_datemat = datevec(datenum([syr,smon,sday]):datenum([eyr,emon,eday]));
    
    
    if where_runoff == 0
        error('There''s no VIC output for runoff! Routing cannot be run...')
    end
    if where_baseflow == 0
        error('There''s no VIC output for baseflow! Routing cannot be run...')
    end
    
    out_step = str2double(out_step);
    if out_step == 0
        out_step = time_step;
    end
    
    if out_step < 24
        where_runoff = where_runoff + 4;
        where_baseflow = where_baseflow + 4;
    else
        where_runoff = where_runoff + 3;
        where_baseflow = where_baseflow + 3;
    end
    
    
    contents_runmode = cellstr(get(handles.popupmenu_RunMode_batch,'String'));
    sel_runmode = contents_runmode{get(handles.popupmenu_RunMode_batch,'Value')};
    
    VIC_ver_contents = cellstr(get(handles.popupmenu_vic_version,'String'));
    VIC_ver_selected = VIC_ver_contents{get(handles.popupmenu_vic_version,'Value')};
    if strcmp(VIC_ver_selected,'VIC-4.2.b')
        wherevicfile = handles.WhereIsVIC_4_2_b;
        IsVIC5 = 0;
    elseif strcmp(VIC_ver_selected,'VIC-4.2.c')
        wherevicfile = handles.WhereIsVIC_4_2_c;
        IsVIC5 = 0;
    elseif strcmp(VIC_ver_selected,'VIC-4.2.d')
        wherevicfile = handles.WhereIsVIC_4_2_d;
        IsVIC5 = 0;
    elseif strcmp(VIC_ver_selected,'VIC-5.0.1')
        wherevicfile = handles.WhereIsVIC_5_0_1;
        IsVIC5 = 1;
    end
    
    command_part1 = handles.WhereIsCygwin;
    whereglobalfile = globalconfigfile_selected;
    command_part1 = strrep(command_part1,'\','/');
    whereglobalfile = strrep(whereglobalfile,'\','/');
%     wherevicfile = handles.WhereIsVIC;
    wherevicfile = strrep(wherevicfile,'\','/');
    
        
    switch sel_runmode
        
        case 'Normal'
            
            if Is_VIC_Run
                
                copyfile(soilparfile,[soilparfile,'_COPY'])
                
                fileID = fopen([soilparfile,'_COPY'],'r');
                while ~feof(fileID)
                    
                    gridsoilpar = fgetl(fileID);
                    fileID2 = fopen(soilparfile,'w');
                    fprintf(fileID2,'%s\n',gridsoilpar);
                    fclose(fileID2);
                    
                    %     [status,cmdout] = system([command_part1,'\Cygwin\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'''']);
                    if IsVIC5
                        system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vic_classic.exe -g ',whereglobalfile,'''']);
                    else
                        system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'''']);
                    end
                    
                    soildata = load(soilparfile);
                    if halfgridsize == .00001
                        poly_lat = soildata(3);
                        poly_lon = soildata(4);
                    else
                        poly_lat = [soildata(3)+halfgridsize, soildata(3)+halfgridsize, soildata(3)-halfgridsize,soildata(3)-halfgridsize, soildata(3)+halfgridsize, NaN];
                        poly_lon = [soildata(4)-halfgridsize, soildata(4)+halfgridsize, soildata(4)+halfgridsize,soildata(4)-halfgridsize, soildata(4)-halfgridsize, NaN];
                    end
                    handles.finish_grid_lat = [handles.finish_grid_lat,poly_lat];
                    handles.finish_grid_lon = [handles.finish_grid_lon,poly_lon];

                    if halfgridsize == .00001
                        h = plot(handles.axes_VICgrid,poly_lon_all, poly_lat_all,'wo',handles.finish_grid_lon, handles.finish_grid_lat,'ro');
                    else
                        h = plot(handles.axes_VICgrid,poly_lon_all, poly_lat_all,'w',handles.finish_grid_lon, handles.finish_grid_lat,'r');
                    end
                    h(1).Color = [0.75 0.75 0.75];
                    xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                    ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                    set(handles.axes_VICgrid,'xlim',xlim_org);
                    set(handles.axes_VICgrid,'ylim',ylim_org);
                end
                fclose(fileID);
                
            end
            
            
            if Is_ROUTING_Run
                
                if ~Is_VIC_Run
                    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color','r' );
                    xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                    ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                    set(handles.axes_VICgrid,'xlim',xlim_org);
                    set(handles.axes_VICgrid,'ylim',ylim_org);
                end
                
                pause(1)
                
                FLOW_tot = zeros(numsimday,1);
                FLOW_base = zeros(numsimday,1);
                for n = 1:size(routpar_all,1)
                    grid_vicout = load([vicoutfolder,'/',vicoutfile,'_',num2str(routpar_all(n,1),coord_format),'_',num2str(routpar_all(n,2),coord_format)]);
                    if out_step < 24
                        inflow_direct = grpstats(grid_vicout(:,where_runoff),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                        inflow_base = grpstats(grid_vicout(:,where_baseflow),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                    else
                        inflow_direct = grid_vicout(:,where_runoff);
                        inflow_base = grid_vicout(:,where_baseflow);
                    end
                    
                    flowlen = routpar_all(n,4);
                    route_par = [routpar_all(n,5),routpar_all(n,6),routpar_all(n,7),routpar_all(n,8)];
                    if n == size(routpar_all,1)
                        isOutlet = 1;
                    else
                        isOutlet = 0;
                    end
                    [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
                    FLOW_tot = FLOW_tot + runoff*routpar_all(n,3)/sum(routpar_all(:,3));
                    FLOW_base = FLOW_base + baseflow*routpar_all(n,3)/sum(routpar_all(:,3));
                    
                    handles.finish_grid_lat_rout = [handles.finish_grid_lat_rout,routpar_all(n,1)];
                    handles.finish_grid_lon_rout = [handles.finish_grid_lon_rout,routpar_all(n,2)];
                    
                    if n == size(routpar_all,1)
                        if halfgridsize == .00001
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                        else
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                        end
                        set(h(2),'MarkerFaceColor','b','Markersize',3)
                        set(h(3),'MarkerFaceColor','b','Markersize',5)
                    else
                        if halfgridsize == .00001
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                        else
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                        end
                        set(h(2),'MarkerFaceColor','b','Markersize',3)
                    end
                    xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                    ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                    set(handles.axes_VICgrid,'xlim',xlim_org);
                    set(handles.axes_VICgrid,'ylim',ylim_org);
                    pause(0.1)
                    
                end
                
            end
            
            
            
            if Is_VIC_Run
                copyfile([soilparfile,'_COPY'],soilparfile)
                fclose('all');
                delete([soilparfile,'_COPY'])
            end
            
            handles.finish_grid_lat = [];
            handles.finish_grid_lon = [];
            handles.finish_grid_lat_rout = [];
            handles.finish_grid_lon_rout = [];
            
            
        case 'Fast'
            
            if Is_VIC_Run
                
                % [status,cmdout] = system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,''''])
                if IsVIC5
                    system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vic_classic.exe -g ',whereglobalfile,'''']);
                else
                    system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'''']);
                end
                if halfgridsize == .00001
                    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'o','markersize',5,'markeredgecolor','r');
                else
                    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color','r' );
                end
                xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                set(handles.axes_VICgrid,'xlim',xlim_org);
                set(handles.axes_VICgrid,'ylim',ylim_org);
                elapse_t1 = toc(stime);
            end
            
            if Is_ROUTING_Run
                
                if ~Is_VIC_Run
                    if halfgridsize == .00001
                        plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'o','markersize',5,'markeredgecolor','r');
                    else
                        plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color','r' );
                    end
                    xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                    ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                    set(handles.axes_VICgrid,'xlim',xlim_org);
                    set(handles.axes_VICgrid,'ylim',ylim_org);
                end
                
                pause(1)
                
                FLOW_tot = zeros(numsimday,1);
                FLOW_base = zeros(numsimday,1);
                for n = 1:size(routpar_all,1)
                    grid_vicout = load([vicoutfolder,'/',vicoutfile,'_',num2str(routpar_all(n,1),coord_format),'_',num2str(routpar_all(n,2),coord_format)]);
                    if out_step < 24
                        inflow_direct = grpstats(grid_vicout(:,where_runoff),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                        inflow_base = grpstats(grid_vicout(:,where_baseflow),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                    else
                        inflow_direct = grid_vicout(:,where_runoff);
                        inflow_base = grid_vicout(:,where_baseflow);
                    end
                    
                    flowlen = routpar_all(n,4);
                    route_par = [routpar_all(n,5),routpar_all(n,6),routpar_all(n,7),routpar_all(n,8)];
                    if n == size(routpar_all,1)
                        isOutlet = 1;
                    else
                        isOutlet = 0;
                    end
                    [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
                    FLOW_tot = FLOW_tot + runoff*routpar_all(n,3)/sum(routpar_all(:,3));
                    FLOW_base = FLOW_base + baseflow*routpar_all(n,3)/sum(routpar_all(:,3));
                    
                    handles.finish_grid_lat_rout = [handles.finish_grid_lat_rout,routpar_all(n,1)];
                    handles.finish_grid_lon_rout = [handles.finish_grid_lon_rout,routpar_all(n,2)];
                    
                    if n == size(routpar_all,1)
                        if size(routpar_all,1)>1
                            if halfgridsize == .00001
                                h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                            else
                                h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                            end
                            set(h(2),'MarkerFaceColor','b','Markersize',3)
                            set(h(3),'MarkerFaceColor','b','Markersize',5)
                        else
                            if halfgridsize == .00001
                                h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                            else
                                h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                            end
                            set(h(2),'MarkerFaceColor','b','Markersize',5)
                        end
                    else
                        if halfgridsize == .00001
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                        else
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                        end
                        set(h(2),'MarkerFaceColor','b','Markersize',3)
                    end
                    xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                    ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                    set(handles.axes_VICgrid,'xlim',xlim_org);
                    set(handles.axes_VICgrid,'ylim',ylim_org);
                    pause(0.05)
                end
                
            end
            
            
            handles.finish_grid_lat_rout = [];
            handles.finish_grid_lon_rout = [];
            
            
        case 'Parallel'
            
            
            poolobj     = gcp;
            splitnum    = poolobj.NumWorkers;
            gridnum     = activegridnum;
            gridnum_rout = activegridnum_rout;
 
            jobnum_worker = repmat(floor(gridnum/splitnum),1,splitnum);
            for i = 1:mod(gridnum,splitnum)
                jobnum_worker(i) = jobnum_worker(i)+1;
            end
            
            jobnum_worker_rout = repmat(floor(gridnum_rout/splitnum),1,splitnum);
            for i = 1:mod(gridnum_rout,splitnum)
                jobnum_worker_rout(i) = jobnum_worker_rout(i)+1;
            end
            
            for i = 1:splitnum
                fileID = fopen(whereglobalfile,'r');
                fileID2 = fopen([whereglobalfile,'_POOL',num2str(i)],'w');
                while ~feof(fileID)
                    linecontent = fgetl(fileID);
                    linecontent_new1 = strrep(linecontent,soilparfile,[soilparfile,'_POOL',num2str(i)]);
                    linecontent_new2 = strrep(linecontent,routparfile,[routparfile,'_POOL',num2str(i)]);
                    if length(linecontent)>=4 && strcmp(linecontent(1:4),'SOIL')
                        fprintf(fileID2,'%s\n',linecontent_new1);
                    elseif length(linecontent)>=5 && strcmp(linecontent(1:5),'ROUTE')
                        fprintf(fileID2,'%s\n',linecontent_new2);
                    else
                        fprintf(fileID2,'%s\n',linecontent);
                    end
                end
                fclose(fileID);
                fclose(fileID2);
            end
            
            if Is_VIC_Run
                n = 1;
                fileID1 = fopen(soilparfile,'r');
                C = textscan(fileID1,'%s','delimiter','\n');
                soil_content = C{1};

                for i = 1:splitnum
                    fileID3 = fopen([soilparfile,'_POOL',num2str(i)],'w');   
                    for j = 1:jobnum_worker(i)
                        fprintf(fileID3,'%s\n',soil_content{n});
                        n = n+1;
                    end
                    fclose(fileID3);
                end
                fclose(fileID1);

            end

            if Is_ROUTING_Run
                n = 1;
                fileID2 = fopen(routparfile,'r');
                C = textscan(fileID2,'%s','delimiter','\n');
                rout_content = C{1};
                for i = 1:splitnum 
                    fileID4 = fopen([routparfile,'_POOL',num2str(i)],'w');
                    for j = 1:jobnum_worker_rout(i)
                        fprintf(fileID4,'%s\n',rout_content{n});
                        n = n+1;
                    end
                    fclose(fileID4);
                end
                fclose(fileID2);
            end
            
            
            if Is_VIC_Run
                
                parfor i = 1:splitnum
                    if IsVIC5
                        system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vic_classic.exe -g ',whereglobalfile,'_POOL',num2str(i),'''']);
                    else
                        system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'_POOL',num2str(i),'''']);
                    end
                end
                if halfgridsize == .00001
                    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'o','markersize',5,'markeredgecolor','r');
                else
                    plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color','r' );
                end 
                xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                set(handles.axes_VICgrid,'xlim',xlim_org);
                set(handles.axes_VICgrid,'ylim',ylim_org);
                
            end
            
            
            if Is_ROUTING_Run
                
                if ~Is_VIC_Run
                    if halfgridsize == .00001
                        plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro','markersize',5);
                    else
                        plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'color','r' );
                    end
                    xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                    ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                    set(handles.axes_VICgrid,'xlim',xlim_org);
                    set(handles.axes_VICgrid,'ylim',ylim_org);
                end
                
                pause(1)
                
                FLOW_tot = zeros(numsimday,splitnum);
                FLOW_base = zeros(numsimday,splitnum);
                parfor i = 1:splitnum
                    
                    routpar_part = load([routparfile,'_POOL',num2str(i)]);
                    
                    FLOW_tot_part = zeros(numsimday,1);
                    FLOW_base_part = zeros(numsimday,1);
                    for n = 1:size(routpar_part,1)
                        grid_vicout = load([vicoutfolder,'/',vicoutfile,'_',num2str(routpar_part(n,1),coord_format),'_',num2str(routpar_part(n,2),coord_format)]);
                        if out_step < 24
                            inflow_direct = grpstats(grid_vicout(:,where_runoff),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                            inflow_base = grpstats(grid_vicout(:,where_baseflow),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                        else
                            inflow_direct = grid_vicout(:,where_runoff);
                            inflow_base = grid_vicout(:,where_baseflow);
                        end
                        
                        flowlen = routpar_part(n,4);
                        route_par = [routpar_part(n,5),routpar_part(n,6),routpar_part(n,7),routpar_part(n,8)];
                        if flowlen == outlet_flowlen
                            isOutlet = 1;
                        else
                            isOutlet = 0;
                        end
                        [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
                        FLOW_tot_part = FLOW_tot_part + runoff*routpar_part(n,3)/totarea;
                        FLOW_base_part = FLOW_base_part + baseflow*routpar_part(n,3)/totarea;
                        
                    end
                    FLOW_tot(:,i)  = FLOW_tot_part;
                    FLOW_base(:,i) = FLOW_base_part;
                    
                end
                FLOW_tot  = sum(FLOW_tot,2);
                FLOW_base = sum(FLOW_base,2);
                
                
                for n = 1:size(routpar_all,1)
                    
                    handles.finish_grid_lat_rout = [handles.finish_grid_lat_rout,routpar_all(n,1)];
                    handles.finish_grid_lon_rout = [handles.finish_grid_lon_rout,routpar_all(n,2)];
                    
                    if n == size(routpar_all,1)
                        if halfgridsize == .00001
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                        else
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout(1:end-1),handles.finish_grid_lat_rout(1:end-1),'bo',handles.finish_grid_lon_rout(end),handles.finish_grid_lat_rout(end),'b^');
                        end
                        set(h(2),'MarkerFaceColor','b','Markersize',3)
                        set(h(3),'MarkerFaceColor','b','Markersize',5)
                    else
                        if halfgridsize == .00001
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'ro',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                        else
                            h = plot(handles.axes_VICgrid, poly_lon_all, poly_lat_all,'r',handles.finish_grid_lon_rout,handles.finish_grid_lat_rout,'bo');
                        end
                        set(h(2),'MarkerFaceColor','b','Markersize',3)
                    end
                    xlabel(handles.axes_VICgrid,'Longitude ^{o}','fontsize',11)
                    ylabel(handles.axes_VICgrid,'Latitude ^{o}','fontsize',11)
                    set(handles.axes_VICgrid,'xlim',xlim_org);
                    set(handles.axes_VICgrid,'ylim',ylim_org);
                    
                end
                
            end
            
            
            handles.finish_grid_lat_rout = [];
            handles.finish_grid_lon_rout = [];
            
            delete([whereglobalfile,'_POOL*']);
            delete([soilparfile,'_POOL*']);
            delete([routparfile,'_POOL*']);
            %         delete(poolobj)
            
    end
    
    if Is_ROUTING_Run
        savedata = [sim_datemat(:,1:3),FLOW_tot];
        fid = fopen(routoutfile,'w');
        fprintf(fid,'%d\t%d\t%d\t%1.8f\n',savedata');
        fclose(fid);
    end
    
    elaptime = toc(stime);
    set(handles.text_elapsedtime_batch_update,'String',[num2str(elaptime/60,'%1.0f'),' min'])

end
set(handles.text_progress_batch_update,'String',[num2str(ig),' / ',num2str(num_globalconfig),' (',num2str((ig-1)/num_globalconfig*100,'%1.0f'),' % completed)'],'ForegroundColor','k')
set(handles.text_runstatus_batch_update,'String','Completed','ForegroundColor','k')

guidata(hObject, handles);


% --- Executes on selection change in popupmenu_vic_version_calib.
function popupmenu_vic_version_calib_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_vic_version_calib (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_vic_version_calib contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_vic_version_calib


% --- Executes during object creation, after setting all properties.
function popupmenu_vic_version_calib_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_vic_version_calib (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on button press in pushbutton_CAL_GSA.
function pushbutton_CAL_GSA_Callback(hObject, eventdata, handles)
if get(hObject,'Value')
    set(handles.pushbutton_CAL_GSA,'foregroundcolor','k')
    set(handles.uipanel_CAL_GSA,'visible','on')  
    set(handles.pushbutton_CAL_GA,'value',0,'foregroundcolor',[0.65,0.65,0.65])    
    set(handles.uipanel_CAL_GA,'visible','on')

    set(handles.pushbutton_CAL_SETUP,'value',0,'foregroundcolor',[0.65,0.65,0.65])
    set(handles.uipanel_CAL_SETUP,'visible','off')
    
    set(handles.text_PopulationSize,'visible','off')
    set(handles.text_Generations,'visible','off')
    set(handles.text_EliteCount,'visible','off')
    set(handles.text_CrossoverFraction,'visible','off')
    set(handles.text_StallGenerations,'visible','off')
    set(handles.text_FunctionTolerance,'visible','off')
    set(handles.text_FitnessScaling,'visible','off')
    set(handles.text_SelectionFunction,'visible','off')
    set(handles.text_CrossoverFunction,'visible','off')
    set(handles.text_MutationFunction,'visible','off')
    
    set(handles.edit_popsize,'visible','off')
    set(handles.edit_gensize,'visible','off')
    set(handles.edit_elitsize,'visible','off')
    set(handles.edit_crossfrac,'visible','off')
    set(handles.edit_movewin,'visible','off')
    set(handles.edit_functol,'visible','off')
    set(handles.popupmenu_fitscale,'visible','off')
    set(handles.popupmenu_paresel,'visible','off')
    set(handles.popupmenu_crossover,'visible','off')
    set(handles.popupmenu_mutation,'visible','off')    
    
    set(handles.pushbutton_ga_gaoption_help,'visible','off')
    
    set(handles.uipanel_GA_Options,'title','GSA Options')
    
    set(handles.text_NumberSample,'visible','on')
    set(handles.text_SampleStrategy,'visible','on')
    set(handles.text_DesighType,'visible','on')
    set(handles.edit_numsample_gsa,'visible','on')
    set(handles.popupmenu_samplestrategy_gsa,'visible','on')
    set(handles.popupmenu_designtype_gsa,'visible','on')
    
    set(handles.text_Lumped,'visible','off')
    set(handles.text_EqualInterval,'visible','off')
    set(handles.pushbutton_lumped_all,'visible','off')
    set(handles.pushbutton_lumped_clear,'visible','off')
    set(handles.checkbox_lumped_infilt,'visible','off')
    set(handles.checkbox_lumped_Ds,'visible','off')
    set(handles.checkbox_lumped_Dsmax,'visible','off')
    set(handles.checkbox_lumped_Ws,'visible','off')
    set(handles.checkbox_lumped_c,'visible','off')
    set(handles.checkbox_lumped_depth1,'visible','off')
    set(handles.checkbox_lumped_depth2,'visible','off')
    set(handles.checkbox_lumped_depth3,'visible','off')
    set(handles.checkbox_lumped_snowtemp,'visible','off')
    set(handles.checkbox_lumped_raintemp,'visible','off')
    set(handles.checkbox_lumped_snowrough,'visible','off')
    set(handles.checkbox_lumped_N,'visible','off')
    set(handles.checkbox_lumped_K,'visible','off')
    set(handles.checkbox_lumped_Velo,'visible','off')
    set(handles.checkbox_lumped_Diff,'visible','off')
    set(handles.checkbox_equalinterval_infilt,'visible','off')
    set(handles.checkbox_equalinterval_Ds,'visible','off')
    set(handles.checkbox_equalinterval_Dsmax,'visible','off')
    set(handles.checkbox_equalinterval_Ws,'visible','off')
    set(handles.checkbox_equalinterval_c,'visible','off')
    set(handles.checkbox_equalinterval_depth1,'visible','off')
    set(handles.checkbox_equalinterval_depth2,'visible','off')
    set(handles.checkbox_equalinterval_depth3,'visible','off')
    set(handles.checkbox_equalinterval_snowtemp,'visible','off')
    set(handles.checkbox_equalinterval_raintemp,'visible','off')
    set(handles.checkbox_equalinterval_snowrough,'visible','off')
    set(handles.checkbox_equalinterval_N,'visible','off')
    set(handles.checkbox_equalinterval_K,'visible','off')
    set(handles.checkbox_equalinterval_Velo,'visible','off')
    set(handles.checkbox_equalinterval_Diff,'visible','off')    

else
    set(handles.pushbutton_CAL_GSA,'value',1)
end








function edit_numsample_gsa_Callback(hObject, eventdata, handles)
% hObject    handle to edit_numsample_gsa (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: get(hObject,'String') returns contents of edit_numsample_gsa as text
%        str2double(get(hObject,'String')) returns contents of edit_numsample_gsa as a double


% --- Executes during object creation, after setting all properties.
function edit_numsample_gsa_CreateFcn(hObject, eventdata, handles)
% hObject    handle to edit_numsample_gsa (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: edit controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu_samplestrategy_gsa.
function popupmenu_samplestrategy_gsa_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_samplestrategy_gsa (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_samplestrategy_gsa contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_samplestrategy_gsa


% --- Executes during object creation, after setting all properties.
function popupmenu_samplestrategy_gsa_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_samplestrategy_gsa (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end


% --- Executes on selection change in popupmenu_designtype_gsa.
function popupmenu_designtype_gsa_Callback(hObject, eventdata, handles)
% hObject    handle to popupmenu_designtype_gsa (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)

% Hints: contents = cellstr(get(hObject,'String')) returns popupmenu_designtype_gsa contents as cell array
%        contents{get(hObject,'Value')} returns selected item from popupmenu_designtype_gsa


% --- Executes during object creation, after setting all properties.
function popupmenu_designtype_gsa_CreateFcn(hObject, eventdata, handles)
% hObject    handle to popupmenu_designtype_gsa (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    empty - handles not created until after all CreateFcns called

% Hint: popupmenu controls usually have a white background on Windows.
%       See ISPC and COMPUTER.
if ispc && isequal(get(hObject,'BackgroundColor'), get(0,'defaultUicontrolBackgroundColor'))
    set(hObject,'BackgroundColor','white');
end






% --- Executes on button press in pushbutton_gsa_start.
function pushbutton_gsa_start_Callback(hObject, eventdata, handles)

v = ver;
has_fsolve = any(strcmp(cellstr(char(v.Name)), 'Parallel Computing Toolbox'));
numcores = 1;
if has_fsolve
    p = gcp;
    numcores = p.NumWorkers;
end

% Simulation period
sim_stryr = str2double(handles.text_CAL_INPUT_simsyr.String);
sim_strmon = str2double(handles.text_CAL_INPUT_simsmon.String);
sim_strday = str2double(handles.text_CAL_INPUT_simsday.String);
sim_endyr = str2double(handles.text_CAL_INPUT_simeyr.String);
sim_endmon = str2double(handles.text_CAL_INPUT_simemon.String);
sim_endday = str2double(handles.text_CAL_INPUT_simeday.String);

poolcal_datemat = cell2mat(handles.uitable_CAL_INPUT_calper.Data);
poolcal_timestep = handles.uitable_CAL_INPUT_timestep.Data;

% Calibration parameter list
% calpar_all = struct;
calpar_all = struct('name',[],'colind',[],'file',[],'ub',[],'lb',[]);
calpar_all(1).name  = 'infilt';         calpar_all(1).file  = 'soil';       calpar_all(1).colind  = 5;         
calpar_all(2).name  = 'Ds';             calpar_all(2).file  = 'soil';       calpar_all(2).colind  = 6;      
calpar_all(3).name  = 'Dsmax';          calpar_all(3).file  = 'soil';       calpar_all(3).colind  = 7;      
calpar_all(4).name  = 'Ws';             calpar_all(4).file  = 'soil';       calpar_all(4).colind  = 8;      
calpar_all(5).name  = 'c';              calpar_all(5).file  = 'soil';       calpar_all(5).colind  = 9;      
calpar_all(6).name  = 'depth1';         calpar_all(6).file  = 'soil';       calpar_all(6).colind  = 23;     
calpar_all(7).name  = 'depth2';         calpar_all(7).file  = 'soil';       calpar_all(7).colind  = 24;     
calpar_all(8).name  = 'depth3';         calpar_all(8).file  = 'soil';       calpar_all(8).colind  = 25;     
calpar_all(9).name  = 'max_snow_temp';  calpar_all(9).file  = 'global';     calpar_all(9).colind  = 0;      
calpar_all(10).name = 'min_rain_temp';  calpar_all(10).file = 'global';     calpar_all(10).colind = 0;      
calpar_all(11).name = 'snow_rough';     calpar_all(11).file = 'soil';       calpar_all(11).colind = 48;     
calpar_all(12).name = 'N';              calpar_all(12).file = 'rout';       calpar_all(12).colind = 5;      
calpar_all(13).name = 'K';              calpar_all(13).file = 'rout';       calpar_all(13).colind = 6;      
calpar_all(14).name = 'Velo';           calpar_all(14).file = 'rout';       calpar_all(14).colind = 7;      
calpar_all(15).name = 'Diff';           calpar_all(15).file = 'rout';       calpar_all(15).colind = 8;      


calpar_all(1).ub  = str2double(handles.edit_upper_infilt.String);           calpar_all(1).lb  = str2double(handles.edit_lower_infilt.String);           
calpar_all(2).ub  = str2double(handles.edit_upper_Ds.String);               calpar_all(2).lb  = str2double(handles.edit_lower_Ds.String);               
calpar_all(3).ub  = str2double(handles.edit_upper_Dsmax.String);            calpar_all(3).lb  = str2double(handles.edit_lower_Dsmax.String);            
calpar_all(4).ub  = str2double(handles.edit_upper_Ws.String);               calpar_all(4).lb  = str2double(handles.edit_lower_Ws.String);               
calpar_all(5).ub  = str2double(handles.edit_upper_c.String);                calpar_all(5).lb  = str2double(handles.edit_lower_c.String);                
calpar_all(6).ub  = str2double(handles.edit_upper_depth1.String);           calpar_all(6).lb  = str2double(handles.edit_lower_depth1.String);           
calpar_all(7).ub  = str2double(handles.edit_upper_depth2.String);           calpar_all(7).lb  = str2double(handles.edit_lower_depth2.String);           
calpar_all(8).ub  = str2double(handles.edit_upper_depth3.String);           calpar_all(8).lb  = str2double(handles.edit_lower_depth3.String);           
calpar_all(9).ub  = str2double(handles.edit_upper_snowtemp.String);         calpar_all(9).lb  = str2double(handles.edit_lower_snowtemp.String);         
calpar_all(10).ub = str2double(handles.edit_upper_raintemp.String);         calpar_all(10).lb = str2double(handles.edit_lower_raintemp.String);         
calpar_all(11).ub = str2double(handles.edit_upper_snowrough.String);        calpar_all(11).lb = str2double(handles.edit_lower_snowrough.String);        
calpar_all(12).ub = str2double(handles.edit_upper_N.String);                calpar_all(12).lb = str2double(handles.edit_lower_N.String);                
calpar_all(13).ub = str2double(handles.edit_upper_K.String);                calpar_all(13).lb = str2double(handles.edit_lower_K.String);                
calpar_all(14).ub = str2double(handles.edit_upper_Velo.String);             calpar_all(14).lb = str2double(handles.edit_lower_Velo.String);             
calpar_all(15).ub = str2double(handles.edit_upper_Diff.String);             calpar_all(15).lb = str2double(handles.edit_lower_Diff.String);             



calpar_sel = struct('name',[],'colind',[],'file',[],'ub',[],'lb',[]);
n = 1;
if handles.checkbox_calibrated_infilt.Value; calpar_sel(n)    = calpar_all(1);  n = n+1; end
if handles.checkbox_calibrated_Ds.Value; calpar_sel(n)        = calpar_all(2);  n = n+1; end
if handles.checkbox_calibrated_Dsmax.Value; calpar_sel(n)     = calpar_all(3);  n = n+1; end
if handles.checkbox_calibrated_Ws.Value; calpar_sel(n)        = calpar_all(4);  n = n+1; end
if handles.checkbox_calibrated_c.Value; calpar_sel(n)         = calpar_all(5);  n = n+1; end
if handles.checkbox_calibrated_depth1.Value; calpar_sel(n)    = calpar_all(6);  n = n+1; end
if handles.checkbox_calibrated_depth2.Value; calpar_sel(n)    = calpar_all(7);  n = n+1; end
if handles.checkbox_calibrated_depth3.Value; calpar_sel(n)    = calpar_all(8);  n = n+1; end
if handles.checkbox_calibrated_snowtemp.Value; calpar_sel(n)  = calpar_all(9);  n = n+1; end
if handles.checkbox_calibrated_raintemp.Value; calpar_sel(n)  = calpar_all(10); n = n+1; end
if handles.checkbox_calibrated_snowrough.Value; calpar_sel(n) = calpar_all(11); n = n+1; end
if handles.checkbox_calibrated_N.Value; calpar_sel(n)         = calpar_all(12); n = n+1; end
if handles.checkbox_calibrated_K.Value; calpar_sel(n)         = calpar_all(13); n = n+1; end
if handles.checkbox_calibrated_Velo.Value; calpar_sel(n)      = calpar_all(14); n = n+1; end
if handles.checkbox_calibrated_Diff.Value; calpar_sel(n)      = calpar_all(15); end


% Read VIC global file
fid = fopen(handles.edit_CAL_INPUT_globalfile.String,'r');
while ~feof(fid)
    paraminfo = fgetl(fid);
    comment_char = strfind(paraminfo,'#');
    if ~isempty(comment_char); paraminfo(comment_char(1):end)=[]; end
    
    if ~isempty(paraminfo)
        linecontent = textscan(paraminfo,'%s');
        if ~isempty(linecontent{1})
            if strcmp(linecontent{1}{1},'SOIL')
                soilparfile = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'ROUTE')
                routparfile = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'GRID_DECIMAL')
                grid_decimal = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'OUT_STEP')
                out_step = linecontent{1}{2};
            elseif strcmp(linecontent{1}{1},'TIME_STEP')
                time_step = str2double(linecontent{1}{2});
            end
        end
        
    end
end
fclose(fid);

out_step = str2double(out_step);
if out_step == 0
    out_step = time_step;
end


% Creat folders where VIC calibration results are stored
% mkdir([handles.edit_vicgastofile.String,'\globalparamfile_temp'])
% mkdir([handles.edit_vicgastofile.String,'\routparamfile_temp'])
% mkdir([handles.edit_vicgastofile.String,'\soilparamfile_temp'])
% mkdir([handles.edit_vicgastofile.String,'\routout_temp'])
mkdir([handles.edit_vicgastofile.String,'\vicout_temp'])



% GENERATE PARAMETER SETS
soilpar_content_org = load(soilparfile);        % soil parameter file originally provided
routpar_content     = load(routparfile);        % routing parameter file originally provided
% Check grids between soil & routing parameter files
does_soilgrid_contain_routgrid = 1;
missing_routgrid = [];
for i = 1:size(routpar_content,1)
    if ~sum(soilpar_content_org(:,3)==routpar_content(i,1) & soilpar_content_org(:,4)==routpar_content(i,2))
        does_soilgrid_contain_routgrid = 0;
        missing_routgrid = [missing_routgrid;[routpar_content(i,1),routpar_content(i,2)]];
    end
end
if does_soilgrid_contain_routgrid==0
    disp(missing_routgrid)
    error('Routing grid cells listed above missing in the soil parameter file')
end
% Reorganized soil parameter content based on routing parameter
soilpar_content = nan(size(routpar_content,1),size(soilpar_content_org,2));
for i=1:size(routpar_content,1)   
    soilpar_content(i,:) = [1,soilpar_content_org(soilpar_content_org(:,3)==routpar_content(i,1) & soilpar_content_org(:,4)==routpar_content(i,2),2:end)];    
end


% Soil parameter file format
if rem(soilpar_content(1,3),0.5)==0
    saveformat1 = '%d\t%d\t%1.1f\t%1.1f';
elseif rem(soilpar_content(1,3),0.25)==0
    saveformat1 = '%d\t%d\t%1.2f\t%1.2f';    
elseif rem(soilpar_content(1,3),0.125)==0
    saveformat1 = '%d\t%d\t%1.3f\t%1.3f';
elseif rem(soilpar_content(1,3),0.0625)==0
    saveformat1 = '%d\t%d\t%1.4f\t%1.4f';
elseif rem(soilpar_content(1,3),0.03125)==0
    saveformat1 = '%d\t%d\t%1.5f\t%1.5f';
end
saveformat2=[];
for i = 1:size(soilpar_content,2)-4
    saveformat2=[saveformat2,'\t%1.6f'];
end
saveformat_soilfile = [saveformat1,saveformat2,'\n'];


% Routing parameter file format
if rem(soilpar_content(1,3),0.5)==0
    saveformat_routfile = '%2.1f\t%2.1f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n';
elseif rem(soilpar_content(1,3),0.25)==0
    saveformat_routfile = '%2.2f\t%2.2f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n';    
elseif rem(soilpar_content(1,3),0.125)==0
    saveformat_routfile = '%2.3f\t%2.3f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n';
elseif rem(soilpar_content(1,3),0.0625)==0
    saveformat_routfile = '%2.4f\t%2.4f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n';
elseif rem(soilpar_content(1,3),0.03125)==0
    saveformat_routfile = '%2.5f\t%2.5f\t%2.6f\t%14.6f\t%2.6f\t%12.6f\t%12.6f\t%12.6f\t%d\n';
end



Ngrid   = size(soilpar_content,1);
Ncalpar = length(calpar_sel);

% List of parameters chosen to be calibrated
calpar_list = cell(Ncalpar,1);
for i = 1:Ncalpar
    calpar_list{i}=calpar_sel(i).name;
end


[routfile_rowsize,routfile_colsize] = size(routpar_content);
if routfile_colsize == 9
    clustind = routpar_content(:,end);
elseif routfile_colsize == 8
    clustind = ones(routfile_rowsize,1);
end
uniqclustind = unique(clustind);
clustnum     = length(unique(clustind));


% GSA options

X_labels = {calpar_sel.name};
M = length(X_labels)*clustnum ;

xmin =[calpar_sel.lb];
xmax =[calpar_sel.ub];
DistrPar_part = nan(Ncalpar,2);
for i = 1:Ncalpar; DistrPar_part(i,:) = [ xmin(i) xmax(i) ] ; end
DistrPar = repmat(DistrPar_part,clustnum,1); 


r = str2double(handles.edit_numsample_gsa.String) ; % Number of samples

SampStrategy_option = get(handles.popupmenu_samplestrategy_gsa,'String');
SampStrategy = SampStrategy_option{handles.popupmenu_samplestrategy_gsa.Value} ; 

design_type_option = get(handles.popupmenu_designtype_gsa,'String');
design_type = design_type_option{handles.popupmenu_designtype_gsa.Value}; 

fitnessfunc = handles.popupmenu_fitfunc.String{handles.popupmenu_fitfunc.Value};

% Uniformly sample the unit square
N = 2*r;
if strcmp(SampStrategy,'Uniform')      % Uniform sampling
    AB   = rand(N,M) ;
elseif strcmp(SampStrategy,'Latin Hypercube') % Latin Hypercube sampling

%     AB = lhcube(N,M);    
    nrep=5 ;       
    d = 0 ;
    for k=1:nrep
        
        % Generate a latin-hypercube:
        ran = rand(N,M) ;
        Xk  = zeros(N,M);
        for i=1:M
            idx=randperm(N);
            Xk(:,i)=(idx'-ran(:,i))/N;
        end
        
        % Compute the minimum distance between points in X:
        % dk = min(pdist(Xk)) ; % Requires Statistical Toolbox
        % Alternative option:
        dk=(ipdm(Xk,'metric',2)); 
        dk=min(dk(dk>0));
        
        % If the current latin hypercube has minimum distance higher than
        % the best so far, it will be retained as the best.
        if (dk > d)
            AB = Xk ;
            d = dk ;
        end
        
    end

end

% Map back into the specified distribution by inverting the CDF
for i=1:M
    AB(:,i) = feval(['unif' 'inv'],AB(:,i),DistrPar(i,1),DistrPar(i,2));
end

X  = nan(r*(M+1),M); % sampling points
k = 1 ;
for i=1:r
    % Sample datapoints:
    ab  = AB((i-1)*2+1:(i-1)*2+2,:);
    a = ab(1,:) ;
    b = ab(2,:) ;
       
    X(k,:) = a ;
    k=k+1 ;
    if strcmp(design_type,'Radial')
        for j=1:M
            x_   = a       ;
            x_(j)= b(j)    ;
            X(k,:) = x_ ;
            if (abs( X(k,j) - X(k-1,j) )==0); fprintf('\n WARNING \n: X(%d,%d) and X(%d,%d) are equal\n',[k,j,k-1,j]); end
            k=k+1 ;
        end
    elseif strcmp(design_type,'Trajectory')
        x = a ;
        for j=1:M
            x_   = x     ;
            x_(j)= b(j)  ;
            X(k,:) = x_  ;
            if (abs( X(k,j) - X(k-1,j) )==0); fprintf('\n WARNING \n: X(%d,%d) and X(%d,%d) are equal\n',[k,j,k-1,j]); end
            x = x_  ; % move one step forward in the trajectory
            k = k+1 ;
        end
    end
    
end

t_content = cell(clustnum,length(X_labels)+1);
for i=1:clustnum; t_content{i,1}=uniqclustind(i); end
set(handles.uitable_gsa_eet,'data',t_content)
set(handles.uitable_gsa_eet,'ColumnName',['Group ID';X_labels'])



% VIC EVALUATION

VIC_ver_contents = cellstr(get(handles.popupmenu_vic_version_calib,'String'));
VIC_ver_selected = VIC_ver_contents{get(handles.popupmenu_vic_version_calib,'Value')};
if strcmp(VIC_ver_selected,'VIC-4.2.b')
    wherevicfile = handles.WhereIsVIC_4_2_b;
    IsVIC5 = 0;
elseif strcmp(VIC_ver_selected,'VIC-4.2.c')
    wherevicfile = handles.WhereIsVIC_4_2_c;
    IsVIC5 = 0;
elseif strcmp(VIC_ver_selected,'VIC-4.2.d')
    wherevicfile = handles.WhereIsVIC_4_2_d;
    IsVIC5 = 0;
elseif strcmp(VIC_ver_selected,'VIC-5.0.1')
    wherevicfile = handles.WhereIsVIC_5_0_1;
    IsVIC5 = 1;
end

command_part1 = handles.WhereIsCygwin;
command_part1 = strrep(command_part1,'\','/');

% wherevicfile = handles.WhereIsVIC;
wherevicfile = strrep(wherevicfile,'\','/');

vicga_savefolder = strrep(handles.edit_vicgastofile.String,'\','/');

numsimday = datenum([sim_endyr,sim_endmon,sim_endday])-datenum([sim_stryr,sim_strmon,sim_strday])+1;
sim_datemat = datevec(datenum([sim_stryr,sim_strmon,sim_strday]):datenum([sim_endyr,sim_endmon,sim_endday]));
sim_datemat = sim_datemat(:,1:3);


poolsize = size(poolcal_datemat,1);
pool_obsflow_file = cell(poolsize,1);
pool_subrout_file = cell(poolsize-1,1);
pool_obsflow_file{1} = handles.edit_CAL_INPUT_outflowfile.String;
for i = 1:poolsize-1
    pool_obsflow_file{1+i} = handles.listbox_CAL_INPUT_subflowfile.String{i};
    pool_subrout_file{i} = handles.listbox_CAL_INPUT_subroutfile.String{i};
end


iniparpopset = zeros(Ngrid*Ncalpar,r*(M+1));
for n = 1:r*(M+1)
    parset = reshape(X(n,:),Ncalpar,clustnum);
    iniparpop = zeros(Ngrid,Ncalpar);
    for i = 1:Ncalpar
     
        for j = 1:clustnum
            iniparpop(clustind == uniqclustind(j),i) = parset(i,j);
        end
  
    end
    iniparpopset(:,n) = iniparpop(:);
end


h = waitbar(0,['0/',num2str(r*(M+1))],'name','VIC Global Sensitivity Analysis');
funcscore_pool = nan(r*(M+1),poolsize);
stime = tic;
for i = 1:r*(M+1)
    
    % Generate temporal global parameter files
    fid = fopen(handles.edit_CAL_INPUT_globalfile.String,'r');
    MAX_SNOW_TEMP_defined = 0;
    MIN_RAIN_TEMP_defined = 0;
    fid_write = fopen([handles.edit_vicgastofile.String,'\globalparam_temp.txt'],'w');
    while ~feof(fid)
        content_line = fgets(fid);
        param_type = sscanf(content_line,'%s',1);
        if strcmp(param_type,'SOIL')
            fprintf(fid_write,'%s\n',['SOIL                  ',strrep(handles.edit_vicgastofile.String,'\','/'),'/soilpar_temp.txt']);
        elseif strcmp(param_type,'ROUTE')
            fprintf(fid_write,'%s\n',['ROUTE                 ',strrep(handles.edit_vicgastofile.String,'\','/'),'/routpar_temp.txt']);
        elseif strcmp(param_type,'ROUTE_OUTFILE')
            fprintf(fid_write,'%s\n',['ROUTE_OUTFILE         ',strrep(handles.edit_vicgastofile.String,'\','/'),'/simflow_temp.txt']);
        elseif strcmp(param_type,'RESULT_DIR')
            fprintf(fid_write,'%s\n',['RESULT_DIR            ',strrep(handles.edit_vicgastofile.String,'\','/'),'/vicout_temp']);
        elseif strcmp(param_type,'N_OUTFILES')
            % Do nothing
        elseif strcmp(param_type,'OUTFILE')
            % Do nothing
        elseif strcmp(param_type,'OUTVAR')
            % Do nothing
        elseif strcmp(param_type,'MAX_SNOW_TEMP') && handles.checkbox_calibrated_snowtemp.Value
            [~, where_in_calparlist] = ismember('max_snow_temp',calpar_list);
            pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            fprintf(fid_write,'%s\n',['MAX_SNOW_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
        elseif strcmp(param_type,'MIN_RAIN_TEMP') && handles.checkbox_calibrated_raintemp.Value
            [~, where_in_calparlist] = ismember('min_rain_temp',calpar_list);
            pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
            fprintf(fid_write,'%s\n',['MIN_RAIN_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
        else
            fprintf(fid_write,'%s',content_line);
        end
        
        if strcmp(param_type,'MAX_SNOW_TEMP'); MAX_SNOW_TEMP_defined = 1; end
        if strcmp(param_type,'MIN_RAIN_TEMP'); MIN_RAIN_TEMP_defined = 1; end
        
    end
    
    fprintf(fid_write,'%s\n','N_OUTFILES     1');
    fprintf(fid_write,'%s\n','OUTFILE        vic     3');
    fprintf(fid_write,'%s\n','OUTVAR         OUT_PREC');
    fprintf(fid_write,'%s\n','OUTVAR         OUT_RUNOFF');
    fprintf(fid_write,'%s\n','OUTVAR         OUT_BASEFLOW');
    
    if handles.checkbox_calibrated_snowtemp.Value && ~MAX_SNOW_TEMP_defined
        [~, where_in_calparlist] = ismember('max_snow_temp',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        fprintf(fid_write,'%s\n',['MAX_SNOW_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
    end
    if handles.checkbox_calibrated_raintemp.Value && ~MIN_RAIN_TEMP_defined
        [~, where_in_calparlist] = ismember('min_rain_temp',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        fprintf(fid_write,'%s\n',['MIN_RAIN_TEMP         ',num2str(pararray_in_iniparpopset(1))]);
    end
    
    fclose(fid_write);
    fclose(fid);
    
    
    % Generate temporal soil parameter files
    fid = fopen([handles.edit_vicgastofile.String,'\soilpar_temp.txt'],'w');
    soilpar_content_new = soilpar_content;
    
    if handles.checkbox_calibrated_infilt.Value
        [~, where_in_calparlist] = ismember('infilt',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,5) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_Ds.Value
        [~, where_in_calparlist] = ismember('Ds',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,6) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_Dsmax.Value
        [~, where_in_calparlist] = ismember('Dsmax',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,7) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_Ws.Value
        [~, where_in_calparlist] = ismember('Ws',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,8) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_c.Value
        [~, where_in_calparlist] = ismember('c',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,9) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_depth1.Value
        [~, where_in_calparlist] = ismember('depth1',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,23) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_depth2.Value
        [~, where_in_calparlist] = ismember('depth2',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,24) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_depth3.Value
        [~, where_in_calparlist] = ismember('depth3',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        soilpar_content_new(:,25) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_snowrough.Value
        [~, where_in_calparlist] = ismember('snow_rough',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        if handles.popupmenu_ORGANIC_FRACT.Value == 1
            soilpar_content_new(:,48) = pararray_in_iniparpopset;
        else
            soilpar_content_new(:,57) = pararray_in_iniparpopset;
        end
    end
    
    fprintf(fid,saveformat_soilfile,soilpar_content_new');
    fclose(fid);
    
    % Generate temporal routing parameter files
    routpar_content_new = routpar_content;
    
    fid = fopen([handles.edit_vicgastofile.String,'\routpar_temp.txt'],'w');
    if handles.checkbox_calibrated_N.Value
        [~, where_in_calparlist] = ismember('N',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        routpar_content_new(:,5) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_K.Value
        [~, where_in_calparlist] = ismember('K',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        routpar_content_new(:,6) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_Velo.Value
        [~, where_in_calparlist] = ismember('Velo',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        routpar_content_new(:,7) = pararray_in_iniparpopset;
    end
    if handles.checkbox_calibrated_Diff.Value
        [~, where_in_calparlist] = ismember('Diff',calpar_list);
        pararray_in_iniparpopset = iniparpopset((where_in_calparlist-1)*Ngrid+1:(where_in_calparlist)*Ngrid,i);
        routpar_content_new(:,8) = pararray_in_iniparpopset;
    end
    fprintf(fid,saveformat_routfile,routpar_content_new');
    fclose(fid);
    
    totarea = sum(routpar_content_new(:,3));
    
    funcscore_single = nan(1,poolsize);
    
    if numcores == 1
        
        whereglobalfile = [vicga_savefolder,'/globalparam_temp.txt'];
        system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'''']);
        
        
        routpar_outlet = load([vicga_savefolder,'/routpar_temp.txt']);
        [~,outlet_ind] = min(routpar_outlet(:,4));
        FLOW_tot = zeros(numsimday,1);
        FLOW_base = zeros(numsimday,1);
        for n = 1:size(routpar_outlet,1)
            
            grid_vicout = load([vicga_savefolder,'/vicout_temp/vic_',num2str(routpar_outlet(n,1),['%1.',grid_decimal,'f']),'_',num2str(routpar_outlet(n,2),['%1.',grid_decimal,'f'])]);
            if out_step < 24
                inflow_direct = grpstats(grid_vicout(:,6),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                inflow_base = grpstats(grid_vicout(:,7),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
            else
                inflow_direct = grid_vicout(:,5);
                inflow_base = grid_vicout(:,6);
            end
            
            flowlen = routpar_outlet(n,4);
            route_par = [routpar_outlet(n,5),routpar_outlet(n,6),routpar_outlet(n,7),routpar_outlet(n,8)];
            if n == outlet_ind
                isOutlet = 1;
            else
                isOutlet = 0;
            end
            [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
            FLOW_tot = FLOW_tot + runoff*routpar_outlet(n,3)/sum(routpar_outlet(:,3));
            FLOW_base = FLOW_base + baseflow*routpar_outlet(n,3)/sum(routpar_outlet(:,3));
            
        end
        
        
        % Calculate error at the outlet
        strind = find(sim_datemat(:,1) == poolcal_datemat(1,1) & sim_datemat(:,2) == poolcal_datemat(1,2) & sim_datemat(:,3) == poolcal_datemat(1,3));
        endind = find(sim_datemat(:,1) == poolcal_datemat(1,4) & sim_datemat(:,2) == poolcal_datemat(1,5) & sim_datemat(:,3) == poolcal_datemat(1,6));
        sim_datemat_calper = sim_datemat(strind:endind,:);
        FLOW_tot_calper_day = FLOW_tot(strind:endind);
        FLOW_tot_calper_mon = grpstats(FLOW_tot_calper_day,{sim_datemat_calper(:,1),sim_datemat_calper(:,2)},'sum');
        
        
        obsflow_outlet = load(pool_obsflow_file{1});
        if strcmp(poolcal_timestep{1,1},'day')
            strind = find(obsflow_outlet(:,1) == poolcal_datemat(1,1) & obsflow_outlet(:,2) == poolcal_datemat(1,2) & obsflow_outlet(:,3) == poolcal_datemat(1,3));
            endind = find(obsflow_outlet(:,1) == poolcal_datemat(1,4) & obsflow_outlet(:,2) == poolcal_datemat(1,5) & obsflow_outlet(:,3) == poolcal_datemat(1,6));
            obsflow_outlet_calper_day = obsflow_outlet(strind:endind,end);
            
            obsflow_outlet_calper_day(obsflow_outlet_calper_day<0) = -9999999999;
            obsflow_outlet_calper_mon = grpstats(obsflow_outlet_calper_day,{obsflow_outlet(strind:endind,1),obsflow_outlet(strind:endind,2)},'sum');
            
        else
            strind = find(obsflow_outlet(:,1) == poolcal_datemat(1,1) & obsflow_outlet(:,2) == poolcal_datemat(1,2));
            endind = find(obsflow_outlet(:,1) == poolcal_datemat(1,4) & obsflow_outlet(:,2) == poolcal_datemat(1,5));
            obsflow_outlet_calper_mon = obsflow_outlet(strind:endind,end);
            
            obsflow_outlet_calper_day = [];
            
        end
        
        fitfuncval_outlet = 0;
        switch fitnessfunc
            
            case 'NSE'
                
                if strcmp(poolcal_timestep{1,2},'day')
                    FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_outlet_calper_day>=0);
                    obsflow_outlet_calper_day_valid = obsflow_outlet_calper_day(obsflow_outlet_calper_day>=0);
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_day_valid-obsflow_outlet_calper_day_valid).^2)/var(obsflow_outlet_calper_day_valid,1);
                    
                elseif strcmp(poolcal_timestep{1,2},'month')
                    FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_outlet_calper_mon>=0);
                    obsflow_outlet_calper_mon_valid = obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>=0);
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_mon_valid-obsflow_outlet_calper_mon_valid).^2)/var(obsflow_outlet_calper_mon_valid,1);
                    
                end
                
            case 'KGE'
                
                if strcmp(poolcal_timestep{1,2},'day')
                    FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_outlet_calper_day>=0);
                    obsflow_outlet_calper_day_valid = obsflow_outlet_calper_day(obsflow_outlet_calper_day>=0);
                    mean_ratio = mean(FLOW_tot_calper_day_valid)/mean(obsflow_outlet_calper_day_valid);
                    std_ratio = std(FLOW_tot_calper_day_valid,1)/std(obsflow_outlet_calper_day_valid,1);
                    lincorr = corr(FLOW_tot_calper_day_valid,obsflow_outlet_calper_day_valid);
                    fitfuncval_outlet = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);
                    
                elseif strcmp(poolcal_timestep{1,2},'month')
                    FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_outlet_calper_mon>=0);
                    obsflow_outlet_calper_mon_valid = obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>=0);
                    mean_ratio = mean(FLOW_tot_calper_mon_valid)/mean(obsflow_outlet_calper_mon_valid);
                    std_ratio = std(FLOW_tot_calper_mon_valid,1)/std(obsflow_outlet_calper_mon_valid,1);
                    lincorr = corr(FLOW_tot_calper_mon_valid,obsflow_outlet_calper_mon_valid);
                    fitfuncval_outlet = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);
                    
                end
                
            case 'logNSE'
                
                if strcmp(poolcal_timestep{1,2},'day')
                    FLOW_tot_calper_day_valid = log(FLOW_tot_calper_day(obsflow_outlet_calper_day>0 & FLOW_tot_calper_day>0));
                    obsflow_outlet_calper_day_valid = log(obsflow_outlet_calper_day(obsflow_outlet_calper_day>0 & FLOW_tot_calper_day>0));
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_day_valid-obsflow_outlet_calper_day_valid).^2)/var(obsflow_outlet_calper_day_valid,1);
                    
                elseif strcmp(poolcal_timestep{1,2},'month')
                    FLOW_tot_calper_mon_valid = log(FLOW_tot_calper_mon(obsflow_outlet_calper_mon>0 & FLOW_tot_calper_mon>0));
                    obsflow_outlet_calper_mon_valid = log(obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>0 & FLOW_tot_calper_mon>0));
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_mon_valid-obsflow_outlet_calper_mon_valid).^2)/var(obsflow_outlet_calper_mon_valid,1);
                    
                end
                
        end
        funcscore_single(1) = fitfuncval_outlet;
        
     
    end
 
    
    if numcores > 1
        
        whereglobalfile = [vicga_savefolder,'/globalparam_temp.txt'];
        wheresoilparfile = [vicga_savefolder,'/soilpar_temp.txt'];
        whereroutparfile = [vicga_savefolder,'/routpar_temp.txt'];
        
        splitnum    = numcores;
        gridnum     = sum(soilpar_content_org(:,1));
        
        jobnum_worker = repmat(floor(gridnum/splitnum),1,splitnum);
        for ii = 1:mod(gridnum,splitnum)
            jobnum_worker(ii) = jobnum_worker(ii)+1;
        end
        
        for ii = 1:splitnum
            fileID = fopen(whereglobalfile,'r');
            fileID2 = fopen([whereglobalfile,'_POOL',num2str(ii)],'w');
            while ~feof(fileID)
                linecontent = fgetl(fileID);
                linecontent_new1 = strrep(linecontent,wheresoilparfile,[wheresoilparfile,'_POOL',num2str(ii)]);
                linecontent_new2 = strrep(linecontent,whereroutparfile,[whereroutparfile,'_POOL',num2str(ii)]);
                if length(linecontent)>=4 && strcmp(linecontent(1:4),'SOIL')
                    fprintf(fileID2,'%s\n',linecontent_new1);
                elseif length(linecontent)>=5 && strcmp(linecontent(1:5),'ROUTE')
                    fprintf(fileID2,'%s\n',linecontent_new2);
                else
                    fprintf(fileID2,'%s\n',linecontent);
                end
            end
            fclose(fileID);
            fclose(fileID2);
        end
        
        n = 1;
        fileID1 = fopen(wheresoilparfile,'r');
        C = textscan(fileID1,'%s','delimiter','\n');
        soil_content = C{1};
        
        fileID2 = fopen(whereroutparfile,'r');
        C = textscan(fileID2,'%s','delimiter','\n');
        rout_content = C{1};
        for ii = 1:splitnum
            fileID3 = fopen([wheresoilparfile,'_POOL',num2str(ii)],'w');
            fileID4 = fopen([whereroutparfile,'_POOL',num2str(ii)],'w');
            for j = 1:jobnum_worker(ii)
                fprintf(fileID3,'%s\n',soil_content{n});
                fprintf(fileID4,'%s\n',rout_content{n});
                n = n+1;
            end
            fclose(fileID3);
            fclose(fileID4);
        end
        fclose(fileID1);
        fclose(fileID2);
        
            
        parfor ii = 1:splitnum
            system([command_part1,'\bin\bash --login -c ''',wherevicfile,'/vicNl -g ',whereglobalfile,'_POOL',num2str(ii),'''']);
        end
            
       
        routpar_outlet = load([vicga_savefolder,'/routpar_temp.txt']);
        outlet_flowlen = min(routpar_outlet(:,4));
        FLOW_tot = zeros(numsimday,splitnum);
        FLOW_base = zeros(numsimday,splitnum);
        parfor ii = 1:splitnum
            
            routpar_part = load([whereroutparfile,'_POOL',num2str(ii)]);
            
            FLOW_tot_part = zeros(numsimday,1);
            FLOW_base_part = zeros(numsimday,1);
            for n = 1:size(routpar_part,1)
                grid_vicout = load([vicga_savefolder,'/vicout_temp/vic_',num2str(routpar_part(n,1),['%1.',grid_decimal,'f']),'_',num2str(routpar_part(n,2),['%1.',grid_decimal,'f'])]);
                if out_step < 24
                    inflow_direct = grpstats(grid_vicout(:,6),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                    inflow_base = grpstats(grid_vicout(:,7),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                else
                    inflow_direct = grid_vicout(:,5);
                    inflow_base = grid_vicout(:,6);
                end
                
                flowlen = routpar_part(n,4);
                route_par = [routpar_part(n,5),routpar_part(n,6),routpar_part(n,7),routpar_part(n,8)];
                if flowlen == outlet_flowlen
                    isOutlet = 1;
                else
                    isOutlet = 0;
                end
                [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
                FLOW_tot_part = FLOW_tot_part + runoff*routpar_part(n,3)/totarea;
                FLOW_base_part = FLOW_base_part + baseflow*routpar_part(n,3)/totarea;
                
            end
            FLOW_tot(:,ii)  = FLOW_tot_part;
            FLOW_base(:,ii) = FLOW_base_part;
            
        end
        FLOW_tot  = sum(FLOW_tot,2);
        FLOW_base = sum(FLOW_base,2);
             
        delete([whereglobalfile,'_POOL*']);
        delete([wheresoilparfile,'_POOL*']);
        delete([whereroutparfile,'_POOL*']);
        
        
        % Calculate error at the outlet
        strind = find(sim_datemat(:,1) == poolcal_datemat(1,1) & sim_datemat(:,2) == poolcal_datemat(1,2) & sim_datemat(:,3) == poolcal_datemat(1,3));
        endind = find(sim_datemat(:,1) == poolcal_datemat(1,4) & sim_datemat(:,2) == poolcal_datemat(1,5) & sim_datemat(:,3) == poolcal_datemat(1,6));
        sim_datemat_calper = sim_datemat(strind:endind,:);
        FLOW_tot_calper_day = FLOW_tot(strind:endind);
        FLOW_tot_calper_mon = grpstats(FLOW_tot_calper_day,{sim_datemat_calper(:,1),sim_datemat_calper(:,2)},'sum');
        
        
        obsflow_outlet = load(pool_obsflow_file{1});
        if strcmp(poolcal_timestep{1,1},'day')
            strind = find(obsflow_outlet(:,1) == poolcal_datemat(1,1) & obsflow_outlet(:,2) == poolcal_datemat(1,2) & obsflow_outlet(:,3) == poolcal_datemat(1,3));
            endind = find(obsflow_outlet(:,1) == poolcal_datemat(1,4) & obsflow_outlet(:,2) == poolcal_datemat(1,5) & obsflow_outlet(:,3) == poolcal_datemat(1,6));
            obsflow_outlet_calper_day = obsflow_outlet(strind:endind,end);
            
            obsflow_outlet_calper_day(obsflow_outlet_calper_day<0) = -9999999999;
            obsflow_outlet_calper_mon = grpstats(obsflow_outlet_calper_day,{obsflow_outlet(strind:endind,1),obsflow_outlet(strind:endind,2)},'sum');
            
        else
            strind = find(obsflow_outlet(:,1) == poolcal_datemat(1,1) & obsflow_outlet(:,2) == poolcal_datemat(1,2));
            endind = find(obsflow_outlet(:,1) == poolcal_datemat(1,4) & obsflow_outlet(:,2) == poolcal_datemat(1,5));
            obsflow_outlet_calper_mon = obsflow_outlet(strind:endind,end);
            
            obsflow_outlet_calper_day = [];
            
        end
        
        fitfuncval_outlet = 0;
        switch fitnessfunc
            
            case 'NSE'
                
                if strcmp(poolcal_timestep{1,2},'day')
                    FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_outlet_calper_day>=0);
                    obsflow_outlet_calper_day_valid = obsflow_outlet_calper_day(obsflow_outlet_calper_day>=0);
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_day_valid-obsflow_outlet_calper_day_valid).^2)/var(obsflow_outlet_calper_day_valid,1);
                    
                elseif strcmp(poolcal_timestep{1,2},'month')
                    FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_outlet_calper_mon>=0);
                    obsflow_outlet_calper_mon_valid = obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>=0);
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_mon_valid-obsflow_outlet_calper_mon_valid).^2)/var(obsflow_outlet_calper_mon_valid,1);
                    
                end
                
            case 'KGE'
                
                if strcmp(poolcal_timestep{1,2},'day')
                    FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_outlet_calper_day>=0);
                    obsflow_outlet_calper_day_valid = obsflow_outlet_calper_day(obsflow_outlet_calper_day>=0);
                    mean_ratio = mean(FLOW_tot_calper_day_valid)/mean(obsflow_outlet_calper_day_valid);
                    std_ratio = std(FLOW_tot_calper_day_valid,1)/std(obsflow_outlet_calper_day_valid,1);
                    lincorr = corr(FLOW_tot_calper_day_valid,obsflow_outlet_calper_day_valid);
                    fitfuncval_outlet = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);
                    
                elseif strcmp(poolcal_timestep{1,2},'month')
                    FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_outlet_calper_mon>=0);
                    obsflow_outlet_calper_mon_valid = obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>=0);
                    mean_ratio = mean(FLOW_tot_calper_mon_valid)/mean(obsflow_outlet_calper_mon_valid);
                    std_ratio = std(FLOW_tot_calper_mon_valid,1)/std(obsflow_outlet_calper_mon_valid,1);
                    lincorr = corr(FLOW_tot_calper_mon_valid,obsflow_outlet_calper_mon_valid);
                    fitfuncval_outlet = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);
                    
                end
                
            case 'logNSE'
                
                if strcmp(poolcal_timestep{1,2},'day')
                    FLOW_tot_calper_day_valid = log(FLOW_tot_calper_day(obsflow_outlet_calper_day>0 & FLOW_tot_calper_day>0));
                    obsflow_outlet_calper_day_valid = log(obsflow_outlet_calper_day(obsflow_outlet_calper_day>0 & FLOW_tot_calper_day>0));
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_day_valid-obsflow_outlet_calper_day_valid).^2)/var(obsflow_outlet_calper_day_valid,1);
                    
                elseif strcmp(poolcal_timestep{1,2},'month')
                    FLOW_tot_calper_mon_valid = log(FLOW_tot_calper_mon(obsflow_outlet_calper_mon>0 & FLOW_tot_calper_mon>0));
                    obsflow_outlet_calper_mon_valid = log(obsflow_outlet_calper_mon(obsflow_outlet_calper_mon>0 & FLOW_tot_calper_mon>0));
                    fitfuncval_outlet = 1-mean((FLOW_tot_calper_mon_valid-obsflow_outlet_calper_mon_valid).^2)/var(obsflow_outlet_calper_mon_valid,1);
                    
                end
                
        end
        funcscore_single(1) = fitfuncval_outlet;    
        
    end
    
    
    % RUN ROUTING MODEL FOR INTERIOR BASINS
    for isub = 1:poolsize-1
        
        routpar_sub = load(pool_subrout_file{isub});
        routpar_sub_new = routpar_sub;
        for n = 1:size(routpar_sub,1)
            routpar_sub_new(n,5:8) = routpar_outlet(routpar_outlet(:,1) == routpar_sub(n,1) & routpar_outlet(:,2) == routpar_sub(n,2),5:8);
        end
        [outlet_val,~] = min(routpar_sub_new(:,4));
        
        FLOW_tot = zeros(numsimday,1);
        FLOW_base = zeros(numsimday,1);
        for n = 1:size(routpar_sub_new,1)
            
            grid_vicout = load([vicga_savefolder,'/vicout_temp/vicout_',num2str(p),'/vic_',num2str(routpar_sub_new(n,1),['%1.',grid_decimal,'f']),'_',num2str(routpar_sub_new(n,2),['%1.',grid_decimal,'f'])]);
            if out_step < 24
                inflow_direct = grpstats(grid_vicout(:,6),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
                inflow_base = grpstats(grid_vicout(:,7),{grid_vicout(:,1),grid_vicout(:,2),grid_vicout(:,3)},'sum');
            else
                inflow_direct = grid_vicout(:,5);
                inflow_base = grid_vicout(:,6);
            end
            
            flowlen = routpar_sub_new(n,4);
            route_par = [routpar_sub_new(n,5),routpar_sub_new(n,6),routpar_sub_new(n,7),routpar_sub_new(n,8)];
            if flowlen == outlet_val
                isOutlet = 1;
            else
                isOutlet = 0;
            end
            [runoff, baseflow] = routing_lohmann_mex(inflow_direct, inflow_base, flowlen, route_par, isOutlet);
            FLOW_tot = FLOW_tot + runoff*routpar_sub_new(n,3)/sum(routpar_sub_new(:,3));
            FLOW_base = FLOW_base + baseflow*routpar_sub_new(n,3)/sum(routpar_sub_new(:,3));
            
        end
        
        % Calculate error at sub-basin
        strind = find(sim_datemat(:,1) == poolcal_datemat(isub+1,1) & sim_datemat(:,2) == poolcal_datemat(isub+1,2) & sim_datemat(:,3) == poolcal_datemat(isub+1,3));
        endind = find(sim_datemat(:,1) == poolcal_datemat(isub+1,4) & sim_datemat(:,2) == poolcal_datemat(isub+1,5) & sim_datemat(:,3) == poolcal_datemat(isub+1,6));
        sim_datemat_calper = sim_datemat(strind:endind,:);
        FLOW_tot_calper_day = FLOW_tot(strind:endind);
        FLOW_tot_calper_mon = grpstats(FLOW_tot_calper_day,{sim_datemat_calper(:,1),sim_datemat_calper(:,2)},'sum');
        
        
        obsflow_sub = load(pool_obsflow_file{isub+1});
        if strcmp(poolcal_timestep{1,1},'day')
            strind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,1) & obsflow_sub(:,2) == poolcal_datemat(isub+1,2) & obsflow_sub(:,3) == poolcal_datemat(isub+1,3));
            endind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,4) & obsflow_sub(:,2) == poolcal_datemat(isub+1,5) & obsflow_sub(:,3) == poolcal_datemat(isub+1,6));
            obsflow_sub_calper_day = obsflow_sub(strind:endind,end);
            
            obsflow_sub_calper_day(obsflow_sub_calper_day<0) = -9999999999;
            obsflow_sub_calper_mon = grpstats(obsflow_sub_calper_day,{obsflow_sub(strind:endind,1),obsflow_sub(strind:endind,2)},'sum');
            
        else
            strind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,1) & obsflow_sub(:,2) == poolcal_datemat(isub+1,2));
            endind = find(obsflow_sub(:,1) == poolcal_datemat(isub+1,4) & obsflow_sub(:,2) == poolcal_datemat(isub+1,5));
            obsflow_sub_calper_mon = obsflow_sub(strind:endind,end);
            
            obsflow_sub_calper_day = [];
            
        end
        
        fitfuncval_sub = 0;
        switch fitnessfunc
            
            case 'NSE'
                
                if strcmp(poolcal_timestep{isub+1,2},'day')
                    FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_sub_calper_day>=0);
                    obsflow_sub_calper_day_valid = obsflow_sub_calper_day(obsflow_sub_calper_day>=0);
                    fitfuncval_sub = 1-mean((FLOW_tot_calper_day_valid-obsflow_sub_calper_day_valid).^2)/var(obsflow_sub_calper_day_valid,1);
                    
                elseif strcmp(poolcal_timestep{isub+1,2},'month')
                    FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_sub_calper_mon>=0);
                    obsflow_sub_calper_mon_valid = obsflow_sub_calper_mon(obsflow_sub_calper_mon>=0);
                    fitfuncval_sub = 1-mean((FLOW_tot_calper_mon_valid-obsflow_sub_calper_mon_valid).^2)/var(obsflow_sub_calper_mon_valid,1);
                    
                end
                
            case 'KGE'
                
                if strcmp(poolcal_timestep{isub+1,2},'day')
                    FLOW_tot_calper_day_valid = FLOW_tot_calper_day(obsflow_sub_calper_day>=0);
                    obsflow_sub_calper_day_valid = obsflow_sub_calper_day(obsflow_sub_calper_day>=0);
                    mean_ratio = mean(FLOW_tot_calper_day_valid)/mean(obsflow_sub_calper_day_valid);
                    std_ratio = std(FLOW_tot_calper_day_valid,1)/std(obsflow_sub_calper_day_valid,1);
                    lincorr = corr(FLOW_tot_calper_day_valid,obsflow_sub_calper_day_valid);
                    fitfuncval_sub = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);
                    
                elseif strcmp(poolcal_timestep{isub+1,2},'month')
                    FLOW_tot_calper_mon_valid = FLOW_tot_calper_mon(obsflow_sub_calper_mon>=0);
                    obsflow_sub_calper_mon_valid = obsflow_sub_calper_mon(obsflow_sub_calper_mon>=0);
                    mean_ratio = mean(FLOW_tot_calper_mon_valid)/mean(obsflow_sub_calper_mon_valid);
                    std_ratio = std(FLOW_tot_calper_mon_valid,1)/std(obsflow_sub_calper_mon_valid,1);
                    lincorr = corr(FLOW_tot_calper_mon_valid,obsflow_sub_calper_mon_valid);
                    fitfuncval_sub = 1-sqrt((mean_ratio-1)^2+(std_ratio-1)^2+(lincorr-1)^2);
                    
                end
                
            case 'logNSE'
                
                if strcmp(poolcal_timestep{1,2},'day')
                    FLOW_tot_calper_day_valid = log(FLOW_tot_calper_day(obsflow_sub_calper_day>0 & FLOW_tot_calper_day>0));
                    obsflow_sub_calper_day_valid = log(obsflow_sub_calper_day(obsflow_sub_calper_day>0 & FLOW_tot_calper_day>0));
                    fitfuncval_sub = 1-mean((FLOW_tot_calper_day_valid-obsflow_sub_calper_day_valid).^2)/var(obsflow_sub_calper_day_valid,1);
                    
                elseif strcmp(poolcal_timestep{1,2},'month')
                    FLOW_tot_calper_mon_valid = log(FLOW_tot_calper_mon(obsflow_sub_calper_mon>0 & FLOW_tot_calper_mon>0));
                    obsflow_sub_calper_mon_valid = log(obsflow_sub_calper_mon(obsflow_sub_calper_mon>0 & FLOW_tot_calper_mon>0));
                    fitfuncval_sub = 1-mean((FLOW_tot_calper_mon_valid-obsflow_sub_calper_mon_valid).^2)/var(obsflow_sub_calper_mon_valid,1);
                    
                end
                
        end
        funcscore_single(isub+1) = fitfuncval_sub;
        
    end
    funcscore_pool(i,:) = funcscore_single;
    
    elapse_t = toc(stime);        
    waitbar(i/(r*(M+1)),h,[num2str(i),'/',num2str(r*(M+1)),' (Elapsed Time: ',num2str(elapse_t/60,'%1.0f'),' min)']);
end
% close(h)

Y = mean(funcscore_pool,2);    


%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Compute Elementary Effects
%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Dr = DistrPar(:,2)-DistrPar(:,1);
if any(Dr<=0)
    error('all components of ''xmax'' must be higher than the corresponding ones in ''xmin''')
end

EE = nan(r,M) ; % matrix of elementary effects
k  = 1 ;
ki = 1 ;
for i=1:r
    for j=1:M
        if strcmp(design_type,'Radial') 
            % radial design: EE is the difference between output at one
            % point in the i-th block and output at the 1st point in the
            % block
            EE(i,j) = abs( Y(k+1) - Y(ki) ) / abs( X(k+1,j)-X(ki,j) )*Dr(j) ;
        elseif strcmp(design_type,'Trajectory') 
            % trajectory design: EE is the difference between output at one
            % point in the i-th block and output at the previous point in
            % the block (the "block" is indeed a trajectory in the input
            % space composed of points that differ in one component at the
            % time)
            idx = find( abs( X(k+1,:)-X(k,:) ) > 0 );  
            % if using 'morris' sampling, the points in the block may not
            % be in the proper order, i.e. each point in the block differs
            % from the previous/next one by one component but we don't know
            % which one; this is here computed and saved in 'idx'
            if isempty(idx)  ; error('X(%d,:) and X(%d,:) are equal',[k,k+1]); end
            if length(idx)>1 ; error('X(%d,:) and X(%d,:) differ in more than one component',[k,k+1]); end
            EE(i,idx) = abs( Y(k+1) - Y(k) ) / abs( X(k+1,idx)-X(k,idx) )*Dr(idx) ;
        else
            error('''design_type'' must be one among {''radial'',''trajectory''}')
        end
        k=k+1 ;
    end
    k=k+1;
    ki=k ;
end

mi       = mean(EE);
sigma    = std(EE);

t_content = cell(clustnum,length(X_labels)+1);
for i=1:clustnum; t_content{i,1}=uniqclustind(i); end
n = 1;
for j=1:clustnum 
    for i=1:length(X_labels)
        t_content{j,i+1} = mi(n);
        n = n+1;
    end
end
set(handles.uitable_gsa_eet,'data',t_content)

t_content2 = cell(clustnum,length(X_labels)+1);
for i=1:clustnum; t_content2{i,1}=uniqclustind(i); end
n = 1;
for j=1:clustnum 
    for i=1:length(X_labels)
        t_content2{j,i+1} = sigma(n);
        n = n+1;
    end
end
handles.eet_std = t_content2;

guidata(hObject, handles);


% --- Executes on button press in pushbutton_gsa_save.
function pushbutton_gsa_save_Callback(hObject, eventdata, handles)

[savefile,savepath] = uiputfile([handles.lastvisitdir,'\*.csv'],'Save file name');
if ~(savepath == 0)

    handles.lastvisitdir =  savepath;
    colname = get(handles.uitable_gsa_eet,'ColumnName');
    savedata_mean = get(handles.uitable_gsa_eet,'data');
    xlswrite([savepath,'/',savefile],[colname';savedata_mean],'eet_mean')
    
    savedata_std = handles.eet_std;
    xlswrite([savepath,'/',savefile],[colname';savedata_std],'eet_std')
    

end
guidata(hObject, handles);
